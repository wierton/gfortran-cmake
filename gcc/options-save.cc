/* This file is auto-generated by optc-save-gen.awk.  */

#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "tm.h"
#include "opts.h"
#include "intl.h"

#include "flags.h"
#include "target.h"
#include "inchash.h"
#include "hash-set.h"
#include "vec.h"
#include "input.h"
#include "alias.h"
#include "symtab.h"
#include "inchash.h"
#include "tree.h"
#include "fold-const.h"
#include "tree-ssa-alias.h"
#include "is-a.h"
#include "predict.h"
#include "function.h"
#include "basic-block.h"
#include "gimple-expr.h"
#include "gimple.h"
#include "data-streamer.h"
#include "ipa-ref.h"
#include "cgraph.h"

#include "cpplib.h"
#include "cpplib.h"
#include "diagnostic-color.h"
#include "diagnostic-url.h"
#include "diagnostic.h"
#include "pretty-print.h"

/* Save optimization variables into a structure.  */
void
cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts,
		      struct gcc_options *opts_set)
{
  gcc_assert (IN_RANGE (opts->x_optimize, 0, 255));
  gcc_assert (IN_RANGE (opts->x_optimize_size, 0, 2));
  gcc_assert (IN_RANGE (opts->x_optimize_debug, 0, 1));
  gcc_assert (IN_RANGE (opts->x_optimize_fast, 0, 1));
  gcc_assert (IN_RANGE (opts->x_warn_inline, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_aggressive_loop_optimizations, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_align_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_align_jumps, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_align_labels, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_align_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_allocation_dce, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_store_data_races, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_associative_math, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_asynchronous_unwind_tables, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_auto_inc_dec, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_bit_tests, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_branch_on_count_reg, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_branch_probabilities, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_caller_saves, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_code_hoisting, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_combine_stack_adjustments, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_compare_elim_after_reload, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_conserve_stack, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_cprop_registers, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_crossjumping, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_cse_follow_jumps, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_cx_fortran_rules, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_cx_limited_range, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_dce, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_defer_pop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_delayed_branch, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_delete_dead_exceptions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_delete_null_pointer_checks, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_devirtualize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_devirtualize_speculatively, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_dse, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_early_inlining, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_exceptions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_expensive_optimizations, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_finite_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_finite_math_only, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_float_store, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_fold_simple_inlines, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_forward_propagate, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_fp_int_builtin_inexact, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_no_function_cse, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_gcse, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_gcse_after_reload, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_gcse_las, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_gcse_lm, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_gcse_sm, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_graphite, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_graphite_identity, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_guess_branch_prob, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_harden_compares, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_harden_conditional_branches, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_hoist_adjacent_loads, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_if_conversion, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_if_conversion2, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_indirect_inlining, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_no_inline, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_inline_atomics, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_inline_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_inline_functions_called_once, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_inline_small_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_bit_cp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_cp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_cp_clone, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_icf, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_icf_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_icf_variables, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_modref, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_profile, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_pta, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_pure_const, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_ra, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_reference, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_reference_addressable, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_sra, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_stack_alignment, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_strict_aliasing, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ipa_vrp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ira_hoist_pressure, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ira_loop_pressure, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ira_share_save_slots, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ira_share_spill_slots, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_isolate_erroneous_paths_attribute, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_isolate_erroneous_paths_dereference, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ivopts, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_jump_tables, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_keep_gc_roots_live, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_lifetime_dse, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_limit_function_alignment, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_live_range_shrinkage, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_loop_interchange, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_loop_nest_optimize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_loop_parallelize_all, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unroll_jam, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_lra_remat, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_errno_math, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_modulo_sched, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_modulo_sched_allow_regmoves, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_move_loop_invariants, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_move_loop_stores, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_non_call_exceptions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_nothrow_opt, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_omit_frame_pointer, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_opt_info, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_optimize_sibling_calls, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_optimize_strlen, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_pack_struct, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_partial_inlining, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_peel_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_no_peephole, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_peephole2, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_plt, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_predictive_commoning, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_prefetch_loop_arrays, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_printf_return_value, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_profile_partial_training, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_profile_reorder_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_reciprocal_math, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ree, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_pcc_struct_return, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_rename_registers, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_reorder_blocks, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_reorder_blocks_and_partition, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_reorder_functions, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_rerun_cse_after_loop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_resched_modulo_sched, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_rounding_math, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_rtti, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_save_optimization_record, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_critical_path_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_dep_count_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_group_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_interblock, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_last_insn_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_pressure, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_rank_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_speculative, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched_spec_insn_heuristic, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_speculative_load, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_speculative_load_dangerous, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sched2_use_superblocks, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_fusion, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_insns, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_schedule_insns_after_reload, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_section_anchors, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sel_sched_pipelining, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sel_sched_pipelining_outer_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_sel_sched_reschedule_pipelined, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_selective_scheduling, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_selective_scheduling2, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_semantic_interposition, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_short_enums, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_short_wchar, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_shrink_wrap, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_shrink_wrap_separate, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_signaling_nans, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_signed_zeros, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_single_precision_constant, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_split_ivs_in_unroller, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_split_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_split_paths, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_split_wide_types, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_split_wide_types_early, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ssa_backprop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_ssa_phiopt, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_stack_clash_protection, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_stack_protect, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_stdarg_opt, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_store_merging, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_strict_aliasing, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_strict_enums, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_strict_volatile_bitfields, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_thread_jumps, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_threadsafe_statics, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_toplevel_reorder, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tracer, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_trapping_math, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_trapv, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_bit_ccp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_builtin_call_dce, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_ccp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_ch, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_coalesce_vars, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_copy_prop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_cselim, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_dce, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_dom, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_dse, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_forwprop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_fre, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_distribute_patterns, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_distribution, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_if_convert, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_im, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_ivcanon, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_optimize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_loop_vectorize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_live_range_split, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_partial_pre, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_phiprop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_pre, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_pta, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_reassoc, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_scev_cprop, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_sink, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_slp_vectorize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_slsr, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_sra, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_switch_conversion, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_tail_merge, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_ter, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_vectorize, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_tree_vrp, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unconstrained_commons, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unroll_all_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_cunroll_grow_size, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unroll_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unsafe_math_optimizations, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unswitch_loops, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_unwind_tables, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_var_tracking, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_var_tracking_assignments, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_var_tracking_assignments_toggle, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_var_tracking_uninit, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_variable_expansion_in_unroller, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_version_loops_for_strides, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_value_profile_transformations, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_web, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_wrapv, -128, 127));
  gcc_assert (IN_RANGE (opts->x_flag_wrapv_pointer, -128, 127));
  gcc_assert (IN_RANGE (opts->x_debug_nonbind_markers_p, -128, 127));

  ptr->x_param_align_loop_iterations = opts->x_param_align_loop_iterations;
  ptr->x_param_align_threshold = opts->x_param_align_threshold;
  ptr->x_param_asan_protect_allocas = opts->x_param_asan_protect_allocas;
  ptr->x_param_asan_instrument_reads = opts->x_param_asan_instrument_reads;
  ptr->x_param_asan_instrument_writes = opts->x_param_asan_instrument_writes;
  ptr->x_param_asan_instrumentation_with_call_threshold = opts->x_param_asan_instrumentation_with_call_threshold;
  ptr->x_param_asan_memintrin = opts->x_param_asan_memintrin;
  ptr->x_param_asan_stack = opts->x_param_asan_stack;
  ptr->x_param_asan_use_after_return = opts->x_param_asan_use_after_return;
  ptr->x_param_avg_loop_niter = opts->x_param_avg_loop_niter;
  ptr->x_param_avoid_fma_max_bits = opts->x_param_avoid_fma_max_bits;
  ptr->x_param_builtin_expect_probability = opts->x_param_builtin_expect_probability;
  ptr->x_param_builtin_string_cmp_inline_length = opts->x_param_builtin_string_cmp_inline_length;
  ptr->x_param_case_values_threshold = opts->x_param_case_values_threshold;
  ptr->x_param_comdat_sharing_probability = opts->x_param_comdat_sharing_probability;
  ptr->x_param_construct_interfere_size = opts->x_param_construct_interfere_size;
  ptr->x_param_destruct_interfere_size = opts->x_param_destruct_interfere_size;
  ptr->x_param_dse_max_alias_queries_per_store = opts->x_param_dse_max_alias_queries_per_store;
  ptr->x_param_dse_max_object_size = opts->x_param_dse_max_object_size;
  ptr->x_param_early_inlining_insns = opts->x_param_early_inlining_insns;
  ptr->x_param_evrp_sparse_threshold = opts->x_param_evrp_sparse_threshold;
  ptr->x_param_evrp_switch_limit = opts->x_param_evrp_switch_limit;
  ptr->x_param_fsm_scale_path_blocks = opts->x_param_fsm_scale_path_blocks;
  ptr->x_param_fsm_scale_path_stmts = opts->x_param_fsm_scale_path_stmts;
  ptr->x_param_gcse_after_reload_critical_fraction = opts->x_param_gcse_after_reload_critical_fraction;
  ptr->x_param_gcse_after_reload_partial_fraction = opts->x_param_gcse_after_reload_partial_fraction;
  ptr->x_param_gcse_cost_distance_ratio = opts->x_param_gcse_cost_distance_ratio;
  ptr->x_param_gcse_unrestricted_cost = opts->x_param_gcse_unrestricted_cost;
  ptr->x_param_graphite_max_arrays_per_scop = opts->x_param_graphite_max_arrays_per_scop;
  ptr->x_param_graphite_max_nb_scop_params = opts->x_param_graphite_max_nb_scop_params;
  ptr->x_param_hwasan_instrument_allocas = opts->x_param_hwasan_instrument_allocas;
  ptr->x_param_hwasan_instrument_mem_intrinsics = opts->x_param_hwasan_instrument_mem_intrinsics;
  ptr->x_param_hwasan_instrument_reads = opts->x_param_hwasan_instrument_reads;
  ptr->x_param_hwasan_instrument_stack = opts->x_param_hwasan_instrument_stack;
  ptr->x_param_hwasan_instrument_writes = opts->x_param_hwasan_instrument_writes;
  ptr->x_param_hwasan_random_frame_tag = opts->x_param_hwasan_random_frame_tag;
  ptr->x_param_inline_heuristics_hint_percent = opts->x_param_inline_heuristics_hint_percent;
  ptr->x_param_inline_min_speedup = opts->x_param_inline_min_speedup;
  ptr->x_param_inline_unit_growth = opts->x_param_inline_unit_growth;
  ptr->x_param_ipa_cp_eval_threshold = opts->x_param_ipa_cp_eval_threshold;
  ptr->x_param_ipa_cp_large_unit_insns = opts->x_param_ipa_cp_large_unit_insns;
  ptr->x_param_ipa_cp_loop_hint_bonus = opts->x_param_ipa_cp_loop_hint_bonus;
  ptr->x_param_ipa_cp_max_recursive_depth = opts->x_param_ipa_cp_max_recursive_depth;
  ptr->x_param_ipa_cp_min_recursive_probability = opts->x_param_ipa_cp_min_recursive_probability;
  ptr->x_param_ipa_cp_profile_count_base = opts->x_param_ipa_cp_profile_count_base;
  ptr->x_param_ipa_cp_recursion_penalty = opts->x_param_ipa_cp_recursion_penalty;
  ptr->x_param_ipa_cp_recursive_freq_factor = opts->x_param_ipa_cp_recursive_freq_factor;
  ptr->x_param_ipa_cp_single_call_penalty = opts->x_param_ipa_cp_single_call_penalty;
  ptr->x_param_ipa_cp_unit_growth = opts->x_param_ipa_cp_unit_growth;
  ptr->x_param_ipa_cp_value_list_size = opts->x_param_ipa_cp_value_list_size;
  ptr->x_param_ipa_jump_function_lookups = opts->x_param_ipa_jump_function_lookups;
  ptr->x_param_ipa_max_aa_steps = opts->x_param_ipa_max_aa_steps;
  ptr->x_param_ipa_max_agg_items = opts->x_param_ipa_max_agg_items;
  ptr->x_param_ipa_max_loop_predicates = opts->x_param_ipa_max_loop_predicates;
  ptr->x_param_ipa_max_param_expr_ops = opts->x_param_ipa_max_param_expr_ops;
  ptr->x_param_ipa_max_switch_predicate_bounds = opts->x_param_ipa_max_switch_predicate_bounds;
  ptr->x_param_ipa_sra_max_replacements = opts->x_param_ipa_sra_max_replacements;
  ptr->x_param_ipa_sra_ptr_growth_factor = opts->x_param_ipa_sra_ptr_growth_factor;
  ptr->x_param_ira_consider_dup_in_all_alts = opts->x_param_ira_consider_dup_in_all_alts;
  ptr->x_param_ira_loop_reserved_regs = opts->x_param_ira_loop_reserved_regs;
  ptr->x_param_ira_max_conflict_table_size = opts->x_param_ira_max_conflict_table_size;
  ptr->x_param_ira_max_loops_num = opts->x_param_ira_max_loops_num;
  ptr->x_param_iv_always_prune_cand_set_bound = opts->x_param_iv_always_prune_cand_set_bound;
  ptr->x_param_iv_consider_all_candidates_bound = opts->x_param_iv_consider_all_candidates_bound;
  ptr->x_param_iv_max_considered_uses = opts->x_param_iv_max_considered_uses;
  ptr->x_param_jump_table_max_growth_ratio_for_size = opts->x_param_jump_table_max_growth_ratio_for_size;
  ptr->x_param_jump_table_max_growth_ratio_for_speed = opts->x_param_jump_table_max_growth_ratio_for_speed;
  ptr->x_param_l1_cache_line_size = opts->x_param_l1_cache_line_size;
  ptr->x_param_l1_cache_size = opts->x_param_l1_cache_size;
  ptr->x_param_l2_cache_size = opts->x_param_l2_cache_size;
  ptr->x_param_large_function_growth = opts->x_param_large_function_growth;
  ptr->x_param_large_function_insns = opts->x_param_large_function_insns;
  ptr->x_param_stack_frame_growth = opts->x_param_stack_frame_growth;
  ptr->x_param_large_stack_frame = opts->x_param_large_stack_frame;
  ptr->x_param_large_unit_insns = opts->x_param_large_unit_insns;
  ptr->x_param_lim_expensive = opts->x_param_lim_expensive;
  ptr->x_param_loop_block_tile_size = opts->x_param_loop_block_tile_size;
  ptr->x_param_loop_interchange_max_num_stmts = opts->x_param_loop_interchange_max_num_stmts;
  ptr->x_param_loop_interchange_stride_ratio = opts->x_param_loop_interchange_stride_ratio;
  ptr->x_param_loop_invariant_max_bbs_in_loop = opts->x_param_loop_invariant_max_bbs_in_loop;
  ptr->x_param_loop_max_datarefs_for_datadeps = opts->x_param_loop_max_datarefs_for_datadeps;
  ptr->x_param_loop_versioning_max_inner_insns = opts->x_param_loop_versioning_max_inner_insns;
  ptr->x_param_loop_versioning_max_outer_insns = opts->x_param_loop_versioning_max_outer_insns;
  ptr->x_param_lra_inheritance_ebb_probability_cutoff = opts->x_param_lra_inheritance_ebb_probability_cutoff;
  ptr->x_param_lra_max_considered_reload_pseudos = opts->x_param_lra_max_considered_reload_pseudos;
  ptr->x_param_max_average_unrolled_insns = opts->x_param_max_average_unrolled_insns;
  ptr->x_param_max_combine_insns = opts->x_param_max_combine_insns;
  ptr->x_param_max_unroll_iterations = opts->x_param_max_unroll_iterations;
  ptr->x_param_max_completely_peel_times = opts->x_param_max_completely_peel_times;
  ptr->x_param_max_completely_peeled_insns = opts->x_param_max_completely_peeled_insns;
  ptr->x_param_max_crossjump_edges = opts->x_param_max_crossjump_edges;
  ptr->x_param_max_cse_insns = opts->x_param_max_cse_insns;
  ptr->x_param_max_cse_path_length = opts->x_param_max_cse_path_length;
  ptr->x_param_max_cselib_memory_locations = opts->x_param_max_cselib_memory_locations;
  ptr->x_param_max_debug_marker_count = opts->x_param_max_debug_marker_count;
  ptr->x_param_max_delay_slot_insn_search = opts->x_param_max_delay_slot_insn_search;
  ptr->x_param_max_delay_slot_live_search = opts->x_param_max_delay_slot_live_search;
  ptr->x_param_max_dse_active_local_stores = opts->x_param_max_dse_active_local_stores;
  ptr->x_param_early_inliner_max_iterations = opts->x_param_early_inliner_max_iterations;
  ptr->x_param_max_find_base_term_values = opts->x_param_max_find_base_term_values;
  ptr->x_param_max_fsm_thread_length = opts->x_param_max_fsm_thread_length;
  ptr->x_param_max_fsm_thread_path_insns = opts->x_param_max_fsm_thread_path_insns;
  ptr->x_param_max_gcse_insertion_ratio = opts->x_param_max_gcse_insertion_ratio;
  ptr->x_param_max_gcse_memory = opts->x_param_max_gcse_memory;
  ptr->x_param_max_goto_duplication_insns = opts->x_param_max_goto_duplication_insns;
  ptr->x_param_max_grow_copy_bb_insns = opts->x_param_max_grow_copy_bb_insns;
  ptr->x_param_max_hoist_depth = opts->x_param_max_hoist_depth;
  ptr->x_param_inline_functions_called_once_insns = opts->x_param_inline_functions_called_once_insns;
  ptr->x_param_inline_functions_called_once_loop_depth = opts->x_param_inline_functions_called_once_loop_depth;
  ptr->x_param_max_inline_insns_auto = opts->x_param_max_inline_insns_auto;
  ptr->x_param_max_inline_insns_recursive_auto = opts->x_param_max_inline_insns_recursive_auto;
  ptr->x_param_max_inline_insns_recursive = opts->x_param_max_inline_insns_recursive;
  ptr->x_param_max_inline_insns_single = opts->x_param_max_inline_insns_single;
  ptr->x_param_max_inline_insns_size = opts->x_param_max_inline_insns_size;
  ptr->x_param_max_inline_insns_small = opts->x_param_max_inline_insns_small;
  ptr->x_param_max_inline_recursive_depth_auto = opts->x_param_max_inline_recursive_depth_auto;
  ptr->x_param_max_inline_recursive_depth = opts->x_param_max_inline_recursive_depth;
  ptr->x_param_max_isl_operations = opts->x_param_max_isl_operations;
  ptr->x_param_max_iterations_computation_cost = opts->x_param_max_iterations_computation_cost;
  ptr->x_param_max_iterations_to_track = opts->x_param_max_iterations_to_track;
  ptr->x_param_max_jump_thread_duplication_stmts = opts->x_param_max_jump_thread_duplication_stmts;
  ptr->x_param_max_last_value_rtl = opts->x_param_max_last_value_rtl;
  ptr->x_param_max_loop_header_insns = opts->x_param_max_loop_header_insns;
  ptr->x_param_max_modulo_backtrack_attempts = opts->x_param_max_modulo_backtrack_attempts;
  ptr->x_param_max_partial_antic_length = opts->x_param_max_partial_antic_length;
  ptr->x_param_max_peel_branches = opts->x_param_max_peel_branches;
  ptr->x_param_max_peel_times = opts->x_param_max_peel_times;
  ptr->x_param_max_peeled_insns = opts->x_param_max_peeled_insns;
  ptr->x_param_max_pending_list_length = opts->x_param_max_pending_list_length;
  ptr->x_param_max_pipeline_region_blocks = opts->x_param_max_pipeline_region_blocks;
  ptr->x_param_max_pipeline_region_insns = opts->x_param_max_pipeline_region_insns;
  ptr->x_param_max_pow_sqrt_depth = opts->x_param_max_pow_sqrt_depth;
  ptr->x_param_max_predicted_iterations = opts->x_param_max_predicted_iterations;
  ptr->x_param_max_reload_search_insns = opts->x_param_max_reload_search_insns;
  ptr->x_param_max_rtl_if_conversion_insns = opts->x_param_max_rtl_if_conversion_insns;
  ptr->x_param_max_rtl_if_conversion_predictable_cost = opts->x_param_max_rtl_if_conversion_predictable_cost;
  ptr->x_param_max_rtl_if_conversion_unpredictable_cost = opts->x_param_max_rtl_if_conversion_unpredictable_cost;
  ptr->x_param_max_sched_extend_regions_iters = opts->x_param_max_sched_extend_regions_iters;
  ptr->x_param_max_sched_insn_conflict_delay = opts->x_param_max_sched_insn_conflict_delay;
  ptr->x_param_max_sched_ready_insns = opts->x_param_max_sched_ready_insns;
  ptr->x_param_max_sched_region_blocks = opts->x_param_max_sched_region_blocks;
  ptr->x_param_max_sched_region_insns = opts->x_param_max_sched_region_insns;
  ptr->x_param_max_slsr_candidate_scan = opts->x_param_max_slsr_candidate_scan;
  ptr->x_param_max_speculative_devirt_maydefs = opts->x_param_max_speculative_devirt_maydefs;
  ptr->x_param_max_stores_to_merge = opts->x_param_max_stores_to_merge;
  ptr->x_param_max_stores_to_sink = opts->x_param_max_stores_to_sink;
  ptr->x_param_max_tail_merge_comparisons = opts->x_param_max_tail_merge_comparisons;
  ptr->x_param_max_tail_merge_iterations = opts->x_param_max_tail_merge_iterations;
  ptr->x_param_max_tracked_strlens = opts->x_param_max_tracked_strlens;
  ptr->x_param_max_tree_if_conversion_phi_args = opts->x_param_max_tree_if_conversion_phi_args;
  ptr->x_param_max_unroll_times = opts->x_param_max_unroll_times;
  ptr->x_param_max_unrolled_insns = opts->x_param_max_unrolled_insns;
  ptr->x_param_max_unswitch_insns = opts->x_param_max_unswitch_insns;
  ptr->x_param_max_variable_expansions = opts->x_param_max_variable_expansions;
  ptr->x_param_max_vartrack_expr_depth = opts->x_param_max_vartrack_expr_depth;
  ptr->x_param_max_vartrack_reverse_op_size = opts->x_param_max_vartrack_reverse_op_size;
  ptr->x_param_max_vartrack_size = opts->x_param_max_vartrack_size;
  ptr->x_param_max_vrp_switch_assertions = opts->x_param_max_vrp_switch_assertions;
  ptr->x_param_min_crossjump_insns = opts->x_param_min_crossjump_insns;
  ptr->x_param_min_inline_recursive_probability = opts->x_param_min_inline_recursive_probability;
  ptr->x_param_min_insn_to_prefetch_ratio = opts->x_param_min_insn_to_prefetch_ratio;
  ptr->x_param_min_loop_cond_split_prob = opts->x_param_min_loop_cond_split_prob;
  ptr->x_param_min_pagesize = opts->x_param_min_pagesize;
  ptr->x_param_min_size_for_stack_sharing = opts->x_param_min_size_for_stack_sharing;
  ptr->x_param_min_spec_prob = opts->x_param_min_spec_prob;
  ptr->x_param_min_vect_loop_bound = opts->x_param_min_vect_loop_bound;
  ptr->x_param_modref_max_accesses = opts->x_param_modref_max_accesses;
  ptr->x_param_modref_max_adjustments = opts->x_param_modref_max_adjustments;
  ptr->x_param_modref_max_bases = opts->x_param_modref_max_bases;
  ptr->x_param_modref_max_depth = opts->x_param_modref_max_depth;
  ptr->x_param_modref_max_escape_points = opts->x_param_modref_max_escape_points;
  ptr->x_param_modref_max_refs = opts->x_param_modref_max_refs;
  ptr->x_param_modref_max_tests = opts->x_param_modref_max_tests;
  ptr->x_param_parloops_chunk_size = opts->x_param_parloops_chunk_size;
  ptr->x_param_parloops_min_per_thread = opts->x_param_parloops_min_per_thread;
  ptr->x_param_parloops_schedule = opts->x_param_parloops_schedule;
  ptr->x_param_partial_inlining_entry_probability = opts->x_param_partial_inlining_entry_probability;
  ptr->x_param_predictable_branch_outcome = opts->x_param_predictable_branch_outcome;
  ptr->x_param_prefetch_dynamic_strides = opts->x_param_prefetch_dynamic_strides;
  ptr->x_param_prefetch_latency = opts->x_param_prefetch_latency;
  ptr->x_param_prefetch_min_insn_to_mem_ratio = opts->x_param_prefetch_min_insn_to_mem_ratio;
  ptr->x_param_prefetch_minimum_stride = opts->x_param_prefetch_minimum_stride;
  ptr->x_param_ranger_logical_depth = opts->x_param_ranger_logical_depth;
  ptr->x_param_relation_block_limit = opts->x_param_relation_block_limit;
  ptr->x_param_rpo_vn_max_loop_depth = opts->x_param_rpo_vn_max_loop_depth;
  ptr->x_param_sccvn_max_alias_queries_per_access = opts->x_param_sccvn_max_alias_queries_per_access;
  ptr->x_param_scev_max_expr_complexity = opts->x_param_scev_max_expr_complexity;
  ptr->x_param_scev_max_expr_size = opts->x_param_scev_max_expr_size;
  ptr->x_param_sched_autopref_queue_depth = opts->x_param_sched_autopref_queue_depth;
  ptr->x_param_sched_mem_true_dep_cost = opts->x_param_sched_mem_true_dep_cost;
  ptr->x_param_sched_pressure_algorithm = opts->x_param_sched_pressure_algorithm;
  ptr->x_param_sched_spec_prob_cutoff = opts->x_param_sched_spec_prob_cutoff;
  ptr->x_param_sched_state_edge_prob_cutoff = opts->x_param_sched_state_edge_prob_cutoff;
  ptr->x_param_selsched_insns_to_rename = opts->x_param_selsched_insns_to_rename;
  ptr->x_param_selsched_max_lookahead = opts->x_param_selsched_max_lookahead;
  ptr->x_param_selsched_max_sched_times = opts->x_param_selsched_max_sched_times;
  ptr->x_param_simultaneous_prefetches = opts->x_param_simultaneous_prefetches;
  ptr->x_param_sink_frequency_threshold = opts->x_param_sink_frequency_threshold;
  ptr->x_param_sms_dfa_history = opts->x_param_sms_dfa_history;
  ptr->x_param_sms_loop_average_count_threshold = opts->x_param_sms_loop_average_count_threshold;
  ptr->x_param_sms_max_ii_factor = opts->x_param_sms_max_ii_factor;
  ptr->x_param_sms_min_sc = opts->x_param_sms_min_sc;
  ptr->x_param_sra_max_propagations = opts->x_param_sra_max_propagations;
  ptr->x_param_sra_max_scalarization_size_size = opts->x_param_sra_max_scalarization_size_size;
  ptr->x_param_sra_max_scalarization_size_speed = opts->x_param_sra_max_scalarization_size_speed;
  ptr->x_param_ssa_name_def_chain_limit = opts->x_param_ssa_name_def_chain_limit;
  ptr->x_param_ssp_buffer_size = opts->x_param_ssp_buffer_size;
  ptr->x_param_stack_clash_protection_guard_size = opts->x_param_stack_clash_protection_guard_size;
  ptr->x_param_stack_clash_protection_probe_interval = opts->x_param_stack_clash_protection_probe_interval;
  ptr->x_param_store_merging_allow_unaligned = opts->x_param_store_merging_allow_unaligned;
  ptr->x_param_store_merging_max_size = opts->x_param_store_merging_max_size;
  ptr->x_param_switch_conversion_branch_ratio = opts->x_param_switch_conversion_branch_ratio;
  ptr->x_param_tm_max_aggregate_size = opts->x_param_tm_max_aggregate_size;
  ptr->x_param_tracer_dynamic_coverage_feedback = opts->x_param_tracer_dynamic_coverage_feedback;
  ptr->x_param_tracer_dynamic_coverage = opts->x_param_tracer_dynamic_coverage;
  ptr->x_param_tracer_max_code_growth = opts->x_param_tracer_max_code_growth;
  ptr->x_param_tracer_min_branch_probability_feedback = opts->x_param_tracer_min_branch_probability_feedback;
  ptr->x_param_tracer_min_branch_probability = opts->x_param_tracer_min_branch_probability;
  ptr->x_param_tracer_min_branch_ratio = opts->x_param_tracer_min_branch_ratio;
  ptr->x_param_tree_reassoc_width = opts->x_param_tree_reassoc_width;
  ptr->x_param_uninit_control_dep_attempts = opts->x_param_uninit_control_dep_attempts;
  ptr->x_param_uninlined_function_insns = opts->x_param_uninlined_function_insns;
  ptr->x_param_uninlined_function_time = opts->x_param_uninlined_function_time;
  ptr->x_param_uninlined_function_thunk_insns = opts->x_param_uninlined_function_thunk_insns;
  ptr->x_param_uninlined_function_thunk_time = opts->x_param_uninlined_function_thunk_time;
  ptr->x_param_unlikely_bb_count_fraction = opts->x_param_unlikely_bb_count_fraction;
  ptr->x_param_unroll_jam_max_unroll = opts->x_param_unroll_jam_max_unroll;
  ptr->x_param_unroll_jam_min_percent = opts->x_param_unroll_jam_min_percent;
  ptr->x_param_use_after_scope_direct_emission_threshold = opts->x_param_use_after_scope_direct_emission_threshold;
  ptr->x_param_vect_epilogues_nomask = opts->x_param_vect_epilogues_nomask;
  ptr->x_param_vect_induction_float = opts->x_param_vect_induction_float;
  ptr->x_param_vect_inner_loop_cost_factor = opts->x_param_vect_inner_loop_cost_factor;
  ptr->x_param_vect_max_peeling_for_alignment = opts->x_param_vect_max_peeling_for_alignment;
  ptr->x_param_vect_max_version_for_alias_checks = opts->x_param_vect_max_version_for_alias_checks;
  ptr->x_param_vect_max_version_for_alignment_checks = opts->x_param_vect_max_version_for_alignment_checks;
  ptr->x_param_vect_partial_vector_usage = opts->x_param_vect_partial_vector_usage;
  ptr->x_flag_sched_stalled_insns = opts->x_flag_sched_stalled_insns;
  ptr->x_flag_sched_stalled_insns_dep = opts->x_flag_sched_stalled_insns_dep;
  ptr->x_flag_tree_parallelize_loops = opts->x_flag_tree_parallelize_loops;
  ptr->x_param_evrp_mode = opts->x_param_evrp_mode;
  ptr->x_param_ranger_debug = opts->x_param_ranger_debug;
  ptr->x_param_threader_debug = opts->x_param_threader_debug;
  ptr->x_param_vrp1_mode = opts->x_param_vrp1_mode;
  ptr->x_param_vrp2_mode = opts->x_param_vrp2_mode;
  ptr->x_flag_excess_precision = opts->x_flag_excess_precision;
  ptr->x_flag_fp_contract_mode = opts->x_flag_fp_contract_mode;
  ptr->x_flag_ira_algorithm = opts->x_flag_ira_algorithm;
  ptr->x_flag_ira_region = opts->x_flag_ira_region;
  ptr->x_flag_live_patching = opts->x_flag_live_patching;
  ptr->x_flag_reorder_blocks_algorithm = opts->x_flag_reorder_blocks_algorithm;
  ptr->x_flag_simd_cost_model = opts->x_flag_simd_cost_model;
  ptr->x_flag_stack_reuse = opts->x_flag_stack_reuse;
  ptr->x_flag_auto_var_init = opts->x_flag_auto_var_init;
  ptr->x_flag_vect_cost_model = opts->x_flag_vect_cost_model;
  ptr->x_optimize = opts->x_optimize;
  ptr->x_optimize_size = opts->x_optimize_size;
  ptr->x_optimize_debug = opts->x_optimize_debug;
  ptr->x_optimize_fast = opts->x_optimize_fast;
  ptr->x_warn_inline = opts->x_warn_inline;
  ptr->x_flag_aggressive_loop_optimizations = opts->x_flag_aggressive_loop_optimizations;
  ptr->x_flag_align_functions = opts->x_flag_align_functions;
  ptr->x_flag_align_jumps = opts->x_flag_align_jumps;
  ptr->x_flag_align_labels = opts->x_flag_align_labels;
  ptr->x_flag_align_loops = opts->x_flag_align_loops;
  ptr->x_flag_allocation_dce = opts->x_flag_allocation_dce;
  ptr->x_flag_store_data_races = opts->x_flag_store_data_races;
  ptr->x_flag_associative_math = opts->x_flag_associative_math;
  ptr->x_flag_asynchronous_unwind_tables = opts->x_flag_asynchronous_unwind_tables;
  ptr->x_flag_auto_inc_dec = opts->x_flag_auto_inc_dec;
  ptr->x_flag_bit_tests = opts->x_flag_bit_tests;
  ptr->x_flag_branch_on_count_reg = opts->x_flag_branch_on_count_reg;
  ptr->x_flag_branch_probabilities = opts->x_flag_branch_probabilities;
  ptr->x_flag_caller_saves = opts->x_flag_caller_saves;
  ptr->x_flag_code_hoisting = opts->x_flag_code_hoisting;
  ptr->x_flag_combine_stack_adjustments = opts->x_flag_combine_stack_adjustments;
  ptr->x_flag_compare_elim_after_reload = opts->x_flag_compare_elim_after_reload;
  ptr->x_flag_conserve_stack = opts->x_flag_conserve_stack;
  ptr->x_flag_cprop_registers = opts->x_flag_cprop_registers;
  ptr->x_flag_crossjumping = opts->x_flag_crossjumping;
  ptr->x_flag_cse_follow_jumps = opts->x_flag_cse_follow_jumps;
  ptr->x_flag_cx_fortran_rules = opts->x_flag_cx_fortran_rules;
  ptr->x_flag_cx_limited_range = opts->x_flag_cx_limited_range;
  ptr->x_flag_dce = opts->x_flag_dce;
  ptr->x_flag_defer_pop = opts->x_flag_defer_pop;
  ptr->x_flag_delayed_branch = opts->x_flag_delayed_branch;
  ptr->x_flag_delete_dead_exceptions = opts->x_flag_delete_dead_exceptions;
  ptr->x_flag_delete_null_pointer_checks = opts->x_flag_delete_null_pointer_checks;
  ptr->x_flag_devirtualize = opts->x_flag_devirtualize;
  ptr->x_flag_devirtualize_speculatively = opts->x_flag_devirtualize_speculatively;
  ptr->x_flag_dse = opts->x_flag_dse;
  ptr->x_flag_early_inlining = opts->x_flag_early_inlining;
  ptr->x_flag_exceptions = opts->x_flag_exceptions;
  ptr->x_flag_expensive_optimizations = opts->x_flag_expensive_optimizations;
  ptr->x_flag_finite_loops = opts->x_flag_finite_loops;
  ptr->x_flag_finite_math_only = opts->x_flag_finite_math_only;
  ptr->x_flag_float_store = opts->x_flag_float_store;
  ptr->x_flag_fold_simple_inlines = opts->x_flag_fold_simple_inlines;
  ptr->x_flag_forward_propagate = opts->x_flag_forward_propagate;
  ptr->x_flag_fp_int_builtin_inexact = opts->x_flag_fp_int_builtin_inexact;
  ptr->x_flag_no_function_cse = opts->x_flag_no_function_cse;
  ptr->x_flag_gcse = opts->x_flag_gcse;
  ptr->x_flag_gcse_after_reload = opts->x_flag_gcse_after_reload;
  ptr->x_flag_gcse_las = opts->x_flag_gcse_las;
  ptr->x_flag_gcse_lm = opts->x_flag_gcse_lm;
  ptr->x_flag_gcse_sm = opts->x_flag_gcse_sm;
  ptr->x_flag_graphite = opts->x_flag_graphite;
  ptr->x_flag_graphite_identity = opts->x_flag_graphite_identity;
  ptr->x_flag_guess_branch_prob = opts->x_flag_guess_branch_prob;
  ptr->x_flag_harden_compares = opts->x_flag_harden_compares;
  ptr->x_flag_harden_conditional_branches = opts->x_flag_harden_conditional_branches;
  ptr->x_flag_hoist_adjacent_loads = opts->x_flag_hoist_adjacent_loads;
  ptr->x_flag_if_conversion = opts->x_flag_if_conversion;
  ptr->x_flag_if_conversion2 = opts->x_flag_if_conversion2;
  ptr->x_flag_indirect_inlining = opts->x_flag_indirect_inlining;
  ptr->x_flag_no_inline = opts->x_flag_no_inline;
  ptr->x_flag_inline_atomics = opts->x_flag_inline_atomics;
  ptr->x_flag_inline_functions = opts->x_flag_inline_functions;
  ptr->x_flag_inline_functions_called_once = opts->x_flag_inline_functions_called_once;
  ptr->x_flag_inline_small_functions = opts->x_flag_inline_small_functions;
  ptr->x_flag_ipa_bit_cp = opts->x_flag_ipa_bit_cp;
  ptr->x_flag_ipa_cp = opts->x_flag_ipa_cp;
  ptr->x_flag_ipa_cp_clone = opts->x_flag_ipa_cp_clone;
  ptr->x_flag_ipa_icf = opts->x_flag_ipa_icf;
  ptr->x_flag_ipa_icf_functions = opts->x_flag_ipa_icf_functions;
  ptr->x_flag_ipa_icf_variables = opts->x_flag_ipa_icf_variables;
  ptr->x_flag_ipa_modref = opts->x_flag_ipa_modref;
  ptr->x_flag_ipa_profile = opts->x_flag_ipa_profile;
  ptr->x_flag_ipa_pta = opts->x_flag_ipa_pta;
  ptr->x_flag_ipa_pure_const = opts->x_flag_ipa_pure_const;
  ptr->x_flag_ipa_ra = opts->x_flag_ipa_ra;
  ptr->x_flag_ipa_reference = opts->x_flag_ipa_reference;
  ptr->x_flag_ipa_reference_addressable = opts->x_flag_ipa_reference_addressable;
  ptr->x_flag_ipa_sra = opts->x_flag_ipa_sra;
  ptr->x_flag_ipa_stack_alignment = opts->x_flag_ipa_stack_alignment;
  ptr->x_flag_ipa_strict_aliasing = opts->x_flag_ipa_strict_aliasing;
  ptr->x_flag_ipa_vrp = opts->x_flag_ipa_vrp;
  ptr->x_flag_ira_hoist_pressure = opts->x_flag_ira_hoist_pressure;
  ptr->x_flag_ira_loop_pressure = opts->x_flag_ira_loop_pressure;
  ptr->x_flag_ira_share_save_slots = opts->x_flag_ira_share_save_slots;
  ptr->x_flag_ira_share_spill_slots = opts->x_flag_ira_share_spill_slots;
  ptr->x_flag_isolate_erroneous_paths_attribute = opts->x_flag_isolate_erroneous_paths_attribute;
  ptr->x_flag_isolate_erroneous_paths_dereference = opts->x_flag_isolate_erroneous_paths_dereference;
  ptr->x_flag_ivopts = opts->x_flag_ivopts;
  ptr->x_flag_jump_tables = opts->x_flag_jump_tables;
  ptr->x_flag_keep_gc_roots_live = opts->x_flag_keep_gc_roots_live;
  ptr->x_flag_lifetime_dse = opts->x_flag_lifetime_dse;
  ptr->x_flag_limit_function_alignment = opts->x_flag_limit_function_alignment;
  ptr->x_flag_live_range_shrinkage = opts->x_flag_live_range_shrinkage;
  ptr->x_flag_loop_interchange = opts->x_flag_loop_interchange;
  ptr->x_flag_loop_nest_optimize = opts->x_flag_loop_nest_optimize;
  ptr->x_flag_loop_parallelize_all = opts->x_flag_loop_parallelize_all;
  ptr->x_flag_unroll_jam = opts->x_flag_unroll_jam;
  ptr->x_flag_lra_remat = opts->x_flag_lra_remat;
  ptr->x_flag_errno_math = opts->x_flag_errno_math;
  ptr->x_flag_modulo_sched = opts->x_flag_modulo_sched;
  ptr->x_flag_modulo_sched_allow_regmoves = opts->x_flag_modulo_sched_allow_regmoves;
  ptr->x_flag_move_loop_invariants = opts->x_flag_move_loop_invariants;
  ptr->x_flag_move_loop_stores = opts->x_flag_move_loop_stores;
  ptr->x_flag_non_call_exceptions = opts->x_flag_non_call_exceptions;
  ptr->x_flag_nothrow_opt = opts->x_flag_nothrow_opt;
  ptr->x_flag_omit_frame_pointer = opts->x_flag_omit_frame_pointer;
  ptr->x_flag_opt_info = opts->x_flag_opt_info;
  ptr->x_flag_optimize_sibling_calls = opts->x_flag_optimize_sibling_calls;
  ptr->x_flag_optimize_strlen = opts->x_flag_optimize_strlen;
  ptr->x_flag_pack_struct = opts->x_flag_pack_struct;
  ptr->x_flag_partial_inlining = opts->x_flag_partial_inlining;
  ptr->x_flag_peel_loops = opts->x_flag_peel_loops;
  ptr->x_flag_no_peephole = opts->x_flag_no_peephole;
  ptr->x_flag_peephole2 = opts->x_flag_peephole2;
  ptr->x_flag_plt = opts->x_flag_plt;
  ptr->x_flag_predictive_commoning = opts->x_flag_predictive_commoning;
  ptr->x_flag_prefetch_loop_arrays = opts->x_flag_prefetch_loop_arrays;
  ptr->x_flag_printf_return_value = opts->x_flag_printf_return_value;
  ptr->x_flag_profile_partial_training = opts->x_flag_profile_partial_training;
  ptr->x_flag_profile_reorder_functions = opts->x_flag_profile_reorder_functions;
  ptr->x_flag_reciprocal_math = opts->x_flag_reciprocal_math;
  ptr->x_flag_ree = opts->x_flag_ree;
  ptr->x_flag_pcc_struct_return = opts->x_flag_pcc_struct_return;
  ptr->x_flag_rename_registers = opts->x_flag_rename_registers;
  ptr->x_flag_reorder_blocks = opts->x_flag_reorder_blocks;
  ptr->x_flag_reorder_blocks_and_partition = opts->x_flag_reorder_blocks_and_partition;
  ptr->x_flag_reorder_functions = opts->x_flag_reorder_functions;
  ptr->x_flag_rerun_cse_after_loop = opts->x_flag_rerun_cse_after_loop;
  ptr->x_flag_resched_modulo_sched = opts->x_flag_resched_modulo_sched;
  ptr->x_flag_rounding_math = opts->x_flag_rounding_math;
  ptr->x_flag_rtti = opts->x_flag_rtti;
  ptr->x_flag_save_optimization_record = opts->x_flag_save_optimization_record;
  ptr->x_flag_sched_critical_path_heuristic = opts->x_flag_sched_critical_path_heuristic;
  ptr->x_flag_sched_dep_count_heuristic = opts->x_flag_sched_dep_count_heuristic;
  ptr->x_flag_sched_group_heuristic = opts->x_flag_sched_group_heuristic;
  ptr->x_flag_schedule_interblock = opts->x_flag_schedule_interblock;
  ptr->x_flag_sched_last_insn_heuristic = opts->x_flag_sched_last_insn_heuristic;
  ptr->x_flag_sched_pressure = opts->x_flag_sched_pressure;
  ptr->x_flag_sched_rank_heuristic = opts->x_flag_sched_rank_heuristic;
  ptr->x_flag_schedule_speculative = opts->x_flag_schedule_speculative;
  ptr->x_flag_sched_spec_insn_heuristic = opts->x_flag_sched_spec_insn_heuristic;
  ptr->x_flag_schedule_speculative_load = opts->x_flag_schedule_speculative_load;
  ptr->x_flag_schedule_speculative_load_dangerous = opts->x_flag_schedule_speculative_load_dangerous;
  ptr->x_flag_sched2_use_superblocks = opts->x_flag_sched2_use_superblocks;
  ptr->x_flag_schedule_fusion = opts->x_flag_schedule_fusion;
  ptr->x_flag_schedule_insns = opts->x_flag_schedule_insns;
  ptr->x_flag_schedule_insns_after_reload = opts->x_flag_schedule_insns_after_reload;
  ptr->x_flag_section_anchors = opts->x_flag_section_anchors;
  ptr->x_flag_sel_sched_pipelining = opts->x_flag_sel_sched_pipelining;
  ptr->x_flag_sel_sched_pipelining_outer_loops = opts->x_flag_sel_sched_pipelining_outer_loops;
  ptr->x_flag_sel_sched_reschedule_pipelined = opts->x_flag_sel_sched_reschedule_pipelined;
  ptr->x_flag_selective_scheduling = opts->x_flag_selective_scheduling;
  ptr->x_flag_selective_scheduling2 = opts->x_flag_selective_scheduling2;
  ptr->x_flag_semantic_interposition = opts->x_flag_semantic_interposition;
  ptr->x_flag_short_enums = opts->x_flag_short_enums;
  ptr->x_flag_short_wchar = opts->x_flag_short_wchar;
  ptr->x_flag_shrink_wrap = opts->x_flag_shrink_wrap;
  ptr->x_flag_shrink_wrap_separate = opts->x_flag_shrink_wrap_separate;
  ptr->x_flag_signaling_nans = opts->x_flag_signaling_nans;
  ptr->x_flag_signed_zeros = opts->x_flag_signed_zeros;
  ptr->x_flag_single_precision_constant = opts->x_flag_single_precision_constant;
  ptr->x_flag_split_ivs_in_unroller = opts->x_flag_split_ivs_in_unroller;
  ptr->x_flag_split_loops = opts->x_flag_split_loops;
  ptr->x_flag_split_paths = opts->x_flag_split_paths;
  ptr->x_flag_split_wide_types = opts->x_flag_split_wide_types;
  ptr->x_flag_split_wide_types_early = opts->x_flag_split_wide_types_early;
  ptr->x_flag_ssa_backprop = opts->x_flag_ssa_backprop;
  ptr->x_flag_ssa_phiopt = opts->x_flag_ssa_phiopt;
  ptr->x_flag_stack_clash_protection = opts->x_flag_stack_clash_protection;
  ptr->x_flag_stack_protect = opts->x_flag_stack_protect;
  ptr->x_flag_stdarg_opt = opts->x_flag_stdarg_opt;
  ptr->x_flag_store_merging = opts->x_flag_store_merging;
  ptr->x_flag_strict_aliasing = opts->x_flag_strict_aliasing;
  ptr->x_flag_strict_enums = opts->x_flag_strict_enums;
  ptr->x_flag_strict_volatile_bitfields = opts->x_flag_strict_volatile_bitfields;
  ptr->x_flag_thread_jumps = opts->x_flag_thread_jumps;
  ptr->x_flag_threadsafe_statics = opts->x_flag_threadsafe_statics;
  ptr->x_flag_toplevel_reorder = opts->x_flag_toplevel_reorder;
  ptr->x_flag_tracer = opts->x_flag_tracer;
  ptr->x_flag_trapping_math = opts->x_flag_trapping_math;
  ptr->x_flag_trapv = opts->x_flag_trapv;
  ptr->x_flag_tree_bit_ccp = opts->x_flag_tree_bit_ccp;
  ptr->x_flag_tree_builtin_call_dce = opts->x_flag_tree_builtin_call_dce;
  ptr->x_flag_tree_ccp = opts->x_flag_tree_ccp;
  ptr->x_flag_tree_ch = opts->x_flag_tree_ch;
  ptr->x_flag_tree_coalesce_vars = opts->x_flag_tree_coalesce_vars;
  ptr->x_flag_tree_copy_prop = opts->x_flag_tree_copy_prop;
  ptr->x_flag_tree_cselim = opts->x_flag_tree_cselim;
  ptr->x_flag_tree_dce = opts->x_flag_tree_dce;
  ptr->x_flag_tree_dom = opts->x_flag_tree_dom;
  ptr->x_flag_tree_dse = opts->x_flag_tree_dse;
  ptr->x_flag_tree_forwprop = opts->x_flag_tree_forwprop;
  ptr->x_flag_tree_fre = opts->x_flag_tree_fre;
  ptr->x_flag_tree_loop_distribute_patterns = opts->x_flag_tree_loop_distribute_patterns;
  ptr->x_flag_tree_loop_distribution = opts->x_flag_tree_loop_distribution;
  ptr->x_flag_tree_loop_if_convert = opts->x_flag_tree_loop_if_convert;
  ptr->x_flag_tree_loop_im = opts->x_flag_tree_loop_im;
  ptr->x_flag_tree_loop_ivcanon = opts->x_flag_tree_loop_ivcanon;
  ptr->x_flag_tree_loop_optimize = opts->x_flag_tree_loop_optimize;
  ptr->x_flag_tree_loop_vectorize = opts->x_flag_tree_loop_vectorize;
  ptr->x_flag_tree_live_range_split = opts->x_flag_tree_live_range_split;
  ptr->x_flag_tree_partial_pre = opts->x_flag_tree_partial_pre;
  ptr->x_flag_tree_phiprop = opts->x_flag_tree_phiprop;
  ptr->x_flag_tree_pre = opts->x_flag_tree_pre;
  ptr->x_flag_tree_pta = opts->x_flag_tree_pta;
  ptr->x_flag_tree_reassoc = opts->x_flag_tree_reassoc;
  ptr->x_flag_tree_scev_cprop = opts->x_flag_tree_scev_cprop;
  ptr->x_flag_tree_sink = opts->x_flag_tree_sink;
  ptr->x_flag_tree_slp_vectorize = opts->x_flag_tree_slp_vectorize;
  ptr->x_flag_tree_slsr = opts->x_flag_tree_slsr;
  ptr->x_flag_tree_sra = opts->x_flag_tree_sra;
  ptr->x_flag_tree_switch_conversion = opts->x_flag_tree_switch_conversion;
  ptr->x_flag_tree_tail_merge = opts->x_flag_tree_tail_merge;
  ptr->x_flag_tree_ter = opts->x_flag_tree_ter;
  ptr->x_flag_tree_vectorize = opts->x_flag_tree_vectorize;
  ptr->x_flag_tree_vrp = opts->x_flag_tree_vrp;
  ptr->x_flag_unconstrained_commons = opts->x_flag_unconstrained_commons;
  ptr->x_flag_unroll_all_loops = opts->x_flag_unroll_all_loops;
  ptr->x_flag_cunroll_grow_size = opts->x_flag_cunroll_grow_size;
  ptr->x_flag_unroll_loops = opts->x_flag_unroll_loops;
  ptr->x_flag_unsafe_math_optimizations = opts->x_flag_unsafe_math_optimizations;
  ptr->x_flag_unswitch_loops = opts->x_flag_unswitch_loops;
  ptr->x_flag_unwind_tables = opts->x_flag_unwind_tables;
  ptr->x_flag_var_tracking = opts->x_flag_var_tracking;
  ptr->x_flag_var_tracking_assignments = opts->x_flag_var_tracking_assignments;
  ptr->x_flag_var_tracking_assignments_toggle = opts->x_flag_var_tracking_assignments_toggle;
  ptr->x_flag_var_tracking_uninit = opts->x_flag_var_tracking_uninit;
  ptr->x_flag_variable_expansion_in_unroller = opts->x_flag_variable_expansion_in_unroller;
  ptr->x_flag_version_loops_for_strides = opts->x_flag_version_loops_for_strides;
  ptr->x_flag_value_profile_transformations = opts->x_flag_value_profile_transformations;
  ptr->x_flag_web = opts->x_flag_web;
  ptr->x_flag_wrapv = opts->x_flag_wrapv;
  ptr->x_flag_wrapv_pointer = opts->x_flag_wrapv_pointer;
  ptr->x_debug_nonbind_markers_p = opts->x_debug_nonbind_markers_p;
  ptr->x_str_align_functions = opts->x_str_align_functions;
  ptr->x_str_align_jumps = opts->x_str_align_jumps;
  ptr->x_str_align_labels = opts->x_str_align_labels;
  ptr->x_str_align_loops = opts->x_str_align_loops;
  ptr->x_flag_patchable_function_entry = opts->x_flag_patchable_function_entry;

  unsigned HOST_WIDE_INT mask = 0;
  if (opts_set->x_param_align_loop_iterations) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_param_align_threshold) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_param_asan_protect_allocas) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_param_asan_instrument_reads) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_param_asan_instrument_writes) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_param_asan_instrumentation_with_call_threshold) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_param_asan_memintrin) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_param_asan_stack) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_param_asan_use_after_return) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_param_avg_loop_niter) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_param_avoid_fma_max_bits) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_param_builtin_expect_probability) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_param_builtin_string_cmp_inline_length) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_param_case_values_threshold) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_param_comdat_sharing_probability) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_param_construct_interfere_size) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_param_destruct_interfere_size) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_param_dse_max_alias_queries_per_store) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_param_dse_max_object_size) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_param_early_inlining_insns) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_param_evrp_sparse_threshold) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_param_evrp_switch_limit) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_param_fsm_scale_path_blocks) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_param_fsm_scale_path_stmts) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_param_gcse_after_reload_critical_fraction) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_param_gcse_after_reload_partial_fraction) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_param_gcse_cost_distance_ratio) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_param_gcse_unrestricted_cost) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_param_graphite_max_arrays_per_scop) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_param_graphite_max_nb_scop_params) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_param_hwasan_instrument_allocas) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_param_hwasan_instrument_mem_intrinsics) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_param_hwasan_instrument_reads) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_param_hwasan_instrument_stack) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_param_hwasan_instrument_writes) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_param_hwasan_random_frame_tag) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_param_inline_heuristics_hint_percent) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_param_inline_min_speedup) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_param_inline_unit_growth) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_param_ipa_cp_eval_threshold) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_param_ipa_cp_large_unit_insns) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_param_ipa_cp_loop_hint_bonus) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_param_ipa_cp_max_recursive_depth) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_param_ipa_cp_min_recursive_probability) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_param_ipa_cp_profile_count_base) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_param_ipa_cp_recursion_penalty) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_param_ipa_cp_recursive_freq_factor) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_param_ipa_cp_single_call_penalty) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_param_ipa_cp_unit_growth) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_param_ipa_cp_value_list_size) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_param_ipa_jump_function_lookups) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_param_ipa_max_aa_steps) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_param_ipa_max_agg_items) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_param_ipa_max_loop_predicates) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_param_ipa_max_param_expr_ops) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_param_ipa_max_switch_predicate_bounds) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_param_ipa_sra_max_replacements) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_param_ipa_sra_ptr_growth_factor) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_param_ira_consider_dup_in_all_alts) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_param_ira_loop_reserved_regs) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_param_ira_max_conflict_table_size) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_param_ira_max_loops_num) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_param_iv_always_prune_cand_set_bound) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_param_iv_consider_all_candidates_bound) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[0] = mask;
  mask = 0;
  if (opts_set->x_param_iv_max_considered_uses) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_param_jump_table_max_growth_ratio_for_size) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_param_jump_table_max_growth_ratio_for_speed) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_param_l1_cache_line_size) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_param_l1_cache_size) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_param_l2_cache_size) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_param_large_function_growth) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_param_large_function_insns) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_param_stack_frame_growth) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_param_large_stack_frame) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_param_large_unit_insns) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_param_lim_expensive) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_param_loop_block_tile_size) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_param_loop_interchange_max_num_stmts) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_param_loop_interchange_stride_ratio) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_param_loop_invariant_max_bbs_in_loop) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_param_loop_max_datarefs_for_datadeps) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_param_loop_versioning_max_inner_insns) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_param_loop_versioning_max_outer_insns) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_param_lra_inheritance_ebb_probability_cutoff) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_param_lra_max_considered_reload_pseudos) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_param_max_average_unrolled_insns) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_param_max_combine_insns) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_param_max_unroll_iterations) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_param_max_completely_peel_times) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_param_max_completely_peeled_insns) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_param_max_crossjump_edges) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_param_max_cse_insns) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_param_max_cse_path_length) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_param_max_cselib_memory_locations) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_param_max_debug_marker_count) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_param_max_delay_slot_insn_search) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_param_max_delay_slot_live_search) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_param_max_dse_active_local_stores) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_param_early_inliner_max_iterations) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_param_max_find_base_term_values) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_param_max_fsm_thread_length) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_param_max_fsm_thread_path_insns) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_param_max_gcse_insertion_ratio) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_param_max_gcse_memory) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_param_max_goto_duplication_insns) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_param_max_grow_copy_bb_insns) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_param_max_hoist_depth) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_param_inline_functions_called_once_insns) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_param_inline_functions_called_once_loop_depth) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_param_max_inline_insns_auto) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_param_max_inline_insns_recursive_auto) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_param_max_inline_insns_recursive) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_param_max_inline_insns_single) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_param_max_inline_insns_size) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_param_max_inline_insns_small) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_param_max_inline_recursive_depth_auto) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_param_max_inline_recursive_depth) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_param_max_isl_operations) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_param_max_iterations_computation_cost) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_param_max_iterations_to_track) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_param_max_jump_thread_duplication_stmts) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_param_max_last_value_rtl) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_param_max_loop_header_insns) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_param_max_modulo_backtrack_attempts) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_param_max_partial_antic_length) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_param_max_peel_branches) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_param_max_peel_times) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_param_max_peeled_insns) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[1] = mask;
  mask = 0;
  if (opts_set->x_param_max_pending_list_length) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_param_max_pipeline_region_blocks) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_param_max_pipeline_region_insns) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_param_max_pow_sqrt_depth) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_param_max_predicted_iterations) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_param_max_reload_search_insns) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_param_max_rtl_if_conversion_insns) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_param_max_rtl_if_conversion_predictable_cost) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_param_max_rtl_if_conversion_unpredictable_cost) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_param_max_sched_extend_regions_iters) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_param_max_sched_insn_conflict_delay) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_param_max_sched_ready_insns) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_param_max_sched_region_blocks) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_param_max_sched_region_insns) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_param_max_slsr_candidate_scan) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_param_max_speculative_devirt_maydefs) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_param_max_stores_to_merge) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_param_max_stores_to_sink) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_param_max_tail_merge_comparisons) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_param_max_tail_merge_iterations) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_param_max_tracked_strlens) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_param_max_tree_if_conversion_phi_args) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_param_max_unroll_times) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_param_max_unrolled_insns) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_param_max_unswitch_insns) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_param_max_variable_expansions) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_param_max_vartrack_expr_depth) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_param_max_vartrack_reverse_op_size) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_param_max_vartrack_size) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_param_max_vrp_switch_assertions) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_param_min_crossjump_insns) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_param_min_inline_recursive_probability) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_param_min_insn_to_prefetch_ratio) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_param_min_loop_cond_split_prob) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_param_min_pagesize) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_param_min_size_for_stack_sharing) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_param_min_spec_prob) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_param_min_vect_loop_bound) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_param_modref_max_accesses) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_param_modref_max_adjustments) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_param_modref_max_bases) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_param_modref_max_depth) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_param_modref_max_escape_points) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_param_modref_max_refs) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_param_modref_max_tests) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_param_parloops_chunk_size) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_param_parloops_min_per_thread) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_param_parloops_schedule) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_param_partial_inlining_entry_probability) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_param_predictable_branch_outcome) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_param_prefetch_dynamic_strides) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_param_prefetch_latency) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_param_prefetch_min_insn_to_mem_ratio) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_param_prefetch_minimum_stride) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_param_ranger_logical_depth) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_param_relation_block_limit) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_param_rpo_vn_max_loop_depth) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_param_sccvn_max_alias_queries_per_access) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_param_scev_max_expr_complexity) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_param_scev_max_expr_size) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_param_sched_autopref_queue_depth) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_param_sched_mem_true_dep_cost) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_param_sched_pressure_algorithm) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_param_sched_spec_prob_cutoff) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[2] = mask;
  mask = 0;
  if (opts_set->x_param_sched_state_edge_prob_cutoff) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_param_selsched_insns_to_rename) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_param_selsched_max_lookahead) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_param_selsched_max_sched_times) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_param_simultaneous_prefetches) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_param_sink_frequency_threshold) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_param_sms_dfa_history) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_param_sms_loop_average_count_threshold) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_param_sms_max_ii_factor) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_param_sms_min_sc) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_param_sra_max_propagations) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_param_sra_max_scalarization_size_size) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_param_sra_max_scalarization_size_speed) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_param_ssa_name_def_chain_limit) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_param_ssp_buffer_size) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_param_stack_clash_protection_guard_size) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_param_stack_clash_protection_probe_interval) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_param_store_merging_allow_unaligned) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_param_store_merging_max_size) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_param_switch_conversion_branch_ratio) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_param_tm_max_aggregate_size) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_param_tracer_dynamic_coverage_feedback) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_param_tracer_dynamic_coverage) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_param_tracer_max_code_growth) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_param_tracer_min_branch_probability_feedback) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_param_tracer_min_branch_probability) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_param_tracer_min_branch_ratio) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_param_tree_reassoc_width) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_param_uninit_control_dep_attempts) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_param_uninlined_function_insns) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_param_uninlined_function_time) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_param_uninlined_function_thunk_insns) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_param_uninlined_function_thunk_time) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_param_unlikely_bb_count_fraction) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_param_unroll_jam_max_unroll) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_param_unroll_jam_min_percent) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_param_use_after_scope_direct_emission_threshold) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_param_vect_epilogues_nomask) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_param_vect_induction_float) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_param_vect_inner_loop_cost_factor) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_param_vect_max_peeling_for_alignment) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_param_vect_max_version_for_alias_checks) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_param_vect_max_version_for_alignment_checks) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_param_vect_partial_vector_usage) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_flag_sched_stalled_insns) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_flag_sched_stalled_insns_dep) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_flag_tree_parallelize_loops) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_param_evrp_mode) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_param_ranger_debug) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_param_threader_debug) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_param_vrp1_mode) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_param_vrp2_mode) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_flag_excess_precision) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_flag_fp_contract_mode) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_flag_ira_algorithm) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_flag_ira_region) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_flag_live_patching) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_flag_reorder_blocks_algorithm) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_flag_simd_cost_model) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_flag_stack_reuse) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_flag_auto_var_init) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_flag_vect_cost_model) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_optimize) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_optimize_size) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[3] = mask;
  mask = 0;
  if (opts_set->x_optimize_debug) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_optimize_fast) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_warn_inline) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_flag_aggressive_loop_optimizations) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_flag_align_functions) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_flag_align_jumps) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_flag_align_labels) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_flag_align_loops) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_flag_allocation_dce) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_flag_store_data_races) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_flag_associative_math) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_flag_asynchronous_unwind_tables) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_flag_auto_inc_dec) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_flag_bit_tests) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_flag_branch_on_count_reg) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_flag_branch_probabilities) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_flag_caller_saves) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_flag_code_hoisting) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_flag_combine_stack_adjustments) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_flag_compare_elim_after_reload) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_flag_conserve_stack) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_flag_cprop_registers) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_flag_crossjumping) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_flag_cse_follow_jumps) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_flag_cx_fortran_rules) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_flag_cx_limited_range) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_flag_dce) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_flag_defer_pop) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_flag_delayed_branch) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_flag_delete_dead_exceptions) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_flag_delete_null_pointer_checks) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_flag_devirtualize) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_flag_devirtualize_speculatively) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_flag_dse) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_flag_early_inlining) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_flag_exceptions) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_flag_expensive_optimizations) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_flag_finite_loops) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_flag_finite_math_only) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_flag_float_store) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_flag_fold_simple_inlines) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_flag_forward_propagate) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_flag_fp_int_builtin_inexact) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_flag_no_function_cse) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_flag_gcse) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_flag_gcse_after_reload) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_flag_gcse_las) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_flag_gcse_lm) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_flag_gcse_sm) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_flag_graphite) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_flag_graphite_identity) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_flag_guess_branch_prob) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_flag_harden_compares) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_flag_harden_conditional_branches) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_flag_hoist_adjacent_loads) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_flag_if_conversion) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_flag_if_conversion2) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_flag_indirect_inlining) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_flag_no_inline) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_flag_inline_atomics) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_flag_inline_functions) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_flag_inline_functions_called_once) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_flag_inline_small_functions) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_flag_ipa_bit_cp) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[4] = mask;
  mask = 0;
  if (opts_set->x_flag_ipa_cp) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_flag_ipa_cp_clone) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_flag_ipa_icf) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_flag_ipa_icf_functions) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_flag_ipa_icf_variables) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_flag_ipa_modref) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_flag_ipa_profile) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_flag_ipa_pta) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_flag_ipa_pure_const) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_flag_ipa_ra) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_flag_ipa_reference) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_flag_ipa_reference_addressable) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_flag_ipa_sra) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_flag_ipa_stack_alignment) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_flag_ipa_strict_aliasing) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_flag_ipa_vrp) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_flag_ira_hoist_pressure) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_flag_ira_loop_pressure) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_flag_ira_share_save_slots) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_flag_ira_share_spill_slots) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_flag_isolate_erroneous_paths_attribute) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_flag_isolate_erroneous_paths_dereference) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_flag_ivopts) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_flag_jump_tables) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_flag_keep_gc_roots_live) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_flag_lifetime_dse) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_flag_limit_function_alignment) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_flag_live_range_shrinkage) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_flag_loop_interchange) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_flag_loop_nest_optimize) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_flag_loop_parallelize_all) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_flag_unroll_jam) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_flag_lra_remat) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_flag_errno_math) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_flag_modulo_sched) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_flag_modulo_sched_allow_regmoves) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_flag_move_loop_invariants) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_flag_move_loop_stores) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_flag_non_call_exceptions) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_flag_nothrow_opt) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_flag_omit_frame_pointer) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_flag_opt_info) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_flag_optimize_sibling_calls) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_flag_optimize_strlen) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_flag_pack_struct) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_flag_partial_inlining) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_flag_peel_loops) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_flag_no_peephole) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_flag_peephole2) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_flag_plt) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_flag_predictive_commoning) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_flag_prefetch_loop_arrays) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_flag_printf_return_value) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_flag_profile_partial_training) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_flag_profile_reorder_functions) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_flag_reciprocal_math) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_flag_ree) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_flag_pcc_struct_return) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_flag_rename_registers) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_flag_reorder_blocks) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_flag_reorder_blocks_and_partition) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_flag_reorder_functions) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_flag_rerun_cse_after_loop) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_flag_resched_modulo_sched) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[5] = mask;
  mask = 0;
  if (opts_set->x_flag_rounding_math) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_flag_rtti) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_flag_save_optimization_record) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_flag_sched_critical_path_heuristic) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_flag_sched_dep_count_heuristic) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_flag_sched_group_heuristic) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_flag_schedule_interblock) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_flag_sched_last_insn_heuristic) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_flag_sched_pressure) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_flag_sched_rank_heuristic) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_flag_schedule_speculative) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_flag_sched_spec_insn_heuristic) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_flag_schedule_speculative_load) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_flag_schedule_speculative_load_dangerous) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_flag_sched2_use_superblocks) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_flag_schedule_fusion) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_flag_schedule_insns) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_flag_schedule_insns_after_reload) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_flag_section_anchors) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_flag_sel_sched_pipelining) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_flag_sel_sched_pipelining_outer_loops) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_flag_sel_sched_reschedule_pipelined) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_flag_selective_scheduling) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_flag_selective_scheduling2) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_flag_semantic_interposition) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_flag_short_enums) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_flag_short_wchar) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_flag_shrink_wrap) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_flag_shrink_wrap_separate) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_flag_signaling_nans) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_flag_signed_zeros) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_flag_single_precision_constant) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_flag_split_ivs_in_unroller) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_flag_split_loops) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_flag_split_paths) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_flag_split_wide_types) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_flag_split_wide_types_early) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_flag_ssa_backprop) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_flag_ssa_phiopt) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_flag_stack_clash_protection) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_flag_stack_protect) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_flag_stdarg_opt) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_flag_store_merging) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_flag_strict_aliasing) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_flag_strict_enums) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_flag_strict_volatile_bitfields) mask |= HOST_WIDE_INT_1U << 45;
  if (opts_set->x_flag_thread_jumps) mask |= HOST_WIDE_INT_1U << 46;
  if (opts_set->x_flag_threadsafe_statics) mask |= HOST_WIDE_INT_1U << 47;
  if (opts_set->x_flag_toplevel_reorder) mask |= HOST_WIDE_INT_1U << 48;
  if (opts_set->x_flag_tracer) mask |= HOST_WIDE_INT_1U << 49;
  if (opts_set->x_flag_trapping_math) mask |= HOST_WIDE_INT_1U << 50;
  if (opts_set->x_flag_trapv) mask |= HOST_WIDE_INT_1U << 51;
  if (opts_set->x_flag_tree_bit_ccp) mask |= HOST_WIDE_INT_1U << 52;
  if (opts_set->x_flag_tree_builtin_call_dce) mask |= HOST_WIDE_INT_1U << 53;
  if (opts_set->x_flag_tree_ccp) mask |= HOST_WIDE_INT_1U << 54;
  if (opts_set->x_flag_tree_ch) mask |= HOST_WIDE_INT_1U << 55;
  if (opts_set->x_flag_tree_coalesce_vars) mask |= HOST_WIDE_INT_1U << 56;
  if (opts_set->x_flag_tree_copy_prop) mask |= HOST_WIDE_INT_1U << 57;
  if (opts_set->x_flag_tree_cselim) mask |= HOST_WIDE_INT_1U << 58;
  if (opts_set->x_flag_tree_dce) mask |= HOST_WIDE_INT_1U << 59;
  if (opts_set->x_flag_tree_dom) mask |= HOST_WIDE_INT_1U << 60;
  if (opts_set->x_flag_tree_dse) mask |= HOST_WIDE_INT_1U << 61;
  if (opts_set->x_flag_tree_forwprop) mask |= HOST_WIDE_INT_1U << 62;
  if (opts_set->x_flag_tree_fre) mask |= HOST_WIDE_INT_1U << 63;
  ptr->explicit_mask[6] = mask;
  mask = 0;
  if (opts_set->x_flag_tree_loop_distribute_patterns) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_flag_tree_loop_distribution) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_flag_tree_loop_if_convert) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_flag_tree_loop_im) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_flag_tree_loop_ivcanon) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_flag_tree_loop_optimize) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_flag_tree_loop_vectorize) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_flag_tree_live_range_split) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_flag_tree_partial_pre) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_flag_tree_phiprop) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_flag_tree_pre) mask |= HOST_WIDE_INT_1U << 10;
  if (opts_set->x_flag_tree_pta) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_flag_tree_reassoc) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_flag_tree_scev_cprop) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_flag_tree_sink) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_flag_tree_slp_vectorize) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_flag_tree_slsr) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_flag_tree_sra) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_flag_tree_switch_conversion) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_flag_tree_tail_merge) mask |= HOST_WIDE_INT_1U << 19;
  if (opts_set->x_flag_tree_ter) mask |= HOST_WIDE_INT_1U << 20;
  if (opts_set->x_flag_tree_vectorize) mask |= HOST_WIDE_INT_1U << 21;
  if (opts_set->x_flag_tree_vrp) mask |= HOST_WIDE_INT_1U << 22;
  if (opts_set->x_flag_unconstrained_commons) mask |= HOST_WIDE_INT_1U << 23;
  if (opts_set->x_flag_unroll_all_loops) mask |= HOST_WIDE_INT_1U << 24;
  if (opts_set->x_flag_cunroll_grow_size) mask |= HOST_WIDE_INT_1U << 25;
  if (opts_set->x_flag_unroll_loops) mask |= HOST_WIDE_INT_1U << 26;
  if (opts_set->x_flag_unsafe_math_optimizations) mask |= HOST_WIDE_INT_1U << 27;
  if (opts_set->x_flag_unswitch_loops) mask |= HOST_WIDE_INT_1U << 28;
  if (opts_set->x_flag_unwind_tables) mask |= HOST_WIDE_INT_1U << 29;
  if (opts_set->x_flag_var_tracking) mask |= HOST_WIDE_INT_1U << 30;
  if (opts_set->x_flag_var_tracking_assignments) mask |= HOST_WIDE_INT_1U << 31;
  if (opts_set->x_flag_var_tracking_assignments_toggle) mask |= HOST_WIDE_INT_1U << 32;
  if (opts_set->x_flag_var_tracking_uninit) mask |= HOST_WIDE_INT_1U << 33;
  if (opts_set->x_flag_variable_expansion_in_unroller) mask |= HOST_WIDE_INT_1U << 34;
  if (opts_set->x_flag_version_loops_for_strides) mask |= HOST_WIDE_INT_1U << 35;
  if (opts_set->x_flag_value_profile_transformations) mask |= HOST_WIDE_INT_1U << 36;
  if (opts_set->x_flag_web) mask |= HOST_WIDE_INT_1U << 37;
  if (opts_set->x_flag_wrapv) mask |= HOST_WIDE_INT_1U << 38;
  if (opts_set->x_flag_wrapv_pointer) mask |= HOST_WIDE_INT_1U << 39;
  if (opts_set->x_debug_nonbind_markers_p) mask |= HOST_WIDE_INT_1U << 40;
  if (opts_set->x_str_align_functions) mask |= HOST_WIDE_INT_1U << 41;
  if (opts_set->x_str_align_jumps) mask |= HOST_WIDE_INT_1U << 42;
  if (opts_set->x_str_align_labels) mask |= HOST_WIDE_INT_1U << 43;
  if (opts_set->x_str_align_loops) mask |= HOST_WIDE_INT_1U << 44;
  if (opts_set->x_flag_patchable_function_entry) mask |= HOST_WIDE_INT_1U << 45;
  ptr->explicit_mask[7] = mask;
}

/* Restore optimization options from a structure.  */
void
cl_optimization_restore (struct gcc_options *opts, struct gcc_options *opts_set,
			 struct cl_optimization *ptr)
{
  opts->x_param_align_loop_iterations = ptr->x_param_align_loop_iterations;
  opts->x_param_align_threshold = ptr->x_param_align_threshold;
  opts->x_param_asan_protect_allocas = ptr->x_param_asan_protect_allocas;
  opts->x_param_asan_instrument_reads = ptr->x_param_asan_instrument_reads;
  opts->x_param_asan_instrument_writes = ptr->x_param_asan_instrument_writes;
  opts->x_param_asan_instrumentation_with_call_threshold = ptr->x_param_asan_instrumentation_with_call_threshold;
  opts->x_param_asan_memintrin = ptr->x_param_asan_memintrin;
  opts->x_param_asan_stack = ptr->x_param_asan_stack;
  opts->x_param_asan_use_after_return = ptr->x_param_asan_use_after_return;
  opts->x_param_avg_loop_niter = ptr->x_param_avg_loop_niter;
  opts->x_param_avoid_fma_max_bits = ptr->x_param_avoid_fma_max_bits;
  opts->x_param_builtin_expect_probability = ptr->x_param_builtin_expect_probability;
  opts->x_param_builtin_string_cmp_inline_length = ptr->x_param_builtin_string_cmp_inline_length;
  opts->x_param_case_values_threshold = ptr->x_param_case_values_threshold;
  opts->x_param_comdat_sharing_probability = ptr->x_param_comdat_sharing_probability;
  opts->x_param_construct_interfere_size = ptr->x_param_construct_interfere_size;
  opts->x_param_destruct_interfere_size = ptr->x_param_destruct_interfere_size;
  opts->x_param_dse_max_alias_queries_per_store = ptr->x_param_dse_max_alias_queries_per_store;
  opts->x_param_dse_max_object_size = ptr->x_param_dse_max_object_size;
  opts->x_param_early_inlining_insns = ptr->x_param_early_inlining_insns;
  opts->x_param_evrp_sparse_threshold = ptr->x_param_evrp_sparse_threshold;
  opts->x_param_evrp_switch_limit = ptr->x_param_evrp_switch_limit;
  opts->x_param_fsm_scale_path_blocks = ptr->x_param_fsm_scale_path_blocks;
  opts->x_param_fsm_scale_path_stmts = ptr->x_param_fsm_scale_path_stmts;
  opts->x_param_gcse_after_reload_critical_fraction = ptr->x_param_gcse_after_reload_critical_fraction;
  opts->x_param_gcse_after_reload_partial_fraction = ptr->x_param_gcse_after_reload_partial_fraction;
  opts->x_param_gcse_cost_distance_ratio = ptr->x_param_gcse_cost_distance_ratio;
  opts->x_param_gcse_unrestricted_cost = ptr->x_param_gcse_unrestricted_cost;
  opts->x_param_graphite_max_arrays_per_scop = ptr->x_param_graphite_max_arrays_per_scop;
  opts->x_param_graphite_max_nb_scop_params = ptr->x_param_graphite_max_nb_scop_params;
  opts->x_param_hwasan_instrument_allocas = ptr->x_param_hwasan_instrument_allocas;
  opts->x_param_hwasan_instrument_mem_intrinsics = ptr->x_param_hwasan_instrument_mem_intrinsics;
  opts->x_param_hwasan_instrument_reads = ptr->x_param_hwasan_instrument_reads;
  opts->x_param_hwasan_instrument_stack = ptr->x_param_hwasan_instrument_stack;
  opts->x_param_hwasan_instrument_writes = ptr->x_param_hwasan_instrument_writes;
  opts->x_param_hwasan_random_frame_tag = ptr->x_param_hwasan_random_frame_tag;
  opts->x_param_inline_heuristics_hint_percent = ptr->x_param_inline_heuristics_hint_percent;
  opts->x_param_inline_min_speedup = ptr->x_param_inline_min_speedup;
  opts->x_param_inline_unit_growth = ptr->x_param_inline_unit_growth;
  opts->x_param_ipa_cp_eval_threshold = ptr->x_param_ipa_cp_eval_threshold;
  opts->x_param_ipa_cp_large_unit_insns = ptr->x_param_ipa_cp_large_unit_insns;
  opts->x_param_ipa_cp_loop_hint_bonus = ptr->x_param_ipa_cp_loop_hint_bonus;
  opts->x_param_ipa_cp_max_recursive_depth = ptr->x_param_ipa_cp_max_recursive_depth;
  opts->x_param_ipa_cp_min_recursive_probability = ptr->x_param_ipa_cp_min_recursive_probability;
  opts->x_param_ipa_cp_profile_count_base = ptr->x_param_ipa_cp_profile_count_base;
  opts->x_param_ipa_cp_recursion_penalty = ptr->x_param_ipa_cp_recursion_penalty;
  opts->x_param_ipa_cp_recursive_freq_factor = ptr->x_param_ipa_cp_recursive_freq_factor;
  opts->x_param_ipa_cp_single_call_penalty = ptr->x_param_ipa_cp_single_call_penalty;
  opts->x_param_ipa_cp_unit_growth = ptr->x_param_ipa_cp_unit_growth;
  opts->x_param_ipa_cp_value_list_size = ptr->x_param_ipa_cp_value_list_size;
  opts->x_param_ipa_jump_function_lookups = ptr->x_param_ipa_jump_function_lookups;
  opts->x_param_ipa_max_aa_steps = ptr->x_param_ipa_max_aa_steps;
  opts->x_param_ipa_max_agg_items = ptr->x_param_ipa_max_agg_items;
  opts->x_param_ipa_max_loop_predicates = ptr->x_param_ipa_max_loop_predicates;
  opts->x_param_ipa_max_param_expr_ops = ptr->x_param_ipa_max_param_expr_ops;
  opts->x_param_ipa_max_switch_predicate_bounds = ptr->x_param_ipa_max_switch_predicate_bounds;
  opts->x_param_ipa_sra_max_replacements = ptr->x_param_ipa_sra_max_replacements;
  opts->x_param_ipa_sra_ptr_growth_factor = ptr->x_param_ipa_sra_ptr_growth_factor;
  opts->x_param_ira_consider_dup_in_all_alts = ptr->x_param_ira_consider_dup_in_all_alts;
  opts->x_param_ira_loop_reserved_regs = ptr->x_param_ira_loop_reserved_regs;
  opts->x_param_ira_max_conflict_table_size = ptr->x_param_ira_max_conflict_table_size;
  opts->x_param_ira_max_loops_num = ptr->x_param_ira_max_loops_num;
  opts->x_param_iv_always_prune_cand_set_bound = ptr->x_param_iv_always_prune_cand_set_bound;
  opts->x_param_iv_consider_all_candidates_bound = ptr->x_param_iv_consider_all_candidates_bound;
  opts->x_param_iv_max_considered_uses = ptr->x_param_iv_max_considered_uses;
  opts->x_param_jump_table_max_growth_ratio_for_size = ptr->x_param_jump_table_max_growth_ratio_for_size;
  opts->x_param_jump_table_max_growth_ratio_for_speed = ptr->x_param_jump_table_max_growth_ratio_for_speed;
  opts->x_param_l1_cache_line_size = ptr->x_param_l1_cache_line_size;
  opts->x_param_l1_cache_size = ptr->x_param_l1_cache_size;
  opts->x_param_l2_cache_size = ptr->x_param_l2_cache_size;
  opts->x_param_large_function_growth = ptr->x_param_large_function_growth;
  opts->x_param_large_function_insns = ptr->x_param_large_function_insns;
  opts->x_param_stack_frame_growth = ptr->x_param_stack_frame_growth;
  opts->x_param_large_stack_frame = ptr->x_param_large_stack_frame;
  opts->x_param_large_unit_insns = ptr->x_param_large_unit_insns;
  opts->x_param_lim_expensive = ptr->x_param_lim_expensive;
  opts->x_param_loop_block_tile_size = ptr->x_param_loop_block_tile_size;
  opts->x_param_loop_interchange_max_num_stmts = ptr->x_param_loop_interchange_max_num_stmts;
  opts->x_param_loop_interchange_stride_ratio = ptr->x_param_loop_interchange_stride_ratio;
  opts->x_param_loop_invariant_max_bbs_in_loop = ptr->x_param_loop_invariant_max_bbs_in_loop;
  opts->x_param_loop_max_datarefs_for_datadeps = ptr->x_param_loop_max_datarefs_for_datadeps;
  opts->x_param_loop_versioning_max_inner_insns = ptr->x_param_loop_versioning_max_inner_insns;
  opts->x_param_loop_versioning_max_outer_insns = ptr->x_param_loop_versioning_max_outer_insns;
  opts->x_param_lra_inheritance_ebb_probability_cutoff = ptr->x_param_lra_inheritance_ebb_probability_cutoff;
  opts->x_param_lra_max_considered_reload_pseudos = ptr->x_param_lra_max_considered_reload_pseudos;
  opts->x_param_max_average_unrolled_insns = ptr->x_param_max_average_unrolled_insns;
  opts->x_param_max_combine_insns = ptr->x_param_max_combine_insns;
  opts->x_param_max_unroll_iterations = ptr->x_param_max_unroll_iterations;
  opts->x_param_max_completely_peel_times = ptr->x_param_max_completely_peel_times;
  opts->x_param_max_completely_peeled_insns = ptr->x_param_max_completely_peeled_insns;
  opts->x_param_max_crossjump_edges = ptr->x_param_max_crossjump_edges;
  opts->x_param_max_cse_insns = ptr->x_param_max_cse_insns;
  opts->x_param_max_cse_path_length = ptr->x_param_max_cse_path_length;
  opts->x_param_max_cselib_memory_locations = ptr->x_param_max_cselib_memory_locations;
  opts->x_param_max_debug_marker_count = ptr->x_param_max_debug_marker_count;
  opts->x_param_max_delay_slot_insn_search = ptr->x_param_max_delay_slot_insn_search;
  opts->x_param_max_delay_slot_live_search = ptr->x_param_max_delay_slot_live_search;
  opts->x_param_max_dse_active_local_stores = ptr->x_param_max_dse_active_local_stores;
  opts->x_param_early_inliner_max_iterations = ptr->x_param_early_inliner_max_iterations;
  opts->x_param_max_find_base_term_values = ptr->x_param_max_find_base_term_values;
  opts->x_param_max_fsm_thread_length = ptr->x_param_max_fsm_thread_length;
  opts->x_param_max_fsm_thread_path_insns = ptr->x_param_max_fsm_thread_path_insns;
  opts->x_param_max_gcse_insertion_ratio = ptr->x_param_max_gcse_insertion_ratio;
  opts->x_param_max_gcse_memory = ptr->x_param_max_gcse_memory;
  opts->x_param_max_goto_duplication_insns = ptr->x_param_max_goto_duplication_insns;
  opts->x_param_max_grow_copy_bb_insns = ptr->x_param_max_grow_copy_bb_insns;
  opts->x_param_max_hoist_depth = ptr->x_param_max_hoist_depth;
  opts->x_param_inline_functions_called_once_insns = ptr->x_param_inline_functions_called_once_insns;
  opts->x_param_inline_functions_called_once_loop_depth = ptr->x_param_inline_functions_called_once_loop_depth;
  opts->x_param_max_inline_insns_auto = ptr->x_param_max_inline_insns_auto;
  opts->x_param_max_inline_insns_recursive_auto = ptr->x_param_max_inline_insns_recursive_auto;
  opts->x_param_max_inline_insns_recursive = ptr->x_param_max_inline_insns_recursive;
  opts->x_param_max_inline_insns_single = ptr->x_param_max_inline_insns_single;
  opts->x_param_max_inline_insns_size = ptr->x_param_max_inline_insns_size;
  opts->x_param_max_inline_insns_small = ptr->x_param_max_inline_insns_small;
  opts->x_param_max_inline_recursive_depth_auto = ptr->x_param_max_inline_recursive_depth_auto;
  opts->x_param_max_inline_recursive_depth = ptr->x_param_max_inline_recursive_depth;
  opts->x_param_max_isl_operations = ptr->x_param_max_isl_operations;
  opts->x_param_max_iterations_computation_cost = ptr->x_param_max_iterations_computation_cost;
  opts->x_param_max_iterations_to_track = ptr->x_param_max_iterations_to_track;
  opts->x_param_max_jump_thread_duplication_stmts = ptr->x_param_max_jump_thread_duplication_stmts;
  opts->x_param_max_last_value_rtl = ptr->x_param_max_last_value_rtl;
  opts->x_param_max_loop_header_insns = ptr->x_param_max_loop_header_insns;
  opts->x_param_max_modulo_backtrack_attempts = ptr->x_param_max_modulo_backtrack_attempts;
  opts->x_param_max_partial_antic_length = ptr->x_param_max_partial_antic_length;
  opts->x_param_max_peel_branches = ptr->x_param_max_peel_branches;
  opts->x_param_max_peel_times = ptr->x_param_max_peel_times;
  opts->x_param_max_peeled_insns = ptr->x_param_max_peeled_insns;
  opts->x_param_max_pending_list_length = ptr->x_param_max_pending_list_length;
  opts->x_param_max_pipeline_region_blocks = ptr->x_param_max_pipeline_region_blocks;
  opts->x_param_max_pipeline_region_insns = ptr->x_param_max_pipeline_region_insns;
  opts->x_param_max_pow_sqrt_depth = ptr->x_param_max_pow_sqrt_depth;
  opts->x_param_max_predicted_iterations = ptr->x_param_max_predicted_iterations;
  opts->x_param_max_reload_search_insns = ptr->x_param_max_reload_search_insns;
  opts->x_param_max_rtl_if_conversion_insns = ptr->x_param_max_rtl_if_conversion_insns;
  opts->x_param_max_rtl_if_conversion_predictable_cost = ptr->x_param_max_rtl_if_conversion_predictable_cost;
  opts->x_param_max_rtl_if_conversion_unpredictable_cost = ptr->x_param_max_rtl_if_conversion_unpredictable_cost;
  opts->x_param_max_sched_extend_regions_iters = ptr->x_param_max_sched_extend_regions_iters;
  opts->x_param_max_sched_insn_conflict_delay = ptr->x_param_max_sched_insn_conflict_delay;
  opts->x_param_max_sched_ready_insns = ptr->x_param_max_sched_ready_insns;
  opts->x_param_max_sched_region_blocks = ptr->x_param_max_sched_region_blocks;
  opts->x_param_max_sched_region_insns = ptr->x_param_max_sched_region_insns;
  opts->x_param_max_slsr_candidate_scan = ptr->x_param_max_slsr_candidate_scan;
  opts->x_param_max_speculative_devirt_maydefs = ptr->x_param_max_speculative_devirt_maydefs;
  opts->x_param_max_stores_to_merge = ptr->x_param_max_stores_to_merge;
  opts->x_param_max_stores_to_sink = ptr->x_param_max_stores_to_sink;
  opts->x_param_max_tail_merge_comparisons = ptr->x_param_max_tail_merge_comparisons;
  opts->x_param_max_tail_merge_iterations = ptr->x_param_max_tail_merge_iterations;
  opts->x_param_max_tracked_strlens = ptr->x_param_max_tracked_strlens;
  opts->x_param_max_tree_if_conversion_phi_args = ptr->x_param_max_tree_if_conversion_phi_args;
  opts->x_param_max_unroll_times = ptr->x_param_max_unroll_times;
  opts->x_param_max_unrolled_insns = ptr->x_param_max_unrolled_insns;
  opts->x_param_max_unswitch_insns = ptr->x_param_max_unswitch_insns;
  opts->x_param_max_variable_expansions = ptr->x_param_max_variable_expansions;
  opts->x_param_max_vartrack_expr_depth = ptr->x_param_max_vartrack_expr_depth;
  opts->x_param_max_vartrack_reverse_op_size = ptr->x_param_max_vartrack_reverse_op_size;
  opts->x_param_max_vartrack_size = ptr->x_param_max_vartrack_size;
  opts->x_param_max_vrp_switch_assertions = ptr->x_param_max_vrp_switch_assertions;
  opts->x_param_min_crossjump_insns = ptr->x_param_min_crossjump_insns;
  opts->x_param_min_inline_recursive_probability = ptr->x_param_min_inline_recursive_probability;
  opts->x_param_min_insn_to_prefetch_ratio = ptr->x_param_min_insn_to_prefetch_ratio;
  opts->x_param_min_loop_cond_split_prob = ptr->x_param_min_loop_cond_split_prob;
  opts->x_param_min_pagesize = ptr->x_param_min_pagesize;
  opts->x_param_min_size_for_stack_sharing = ptr->x_param_min_size_for_stack_sharing;
  opts->x_param_min_spec_prob = ptr->x_param_min_spec_prob;
  opts->x_param_min_vect_loop_bound = ptr->x_param_min_vect_loop_bound;
  opts->x_param_modref_max_accesses = ptr->x_param_modref_max_accesses;
  opts->x_param_modref_max_adjustments = ptr->x_param_modref_max_adjustments;
  opts->x_param_modref_max_bases = ptr->x_param_modref_max_bases;
  opts->x_param_modref_max_depth = ptr->x_param_modref_max_depth;
  opts->x_param_modref_max_escape_points = ptr->x_param_modref_max_escape_points;
  opts->x_param_modref_max_refs = ptr->x_param_modref_max_refs;
  opts->x_param_modref_max_tests = ptr->x_param_modref_max_tests;
  opts->x_param_parloops_chunk_size = ptr->x_param_parloops_chunk_size;
  opts->x_param_parloops_min_per_thread = ptr->x_param_parloops_min_per_thread;
  opts->x_param_parloops_schedule = ptr->x_param_parloops_schedule;
  opts->x_param_partial_inlining_entry_probability = ptr->x_param_partial_inlining_entry_probability;
  opts->x_param_predictable_branch_outcome = ptr->x_param_predictable_branch_outcome;
  opts->x_param_prefetch_dynamic_strides = ptr->x_param_prefetch_dynamic_strides;
  opts->x_param_prefetch_latency = ptr->x_param_prefetch_latency;
  opts->x_param_prefetch_min_insn_to_mem_ratio = ptr->x_param_prefetch_min_insn_to_mem_ratio;
  opts->x_param_prefetch_minimum_stride = ptr->x_param_prefetch_minimum_stride;
  opts->x_param_ranger_logical_depth = ptr->x_param_ranger_logical_depth;
  opts->x_param_relation_block_limit = ptr->x_param_relation_block_limit;
  opts->x_param_rpo_vn_max_loop_depth = ptr->x_param_rpo_vn_max_loop_depth;
  opts->x_param_sccvn_max_alias_queries_per_access = ptr->x_param_sccvn_max_alias_queries_per_access;
  opts->x_param_scev_max_expr_complexity = ptr->x_param_scev_max_expr_complexity;
  opts->x_param_scev_max_expr_size = ptr->x_param_scev_max_expr_size;
  opts->x_param_sched_autopref_queue_depth = ptr->x_param_sched_autopref_queue_depth;
  opts->x_param_sched_mem_true_dep_cost = ptr->x_param_sched_mem_true_dep_cost;
  opts->x_param_sched_pressure_algorithm = ptr->x_param_sched_pressure_algorithm;
  opts->x_param_sched_spec_prob_cutoff = ptr->x_param_sched_spec_prob_cutoff;
  opts->x_param_sched_state_edge_prob_cutoff = ptr->x_param_sched_state_edge_prob_cutoff;
  opts->x_param_selsched_insns_to_rename = ptr->x_param_selsched_insns_to_rename;
  opts->x_param_selsched_max_lookahead = ptr->x_param_selsched_max_lookahead;
  opts->x_param_selsched_max_sched_times = ptr->x_param_selsched_max_sched_times;
  opts->x_param_simultaneous_prefetches = ptr->x_param_simultaneous_prefetches;
  opts->x_param_sink_frequency_threshold = ptr->x_param_sink_frequency_threshold;
  opts->x_param_sms_dfa_history = ptr->x_param_sms_dfa_history;
  opts->x_param_sms_loop_average_count_threshold = ptr->x_param_sms_loop_average_count_threshold;
  opts->x_param_sms_max_ii_factor = ptr->x_param_sms_max_ii_factor;
  opts->x_param_sms_min_sc = ptr->x_param_sms_min_sc;
  opts->x_param_sra_max_propagations = ptr->x_param_sra_max_propagations;
  opts->x_param_sra_max_scalarization_size_size = ptr->x_param_sra_max_scalarization_size_size;
  opts->x_param_sra_max_scalarization_size_speed = ptr->x_param_sra_max_scalarization_size_speed;
  opts->x_param_ssa_name_def_chain_limit = ptr->x_param_ssa_name_def_chain_limit;
  opts->x_param_ssp_buffer_size = ptr->x_param_ssp_buffer_size;
  opts->x_param_stack_clash_protection_guard_size = ptr->x_param_stack_clash_protection_guard_size;
  opts->x_param_stack_clash_protection_probe_interval = ptr->x_param_stack_clash_protection_probe_interval;
  opts->x_param_store_merging_allow_unaligned = ptr->x_param_store_merging_allow_unaligned;
  opts->x_param_store_merging_max_size = ptr->x_param_store_merging_max_size;
  opts->x_param_switch_conversion_branch_ratio = ptr->x_param_switch_conversion_branch_ratio;
  opts->x_param_tm_max_aggregate_size = ptr->x_param_tm_max_aggregate_size;
  opts->x_param_tracer_dynamic_coverage_feedback = ptr->x_param_tracer_dynamic_coverage_feedback;
  opts->x_param_tracer_dynamic_coverage = ptr->x_param_tracer_dynamic_coverage;
  opts->x_param_tracer_max_code_growth = ptr->x_param_tracer_max_code_growth;
  opts->x_param_tracer_min_branch_probability_feedback = ptr->x_param_tracer_min_branch_probability_feedback;
  opts->x_param_tracer_min_branch_probability = ptr->x_param_tracer_min_branch_probability;
  opts->x_param_tracer_min_branch_ratio = ptr->x_param_tracer_min_branch_ratio;
  opts->x_param_tree_reassoc_width = ptr->x_param_tree_reassoc_width;
  opts->x_param_uninit_control_dep_attempts = ptr->x_param_uninit_control_dep_attempts;
  opts->x_param_uninlined_function_insns = ptr->x_param_uninlined_function_insns;
  opts->x_param_uninlined_function_time = ptr->x_param_uninlined_function_time;
  opts->x_param_uninlined_function_thunk_insns = ptr->x_param_uninlined_function_thunk_insns;
  opts->x_param_uninlined_function_thunk_time = ptr->x_param_uninlined_function_thunk_time;
  opts->x_param_unlikely_bb_count_fraction = ptr->x_param_unlikely_bb_count_fraction;
  opts->x_param_unroll_jam_max_unroll = ptr->x_param_unroll_jam_max_unroll;
  opts->x_param_unroll_jam_min_percent = ptr->x_param_unroll_jam_min_percent;
  opts->x_param_use_after_scope_direct_emission_threshold = ptr->x_param_use_after_scope_direct_emission_threshold;
  opts->x_param_vect_epilogues_nomask = ptr->x_param_vect_epilogues_nomask;
  opts->x_param_vect_induction_float = ptr->x_param_vect_induction_float;
  opts->x_param_vect_inner_loop_cost_factor = ptr->x_param_vect_inner_loop_cost_factor;
  opts->x_param_vect_max_peeling_for_alignment = ptr->x_param_vect_max_peeling_for_alignment;
  opts->x_param_vect_max_version_for_alias_checks = ptr->x_param_vect_max_version_for_alias_checks;
  opts->x_param_vect_max_version_for_alignment_checks = ptr->x_param_vect_max_version_for_alignment_checks;
  opts->x_param_vect_partial_vector_usage = ptr->x_param_vect_partial_vector_usage;
  opts->x_flag_sched_stalled_insns = ptr->x_flag_sched_stalled_insns;
  opts->x_flag_sched_stalled_insns_dep = ptr->x_flag_sched_stalled_insns_dep;
  opts->x_flag_tree_parallelize_loops = ptr->x_flag_tree_parallelize_loops;
  opts->x_param_evrp_mode = ptr->x_param_evrp_mode;
  opts->x_param_ranger_debug = ptr->x_param_ranger_debug;
  opts->x_param_threader_debug = ptr->x_param_threader_debug;
  opts->x_param_vrp1_mode = ptr->x_param_vrp1_mode;
  opts->x_param_vrp2_mode = ptr->x_param_vrp2_mode;
  opts->x_flag_excess_precision = ptr->x_flag_excess_precision;
  opts->x_flag_fp_contract_mode = ptr->x_flag_fp_contract_mode;
  opts->x_flag_ira_algorithm = ptr->x_flag_ira_algorithm;
  opts->x_flag_ira_region = ptr->x_flag_ira_region;
  opts->x_flag_live_patching = ptr->x_flag_live_patching;
  opts->x_flag_reorder_blocks_algorithm = ptr->x_flag_reorder_blocks_algorithm;
  opts->x_flag_simd_cost_model = ptr->x_flag_simd_cost_model;
  opts->x_flag_stack_reuse = ptr->x_flag_stack_reuse;
  opts->x_flag_auto_var_init = ptr->x_flag_auto_var_init;
  opts->x_flag_vect_cost_model = ptr->x_flag_vect_cost_model;
  opts->x_optimize = ptr->x_optimize;
  opts->x_optimize_size = ptr->x_optimize_size;
  opts->x_optimize_debug = ptr->x_optimize_debug;
  opts->x_optimize_fast = ptr->x_optimize_fast;
  opts->x_warn_inline = ptr->x_warn_inline;
  opts->x_flag_aggressive_loop_optimizations = ptr->x_flag_aggressive_loop_optimizations;
  opts->x_flag_align_functions = ptr->x_flag_align_functions;
  opts->x_flag_align_jumps = ptr->x_flag_align_jumps;
  opts->x_flag_align_labels = ptr->x_flag_align_labels;
  opts->x_flag_align_loops = ptr->x_flag_align_loops;
  opts->x_flag_allocation_dce = ptr->x_flag_allocation_dce;
  opts->x_flag_store_data_races = ptr->x_flag_store_data_races;
  opts->x_flag_associative_math = ptr->x_flag_associative_math;
  opts->x_flag_asynchronous_unwind_tables = ptr->x_flag_asynchronous_unwind_tables;
  opts->x_flag_auto_inc_dec = ptr->x_flag_auto_inc_dec;
  opts->x_flag_bit_tests = ptr->x_flag_bit_tests;
  opts->x_flag_branch_on_count_reg = ptr->x_flag_branch_on_count_reg;
  opts->x_flag_branch_probabilities = ptr->x_flag_branch_probabilities;
  opts->x_flag_caller_saves = ptr->x_flag_caller_saves;
  opts->x_flag_code_hoisting = ptr->x_flag_code_hoisting;
  opts->x_flag_combine_stack_adjustments = ptr->x_flag_combine_stack_adjustments;
  opts->x_flag_compare_elim_after_reload = ptr->x_flag_compare_elim_after_reload;
  opts->x_flag_conserve_stack = ptr->x_flag_conserve_stack;
  opts->x_flag_cprop_registers = ptr->x_flag_cprop_registers;
  opts->x_flag_crossjumping = ptr->x_flag_crossjumping;
  opts->x_flag_cse_follow_jumps = ptr->x_flag_cse_follow_jumps;
  opts->x_flag_cx_fortran_rules = ptr->x_flag_cx_fortran_rules;
  opts->x_flag_cx_limited_range = ptr->x_flag_cx_limited_range;
  opts->x_flag_dce = ptr->x_flag_dce;
  opts->x_flag_defer_pop = ptr->x_flag_defer_pop;
  opts->x_flag_delayed_branch = ptr->x_flag_delayed_branch;
  opts->x_flag_delete_dead_exceptions = ptr->x_flag_delete_dead_exceptions;
  opts->x_flag_delete_null_pointer_checks = ptr->x_flag_delete_null_pointer_checks;
  opts->x_flag_devirtualize = ptr->x_flag_devirtualize;
  opts->x_flag_devirtualize_speculatively = ptr->x_flag_devirtualize_speculatively;
  opts->x_flag_dse = ptr->x_flag_dse;
  opts->x_flag_early_inlining = ptr->x_flag_early_inlining;
  opts->x_flag_exceptions = ptr->x_flag_exceptions;
  opts->x_flag_expensive_optimizations = ptr->x_flag_expensive_optimizations;
  opts->x_flag_finite_loops = ptr->x_flag_finite_loops;
  opts->x_flag_finite_math_only = ptr->x_flag_finite_math_only;
  opts->x_flag_float_store = ptr->x_flag_float_store;
  opts->x_flag_fold_simple_inlines = ptr->x_flag_fold_simple_inlines;
  opts->x_flag_forward_propagate = ptr->x_flag_forward_propagate;
  opts->x_flag_fp_int_builtin_inexact = ptr->x_flag_fp_int_builtin_inexact;
  opts->x_flag_no_function_cse = ptr->x_flag_no_function_cse;
  opts->x_flag_gcse = ptr->x_flag_gcse;
  opts->x_flag_gcse_after_reload = ptr->x_flag_gcse_after_reload;
  opts->x_flag_gcse_las = ptr->x_flag_gcse_las;
  opts->x_flag_gcse_lm = ptr->x_flag_gcse_lm;
  opts->x_flag_gcse_sm = ptr->x_flag_gcse_sm;
  opts->x_flag_graphite = ptr->x_flag_graphite;
  opts->x_flag_graphite_identity = ptr->x_flag_graphite_identity;
  opts->x_flag_guess_branch_prob = ptr->x_flag_guess_branch_prob;
  opts->x_flag_harden_compares = ptr->x_flag_harden_compares;
  opts->x_flag_harden_conditional_branches = ptr->x_flag_harden_conditional_branches;
  opts->x_flag_hoist_adjacent_loads = ptr->x_flag_hoist_adjacent_loads;
  opts->x_flag_if_conversion = ptr->x_flag_if_conversion;
  opts->x_flag_if_conversion2 = ptr->x_flag_if_conversion2;
  opts->x_flag_indirect_inlining = ptr->x_flag_indirect_inlining;
  opts->x_flag_no_inline = ptr->x_flag_no_inline;
  opts->x_flag_inline_atomics = ptr->x_flag_inline_atomics;
  opts->x_flag_inline_functions = ptr->x_flag_inline_functions;
  opts->x_flag_inline_functions_called_once = ptr->x_flag_inline_functions_called_once;
  opts->x_flag_inline_small_functions = ptr->x_flag_inline_small_functions;
  opts->x_flag_ipa_bit_cp = ptr->x_flag_ipa_bit_cp;
  opts->x_flag_ipa_cp = ptr->x_flag_ipa_cp;
  opts->x_flag_ipa_cp_clone = ptr->x_flag_ipa_cp_clone;
  opts->x_flag_ipa_icf = ptr->x_flag_ipa_icf;
  opts->x_flag_ipa_icf_functions = ptr->x_flag_ipa_icf_functions;
  opts->x_flag_ipa_icf_variables = ptr->x_flag_ipa_icf_variables;
  opts->x_flag_ipa_modref = ptr->x_flag_ipa_modref;
  opts->x_flag_ipa_profile = ptr->x_flag_ipa_profile;
  opts->x_flag_ipa_pta = ptr->x_flag_ipa_pta;
  opts->x_flag_ipa_pure_const = ptr->x_flag_ipa_pure_const;
  opts->x_flag_ipa_ra = ptr->x_flag_ipa_ra;
  opts->x_flag_ipa_reference = ptr->x_flag_ipa_reference;
  opts->x_flag_ipa_reference_addressable = ptr->x_flag_ipa_reference_addressable;
  opts->x_flag_ipa_sra = ptr->x_flag_ipa_sra;
  opts->x_flag_ipa_stack_alignment = ptr->x_flag_ipa_stack_alignment;
  opts->x_flag_ipa_strict_aliasing = ptr->x_flag_ipa_strict_aliasing;
  opts->x_flag_ipa_vrp = ptr->x_flag_ipa_vrp;
  opts->x_flag_ira_hoist_pressure = ptr->x_flag_ira_hoist_pressure;
  opts->x_flag_ira_loop_pressure = ptr->x_flag_ira_loop_pressure;
  opts->x_flag_ira_share_save_slots = ptr->x_flag_ira_share_save_slots;
  opts->x_flag_ira_share_spill_slots = ptr->x_flag_ira_share_spill_slots;
  opts->x_flag_isolate_erroneous_paths_attribute = ptr->x_flag_isolate_erroneous_paths_attribute;
  opts->x_flag_isolate_erroneous_paths_dereference = ptr->x_flag_isolate_erroneous_paths_dereference;
  opts->x_flag_ivopts = ptr->x_flag_ivopts;
  opts->x_flag_jump_tables = ptr->x_flag_jump_tables;
  opts->x_flag_keep_gc_roots_live = ptr->x_flag_keep_gc_roots_live;
  opts->x_flag_lifetime_dse = ptr->x_flag_lifetime_dse;
  opts->x_flag_limit_function_alignment = ptr->x_flag_limit_function_alignment;
  opts->x_flag_live_range_shrinkage = ptr->x_flag_live_range_shrinkage;
  opts->x_flag_loop_interchange = ptr->x_flag_loop_interchange;
  opts->x_flag_loop_nest_optimize = ptr->x_flag_loop_nest_optimize;
  opts->x_flag_loop_parallelize_all = ptr->x_flag_loop_parallelize_all;
  opts->x_flag_unroll_jam = ptr->x_flag_unroll_jam;
  opts->x_flag_lra_remat = ptr->x_flag_lra_remat;
  opts->x_flag_errno_math = ptr->x_flag_errno_math;
  opts->x_flag_modulo_sched = ptr->x_flag_modulo_sched;
  opts->x_flag_modulo_sched_allow_regmoves = ptr->x_flag_modulo_sched_allow_regmoves;
  opts->x_flag_move_loop_invariants = ptr->x_flag_move_loop_invariants;
  opts->x_flag_move_loop_stores = ptr->x_flag_move_loop_stores;
  opts->x_flag_non_call_exceptions = ptr->x_flag_non_call_exceptions;
  opts->x_flag_nothrow_opt = ptr->x_flag_nothrow_opt;
  opts->x_flag_omit_frame_pointer = ptr->x_flag_omit_frame_pointer;
  opts->x_flag_opt_info = ptr->x_flag_opt_info;
  opts->x_flag_optimize_sibling_calls = ptr->x_flag_optimize_sibling_calls;
  opts->x_flag_optimize_strlen = ptr->x_flag_optimize_strlen;
  opts->x_flag_pack_struct = ptr->x_flag_pack_struct;
  opts->x_flag_partial_inlining = ptr->x_flag_partial_inlining;
  opts->x_flag_peel_loops = ptr->x_flag_peel_loops;
  opts->x_flag_no_peephole = ptr->x_flag_no_peephole;
  opts->x_flag_peephole2 = ptr->x_flag_peephole2;
  opts->x_flag_plt = ptr->x_flag_plt;
  opts->x_flag_predictive_commoning = ptr->x_flag_predictive_commoning;
  opts->x_flag_prefetch_loop_arrays = ptr->x_flag_prefetch_loop_arrays;
  opts->x_flag_printf_return_value = ptr->x_flag_printf_return_value;
  opts->x_flag_profile_partial_training = ptr->x_flag_profile_partial_training;
  opts->x_flag_profile_reorder_functions = ptr->x_flag_profile_reorder_functions;
  opts->x_flag_reciprocal_math = ptr->x_flag_reciprocal_math;
  opts->x_flag_ree = ptr->x_flag_ree;
  opts->x_flag_pcc_struct_return = ptr->x_flag_pcc_struct_return;
  opts->x_flag_rename_registers = ptr->x_flag_rename_registers;
  opts->x_flag_reorder_blocks = ptr->x_flag_reorder_blocks;
  opts->x_flag_reorder_blocks_and_partition = ptr->x_flag_reorder_blocks_and_partition;
  opts->x_flag_reorder_functions = ptr->x_flag_reorder_functions;
  opts->x_flag_rerun_cse_after_loop = ptr->x_flag_rerun_cse_after_loop;
  opts->x_flag_resched_modulo_sched = ptr->x_flag_resched_modulo_sched;
  opts->x_flag_rounding_math = ptr->x_flag_rounding_math;
  opts->x_flag_rtti = ptr->x_flag_rtti;
  opts->x_flag_save_optimization_record = ptr->x_flag_save_optimization_record;
  opts->x_flag_sched_critical_path_heuristic = ptr->x_flag_sched_critical_path_heuristic;
  opts->x_flag_sched_dep_count_heuristic = ptr->x_flag_sched_dep_count_heuristic;
  opts->x_flag_sched_group_heuristic = ptr->x_flag_sched_group_heuristic;
  opts->x_flag_schedule_interblock = ptr->x_flag_schedule_interblock;
  opts->x_flag_sched_last_insn_heuristic = ptr->x_flag_sched_last_insn_heuristic;
  opts->x_flag_sched_pressure = ptr->x_flag_sched_pressure;
  opts->x_flag_sched_rank_heuristic = ptr->x_flag_sched_rank_heuristic;
  opts->x_flag_schedule_speculative = ptr->x_flag_schedule_speculative;
  opts->x_flag_sched_spec_insn_heuristic = ptr->x_flag_sched_spec_insn_heuristic;
  opts->x_flag_schedule_speculative_load = ptr->x_flag_schedule_speculative_load;
  opts->x_flag_schedule_speculative_load_dangerous = ptr->x_flag_schedule_speculative_load_dangerous;
  opts->x_flag_sched2_use_superblocks = ptr->x_flag_sched2_use_superblocks;
  opts->x_flag_schedule_fusion = ptr->x_flag_schedule_fusion;
  opts->x_flag_schedule_insns = ptr->x_flag_schedule_insns;
  opts->x_flag_schedule_insns_after_reload = ptr->x_flag_schedule_insns_after_reload;
  opts->x_flag_section_anchors = ptr->x_flag_section_anchors;
  opts->x_flag_sel_sched_pipelining = ptr->x_flag_sel_sched_pipelining;
  opts->x_flag_sel_sched_pipelining_outer_loops = ptr->x_flag_sel_sched_pipelining_outer_loops;
  opts->x_flag_sel_sched_reschedule_pipelined = ptr->x_flag_sel_sched_reschedule_pipelined;
  opts->x_flag_selective_scheduling = ptr->x_flag_selective_scheduling;
  opts->x_flag_selective_scheduling2 = ptr->x_flag_selective_scheduling2;
  opts->x_flag_semantic_interposition = ptr->x_flag_semantic_interposition;
  opts->x_flag_short_enums = ptr->x_flag_short_enums;
  opts->x_flag_short_wchar = ptr->x_flag_short_wchar;
  opts->x_flag_shrink_wrap = ptr->x_flag_shrink_wrap;
  opts->x_flag_shrink_wrap_separate = ptr->x_flag_shrink_wrap_separate;
  opts->x_flag_signaling_nans = ptr->x_flag_signaling_nans;
  opts->x_flag_signed_zeros = ptr->x_flag_signed_zeros;
  opts->x_flag_single_precision_constant = ptr->x_flag_single_precision_constant;
  opts->x_flag_split_ivs_in_unroller = ptr->x_flag_split_ivs_in_unroller;
  opts->x_flag_split_loops = ptr->x_flag_split_loops;
  opts->x_flag_split_paths = ptr->x_flag_split_paths;
  opts->x_flag_split_wide_types = ptr->x_flag_split_wide_types;
  opts->x_flag_split_wide_types_early = ptr->x_flag_split_wide_types_early;
  opts->x_flag_ssa_backprop = ptr->x_flag_ssa_backprop;
  opts->x_flag_ssa_phiopt = ptr->x_flag_ssa_phiopt;
  opts->x_flag_stack_clash_protection = ptr->x_flag_stack_clash_protection;
  opts->x_flag_stack_protect = ptr->x_flag_stack_protect;
  opts->x_flag_stdarg_opt = ptr->x_flag_stdarg_opt;
  opts->x_flag_store_merging = ptr->x_flag_store_merging;
  opts->x_flag_strict_aliasing = ptr->x_flag_strict_aliasing;
  opts->x_flag_strict_enums = ptr->x_flag_strict_enums;
  opts->x_flag_strict_volatile_bitfields = ptr->x_flag_strict_volatile_bitfields;
  opts->x_flag_thread_jumps = ptr->x_flag_thread_jumps;
  opts->x_flag_threadsafe_statics = ptr->x_flag_threadsafe_statics;
  opts->x_flag_toplevel_reorder = ptr->x_flag_toplevel_reorder;
  opts->x_flag_tracer = ptr->x_flag_tracer;
  opts->x_flag_trapping_math = ptr->x_flag_trapping_math;
  opts->x_flag_trapv = ptr->x_flag_trapv;
  opts->x_flag_tree_bit_ccp = ptr->x_flag_tree_bit_ccp;
  opts->x_flag_tree_builtin_call_dce = ptr->x_flag_tree_builtin_call_dce;
  opts->x_flag_tree_ccp = ptr->x_flag_tree_ccp;
  opts->x_flag_tree_ch = ptr->x_flag_tree_ch;
  opts->x_flag_tree_coalesce_vars = ptr->x_flag_tree_coalesce_vars;
  opts->x_flag_tree_copy_prop = ptr->x_flag_tree_copy_prop;
  opts->x_flag_tree_cselim = ptr->x_flag_tree_cselim;
  opts->x_flag_tree_dce = ptr->x_flag_tree_dce;
  opts->x_flag_tree_dom = ptr->x_flag_tree_dom;
  opts->x_flag_tree_dse = ptr->x_flag_tree_dse;
  opts->x_flag_tree_forwprop = ptr->x_flag_tree_forwprop;
  opts->x_flag_tree_fre = ptr->x_flag_tree_fre;
  opts->x_flag_tree_loop_distribute_patterns = ptr->x_flag_tree_loop_distribute_patterns;
  opts->x_flag_tree_loop_distribution = ptr->x_flag_tree_loop_distribution;
  opts->x_flag_tree_loop_if_convert = ptr->x_flag_tree_loop_if_convert;
  opts->x_flag_tree_loop_im = ptr->x_flag_tree_loop_im;
  opts->x_flag_tree_loop_ivcanon = ptr->x_flag_tree_loop_ivcanon;
  opts->x_flag_tree_loop_optimize = ptr->x_flag_tree_loop_optimize;
  opts->x_flag_tree_loop_vectorize = ptr->x_flag_tree_loop_vectorize;
  opts->x_flag_tree_live_range_split = ptr->x_flag_tree_live_range_split;
  opts->x_flag_tree_partial_pre = ptr->x_flag_tree_partial_pre;
  opts->x_flag_tree_phiprop = ptr->x_flag_tree_phiprop;
  opts->x_flag_tree_pre = ptr->x_flag_tree_pre;
  opts->x_flag_tree_pta = ptr->x_flag_tree_pta;
  opts->x_flag_tree_reassoc = ptr->x_flag_tree_reassoc;
  opts->x_flag_tree_scev_cprop = ptr->x_flag_tree_scev_cprop;
  opts->x_flag_tree_sink = ptr->x_flag_tree_sink;
  opts->x_flag_tree_slp_vectorize = ptr->x_flag_tree_slp_vectorize;
  opts->x_flag_tree_slsr = ptr->x_flag_tree_slsr;
  opts->x_flag_tree_sra = ptr->x_flag_tree_sra;
  opts->x_flag_tree_switch_conversion = ptr->x_flag_tree_switch_conversion;
  opts->x_flag_tree_tail_merge = ptr->x_flag_tree_tail_merge;
  opts->x_flag_tree_ter = ptr->x_flag_tree_ter;
  opts->x_flag_tree_vectorize = ptr->x_flag_tree_vectorize;
  opts->x_flag_tree_vrp = ptr->x_flag_tree_vrp;
  opts->x_flag_unconstrained_commons = ptr->x_flag_unconstrained_commons;
  opts->x_flag_unroll_all_loops = ptr->x_flag_unroll_all_loops;
  opts->x_flag_cunroll_grow_size = ptr->x_flag_cunroll_grow_size;
  opts->x_flag_unroll_loops = ptr->x_flag_unroll_loops;
  opts->x_flag_unsafe_math_optimizations = ptr->x_flag_unsafe_math_optimizations;
  opts->x_flag_unswitch_loops = ptr->x_flag_unswitch_loops;
  opts->x_flag_unwind_tables = ptr->x_flag_unwind_tables;
  opts->x_flag_var_tracking = ptr->x_flag_var_tracking;
  opts->x_flag_var_tracking_assignments = ptr->x_flag_var_tracking_assignments;
  opts->x_flag_var_tracking_assignments_toggle = ptr->x_flag_var_tracking_assignments_toggle;
  opts->x_flag_var_tracking_uninit = ptr->x_flag_var_tracking_uninit;
  opts->x_flag_variable_expansion_in_unroller = ptr->x_flag_variable_expansion_in_unroller;
  opts->x_flag_version_loops_for_strides = ptr->x_flag_version_loops_for_strides;
  opts->x_flag_value_profile_transformations = ptr->x_flag_value_profile_transformations;
  opts->x_flag_web = ptr->x_flag_web;
  opts->x_flag_wrapv = ptr->x_flag_wrapv;
  opts->x_flag_wrapv_pointer = ptr->x_flag_wrapv_pointer;
  opts->x_debug_nonbind_markers_p = ptr->x_debug_nonbind_markers_p;
  opts->x_str_align_functions = ptr->x_str_align_functions;
  opts->x_str_align_jumps = ptr->x_str_align_jumps;
  opts->x_str_align_labels = ptr->x_str_align_labels;
  opts->x_str_align_loops = ptr->x_str_align_loops;
  opts->x_flag_patchable_function_entry = ptr->x_flag_patchable_function_entry;

  unsigned HOST_WIDE_INT mask;
  mask = ptr->explicit_mask[0];
  opts_set->x_param_align_loop_iterations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_align_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_protect_allocas = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_instrument_reads = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_instrument_writes = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_instrumentation_with_call_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_memintrin = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_stack = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_asan_use_after_return = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_avg_loop_niter = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_avoid_fma_max_bits = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_builtin_expect_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_builtin_string_cmp_inline_length = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_case_values_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_comdat_sharing_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_construct_interfere_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_destruct_interfere_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_dse_max_alias_queries_per_store = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_dse_max_object_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_early_inlining_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_evrp_sparse_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_evrp_switch_limit = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_fsm_scale_path_blocks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_fsm_scale_path_stmts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_gcse_after_reload_critical_fraction = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_gcse_after_reload_partial_fraction = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_gcse_cost_distance_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_gcse_unrestricted_cost = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_graphite_max_arrays_per_scop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_graphite_max_nb_scop_params = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_instrument_allocas = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_instrument_mem_intrinsics = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_instrument_reads = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_instrument_stack = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_instrument_writes = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_hwasan_random_frame_tag = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_inline_heuristics_hint_percent = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_inline_min_speedup = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_inline_unit_growth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_eval_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_large_unit_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_loop_hint_bonus = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_max_recursive_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_min_recursive_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_profile_count_base = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_recursion_penalty = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_recursive_freq_factor = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_single_call_penalty = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_unit_growth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_cp_value_list_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_jump_function_lookups = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_max_aa_steps = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_max_agg_items = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_max_loop_predicates = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_max_param_expr_ops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_max_switch_predicate_bounds = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_sra_max_replacements = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ipa_sra_ptr_growth_factor = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ira_consider_dup_in_all_alts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ira_loop_reserved_regs = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ira_max_conflict_table_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ira_max_loops_num = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_iv_always_prune_cand_set_bound = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_iv_consider_all_candidates_bound = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[1];
  opts_set->x_param_iv_max_considered_uses = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_jump_table_max_growth_ratio_for_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_jump_table_max_growth_ratio_for_speed = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_l1_cache_line_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_l1_cache_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_l2_cache_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_large_function_growth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_large_function_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_stack_frame_growth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_large_stack_frame = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_large_unit_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_lim_expensive = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_block_tile_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_interchange_max_num_stmts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_interchange_stride_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_invariant_max_bbs_in_loop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_max_datarefs_for_datadeps = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_versioning_max_inner_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_loop_versioning_max_outer_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_lra_inheritance_ebb_probability_cutoff = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_lra_max_considered_reload_pseudos = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_average_unrolled_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_combine_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_unroll_iterations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_completely_peel_times = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_completely_peeled_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_crossjump_edges = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_cse_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_cse_path_length = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_cselib_memory_locations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_debug_marker_count = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_delay_slot_insn_search = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_delay_slot_live_search = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_dse_active_local_stores = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_early_inliner_max_iterations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_find_base_term_values = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_fsm_thread_length = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_fsm_thread_path_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_gcse_insertion_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_gcse_memory = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_goto_duplication_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_grow_copy_bb_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_hoist_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_inline_functions_called_once_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_inline_functions_called_once_loop_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_auto = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_recursive_auto = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_recursive = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_single = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_insns_small = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_recursive_depth_auto = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_inline_recursive_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_isl_operations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_iterations_computation_cost = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_iterations_to_track = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_jump_thread_duplication_stmts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_last_value_rtl = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_loop_header_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_modulo_backtrack_attempts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_partial_antic_length = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_peel_branches = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_peel_times = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_peeled_insns = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[2];
  opts_set->x_param_max_pending_list_length = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_pipeline_region_blocks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_pipeline_region_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_pow_sqrt_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_predicted_iterations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_reload_search_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_rtl_if_conversion_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_rtl_if_conversion_predictable_cost = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_rtl_if_conversion_unpredictable_cost = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_sched_extend_regions_iters = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_sched_insn_conflict_delay = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_sched_ready_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_sched_region_blocks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_sched_region_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_slsr_candidate_scan = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_speculative_devirt_maydefs = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_stores_to_merge = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_stores_to_sink = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_tail_merge_comparisons = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_tail_merge_iterations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_tracked_strlens = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_tree_if_conversion_phi_args = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_unroll_times = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_unrolled_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_unswitch_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_variable_expansions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_vartrack_expr_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_vartrack_reverse_op_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_vartrack_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_max_vrp_switch_assertions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_crossjump_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_inline_recursive_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_insn_to_prefetch_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_loop_cond_split_prob = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_pagesize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_size_for_stack_sharing = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_spec_prob = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_min_vect_loop_bound = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_accesses = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_adjustments = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_bases = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_escape_points = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_refs = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_modref_max_tests = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_parloops_chunk_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_parloops_min_per_thread = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_parloops_schedule = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_partial_inlining_entry_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_predictable_branch_outcome = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_prefetch_dynamic_strides = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_prefetch_latency = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_prefetch_min_insn_to_mem_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_prefetch_minimum_stride = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ranger_logical_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_relation_block_limit = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_rpo_vn_max_loop_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sccvn_max_alias_queries_per_access = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_scev_max_expr_complexity = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_scev_max_expr_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sched_autopref_queue_depth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sched_mem_true_dep_cost = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sched_pressure_algorithm = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sched_spec_prob_cutoff = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[3];
  opts_set->x_param_sched_state_edge_prob_cutoff = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_selsched_insns_to_rename = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_selsched_max_lookahead = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_selsched_max_sched_times = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_simultaneous_prefetches = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sink_frequency_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sms_dfa_history = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sms_loop_average_count_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sms_max_ii_factor = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sms_min_sc = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sra_max_propagations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sra_max_scalarization_size_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_sra_max_scalarization_size_speed = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ssa_name_def_chain_limit = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_ssp_buffer_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_stack_clash_protection_guard_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_stack_clash_protection_probe_interval = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_store_merging_allow_unaligned = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_store_merging_max_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_switch_conversion_branch_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tm_max_aggregate_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_dynamic_coverage_feedback = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_dynamic_coverage = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_max_code_growth = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_min_branch_probability_feedback = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_min_branch_probability = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tracer_min_branch_ratio = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_tree_reassoc_width = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_uninit_control_dep_attempts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_uninlined_function_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_uninlined_function_time = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_uninlined_function_thunk_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_uninlined_function_thunk_time = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_unlikely_bb_count_fraction = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_unroll_jam_max_unroll = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_unroll_jam_min_percent = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_use_after_scope_direct_emission_threshold = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_epilogues_nomask = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_induction_float = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_inner_loop_cost_factor = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_max_peeling_for_alignment = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_max_version_for_alias_checks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_max_version_for_alignment_checks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_vect_partial_vector_usage = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_stalled_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_stalled_insns_dep = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_parallelize_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_param_evrp_mode = static_cast<enum evrp_mode >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_param_ranger_debug = static_cast<enum ranger_debug >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_param_threader_debug = static_cast<enum threader_debug >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_param_vrp1_mode = static_cast<enum vrp_mode >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_param_vrp2_mode = static_cast<enum vrp_mode >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_excess_precision = static_cast<enum excess_precision >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_fp_contract_mode = static_cast<enum fp_contract_mode >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_ira_algorithm = static_cast<enum ira_algorithm >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_ira_region = static_cast<enum ira_region >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_live_patching = static_cast<enum live_patching_level >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_reorder_blocks_algorithm = static_cast<enum reorder_blocks_algorithm >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_simd_cost_model = static_cast<enum vect_cost_model >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_stack_reuse = static_cast<enum stack_reuse_level >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_auto_var_init = static_cast<enum auto_init_type >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_vect_cost_model = static_cast<enum vect_cost_model >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_optimize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_optimize_size = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[4];
  opts_set->x_optimize_debug = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_optimize_fast = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_warn_inline = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_aggressive_loop_optimizations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_align_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_align_jumps = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_align_labels = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_align_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_allocation_dce = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_store_data_races = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_associative_math = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_asynchronous_unwind_tables = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_auto_inc_dec = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_bit_tests = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_branch_on_count_reg = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_branch_probabilities = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_caller_saves = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_code_hoisting = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_combine_stack_adjustments = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_compare_elim_after_reload = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_conserve_stack = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_cprop_registers = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_crossjumping = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_cse_follow_jumps = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_cx_fortran_rules = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_cx_limited_range = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_dce = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_defer_pop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_delayed_branch = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_delete_dead_exceptions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_delete_null_pointer_checks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_devirtualize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_devirtualize_speculatively = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_dse = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_early_inlining = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_exceptions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_expensive_optimizations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_finite_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_finite_math_only = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_float_store = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_fold_simple_inlines = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_forward_propagate = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_fp_int_builtin_inexact = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_no_function_cse = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_gcse = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_gcse_after_reload = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_gcse_las = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_gcse_lm = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_gcse_sm = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_graphite = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_graphite_identity = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_guess_branch_prob = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_harden_compares = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_harden_conditional_branches = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_hoist_adjacent_loads = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_if_conversion = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_if_conversion2 = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_indirect_inlining = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_no_inline = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_inline_atomics = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_inline_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_inline_functions_called_once = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_inline_small_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_bit_cp = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[5];
  opts_set->x_flag_ipa_cp = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_cp_clone = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_icf = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_icf_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_icf_variables = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_modref = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_profile = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_pta = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_pure_const = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_ra = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_reference = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_reference_addressable = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_sra = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_stack_alignment = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_strict_aliasing = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ipa_vrp = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ira_hoist_pressure = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ira_loop_pressure = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ira_share_save_slots = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ira_share_spill_slots = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_isolate_erroneous_paths_attribute = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_isolate_erroneous_paths_dereference = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ivopts = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_jump_tables = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_keep_gc_roots_live = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_lifetime_dse = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_limit_function_alignment = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_live_range_shrinkage = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_loop_interchange = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_loop_nest_optimize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_loop_parallelize_all = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unroll_jam = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_lra_remat = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_errno_math = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_modulo_sched = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_modulo_sched_allow_regmoves = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_move_loop_invariants = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_move_loop_stores = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_non_call_exceptions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_nothrow_opt = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_omit_frame_pointer = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_opt_info = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_optimize_sibling_calls = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_optimize_strlen = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_pack_struct = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_partial_inlining = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_peel_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_no_peephole = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_peephole2 = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_plt = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_predictive_commoning = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_prefetch_loop_arrays = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_printf_return_value = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_profile_partial_training = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_profile_reorder_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_reciprocal_math = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ree = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_pcc_struct_return = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_rename_registers = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_reorder_blocks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_reorder_blocks_and_partition = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_reorder_functions = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_rerun_cse_after_loop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_resched_modulo_sched = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[6];
  opts_set->x_flag_rounding_math = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_rtti = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_save_optimization_record = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_critical_path_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_dep_count_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_group_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_interblock = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_last_insn_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_pressure = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_rank_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_speculative = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched_spec_insn_heuristic = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_speculative_load = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_speculative_load_dangerous = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sched2_use_superblocks = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_fusion = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_insns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_schedule_insns_after_reload = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_section_anchors = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sel_sched_pipelining = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sel_sched_pipelining_outer_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_sel_sched_reschedule_pipelined = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_selective_scheduling = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_selective_scheduling2 = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_semantic_interposition = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_short_enums = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_short_wchar = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_shrink_wrap = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_shrink_wrap_separate = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_signaling_nans = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_signed_zeros = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_single_precision_constant = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_split_ivs_in_unroller = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_split_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_split_paths = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_split_wide_types = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_split_wide_types_early = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ssa_backprop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_ssa_phiopt = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_stack_clash_protection = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_stack_protect = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_stdarg_opt = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_store_merging = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_strict_aliasing = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_strict_enums = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_strict_volatile_bitfields = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_thread_jumps = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_threadsafe_statics = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_toplevel_reorder = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tracer = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_trapping_math = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_trapv = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_bit_ccp = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_builtin_call_dce = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_ccp = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_ch = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_coalesce_vars = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_copy_prop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_cselim = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_dce = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_dom = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_dse = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_forwprop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_fre = (mask & 1) != 0;
  mask >>= 1;
  mask = ptr->explicit_mask[7];
  opts_set->x_flag_tree_loop_distribute_patterns = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_distribution = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_if_convert = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_im = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_ivcanon = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_optimize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_loop_vectorize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_live_range_split = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_partial_pre = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_phiprop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_pre = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_pta = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_reassoc = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_scev_cprop = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_sink = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_slp_vectorize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_slsr = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_sra = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_switch_conversion = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_tail_merge = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_ter = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_vectorize = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_tree_vrp = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unconstrained_commons = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unroll_all_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_cunroll_grow_size = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unroll_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unsafe_math_optimizations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unswitch_loops = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_unwind_tables = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_var_tracking = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_var_tracking_assignments = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_var_tracking_assignments_toggle = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_var_tracking_uninit = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_variable_expansion_in_unroller = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_version_loops_for_strides = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_value_profile_transformations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_web = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_wrapv = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_flag_wrapv_pointer = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_debug_nonbind_markers_p = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_str_align_functions = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_str_align_jumps = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_str_align_labels = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_str_align_loops = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_flag_patchable_function_entry = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  targetm.override_options_after_change ();
}

/* Print optimization options from a structure.  */
void
cl_optimization_print (FILE *file,
                       int indent_to,
                       struct cl_optimization *ptr)
{
  fputs ("\n", file);
  if (ptr->x_param_align_loop_iterations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_align_loop_iterations",
             ptr->x_param_align_loop_iterations);

  if (ptr->x_param_align_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_align_threshold",
             ptr->x_param_align_threshold);

  if (ptr->x_param_asan_protect_allocas)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_protect_allocas",
             ptr->x_param_asan_protect_allocas);

  if (ptr->x_param_asan_instrument_reads)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_instrument_reads",
             ptr->x_param_asan_instrument_reads);

  if (ptr->x_param_asan_instrument_writes)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_instrument_writes",
             ptr->x_param_asan_instrument_writes);

  if (ptr->x_param_asan_instrumentation_with_call_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_instrumentation_with_call_threshold",
             ptr->x_param_asan_instrumentation_with_call_threshold);

  if (ptr->x_param_asan_memintrin)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_memintrin",
             ptr->x_param_asan_memintrin);

  if (ptr->x_param_asan_stack)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_stack",
             ptr->x_param_asan_stack);

  if (ptr->x_param_asan_use_after_return)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_asan_use_after_return",
             ptr->x_param_asan_use_after_return);

  if (ptr->x_param_avg_loop_niter)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_avg_loop_niter",
             ptr->x_param_avg_loop_niter);

  if (ptr->x_param_avoid_fma_max_bits)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_avoid_fma_max_bits",
             ptr->x_param_avoid_fma_max_bits);

  if (ptr->x_param_builtin_expect_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_builtin_expect_probability",
             ptr->x_param_builtin_expect_probability);

  if (ptr->x_param_builtin_string_cmp_inline_length)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_builtin_string_cmp_inline_length",
             ptr->x_param_builtin_string_cmp_inline_length);

  if (ptr->x_param_case_values_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_case_values_threshold",
             ptr->x_param_case_values_threshold);

  if (ptr->x_param_comdat_sharing_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_comdat_sharing_probability",
             ptr->x_param_comdat_sharing_probability);

  if (ptr->x_param_construct_interfere_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_construct_interfere_size",
             ptr->x_param_construct_interfere_size);

  if (ptr->x_param_destruct_interfere_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_destruct_interfere_size",
             ptr->x_param_destruct_interfere_size);

  if (ptr->x_param_dse_max_alias_queries_per_store)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_dse_max_alias_queries_per_store",
             ptr->x_param_dse_max_alias_queries_per_store);

  if (ptr->x_param_dse_max_object_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_dse_max_object_size",
             ptr->x_param_dse_max_object_size);

  if (ptr->x_param_early_inlining_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_early_inlining_insns",
             ptr->x_param_early_inlining_insns);

  if (ptr->x_param_evrp_sparse_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_evrp_sparse_threshold",
             ptr->x_param_evrp_sparse_threshold);

  if (ptr->x_param_evrp_switch_limit)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_evrp_switch_limit",
             ptr->x_param_evrp_switch_limit);

  if (ptr->x_param_fsm_scale_path_blocks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_fsm_scale_path_blocks",
             ptr->x_param_fsm_scale_path_blocks);

  if (ptr->x_param_fsm_scale_path_stmts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_fsm_scale_path_stmts",
             ptr->x_param_fsm_scale_path_stmts);

  if (ptr->x_param_gcse_after_reload_critical_fraction)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_gcse_after_reload_critical_fraction",
             ptr->x_param_gcse_after_reload_critical_fraction);

  if (ptr->x_param_gcse_after_reload_partial_fraction)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_gcse_after_reload_partial_fraction",
             ptr->x_param_gcse_after_reload_partial_fraction);

  if (ptr->x_param_gcse_cost_distance_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_gcse_cost_distance_ratio",
             ptr->x_param_gcse_cost_distance_ratio);

  if (ptr->x_param_gcse_unrestricted_cost)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_gcse_unrestricted_cost",
             ptr->x_param_gcse_unrestricted_cost);

  if (ptr->x_param_graphite_max_arrays_per_scop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_graphite_max_arrays_per_scop",
             ptr->x_param_graphite_max_arrays_per_scop);

  if (ptr->x_param_graphite_max_nb_scop_params)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_graphite_max_nb_scop_params",
             ptr->x_param_graphite_max_nb_scop_params);

  if (ptr->x_param_hwasan_instrument_allocas)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_allocas",
             ptr->x_param_hwasan_instrument_allocas);

  if (ptr->x_param_hwasan_instrument_mem_intrinsics)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_mem_intrinsics",
             ptr->x_param_hwasan_instrument_mem_intrinsics);

  if (ptr->x_param_hwasan_instrument_reads)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_reads",
             ptr->x_param_hwasan_instrument_reads);

  if (ptr->x_param_hwasan_instrument_stack)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_stack",
             ptr->x_param_hwasan_instrument_stack);

  if (ptr->x_param_hwasan_instrument_writes)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_writes",
             ptr->x_param_hwasan_instrument_writes);

  if (ptr->x_param_hwasan_random_frame_tag)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_hwasan_random_frame_tag",
             ptr->x_param_hwasan_random_frame_tag);

  if (ptr->x_param_inline_heuristics_hint_percent)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_inline_heuristics_hint_percent",
             ptr->x_param_inline_heuristics_hint_percent);

  if (ptr->x_param_inline_min_speedup)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_inline_min_speedup",
             ptr->x_param_inline_min_speedup);

  if (ptr->x_param_inline_unit_growth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_inline_unit_growth",
             ptr->x_param_inline_unit_growth);

  if (ptr->x_param_ipa_cp_eval_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_eval_threshold",
             ptr->x_param_ipa_cp_eval_threshold);

  if (ptr->x_param_ipa_cp_large_unit_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_large_unit_insns",
             ptr->x_param_ipa_cp_large_unit_insns);

  if (ptr->x_param_ipa_cp_loop_hint_bonus)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_loop_hint_bonus",
             ptr->x_param_ipa_cp_loop_hint_bonus);

  if (ptr->x_param_ipa_cp_max_recursive_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_max_recursive_depth",
             ptr->x_param_ipa_cp_max_recursive_depth);

  if (ptr->x_param_ipa_cp_min_recursive_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_min_recursive_probability",
             ptr->x_param_ipa_cp_min_recursive_probability);

  if (ptr->x_param_ipa_cp_profile_count_base)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_profile_count_base",
             ptr->x_param_ipa_cp_profile_count_base);

  if (ptr->x_param_ipa_cp_recursion_penalty)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_recursion_penalty",
             ptr->x_param_ipa_cp_recursion_penalty);

  if (ptr->x_param_ipa_cp_recursive_freq_factor)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_recursive_freq_factor",
             ptr->x_param_ipa_cp_recursive_freq_factor);

  if (ptr->x_param_ipa_cp_single_call_penalty)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_single_call_penalty",
             ptr->x_param_ipa_cp_single_call_penalty);

  if (ptr->x_param_ipa_cp_unit_growth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_unit_growth",
             ptr->x_param_ipa_cp_unit_growth);

  if (ptr->x_param_ipa_cp_value_list_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_cp_value_list_size",
             ptr->x_param_ipa_cp_value_list_size);

  if (ptr->x_param_ipa_jump_function_lookups)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_jump_function_lookups",
             ptr->x_param_ipa_jump_function_lookups);

  if (ptr->x_param_ipa_max_aa_steps)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_max_aa_steps",
             ptr->x_param_ipa_max_aa_steps);

  if (ptr->x_param_ipa_max_agg_items)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_max_agg_items",
             ptr->x_param_ipa_max_agg_items);

  if (ptr->x_param_ipa_max_loop_predicates)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_max_loop_predicates",
             ptr->x_param_ipa_max_loop_predicates);

  if (ptr->x_param_ipa_max_param_expr_ops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_max_param_expr_ops",
             ptr->x_param_ipa_max_param_expr_ops);

  if (ptr->x_param_ipa_max_switch_predicate_bounds)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_max_switch_predicate_bounds",
             ptr->x_param_ipa_max_switch_predicate_bounds);

  if (ptr->x_param_ipa_sra_max_replacements)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_sra_max_replacements",
             ptr->x_param_ipa_sra_max_replacements);

  if (ptr->x_param_ipa_sra_ptr_growth_factor)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ipa_sra_ptr_growth_factor",
             ptr->x_param_ipa_sra_ptr_growth_factor);

  if (ptr->x_param_ira_consider_dup_in_all_alts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ira_consider_dup_in_all_alts",
             ptr->x_param_ira_consider_dup_in_all_alts);

  if (ptr->x_param_ira_loop_reserved_regs)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ira_loop_reserved_regs",
             ptr->x_param_ira_loop_reserved_regs);

  if (ptr->x_param_ira_max_conflict_table_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ira_max_conflict_table_size",
             ptr->x_param_ira_max_conflict_table_size);

  if (ptr->x_param_ira_max_loops_num)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ira_max_loops_num",
             ptr->x_param_ira_max_loops_num);

  if (ptr->x_param_iv_always_prune_cand_set_bound)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_iv_always_prune_cand_set_bound",
             ptr->x_param_iv_always_prune_cand_set_bound);

  if (ptr->x_param_iv_consider_all_candidates_bound)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_iv_consider_all_candidates_bound",
             ptr->x_param_iv_consider_all_candidates_bound);

  if (ptr->x_param_iv_max_considered_uses)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_iv_max_considered_uses",
             ptr->x_param_iv_max_considered_uses);

  if (ptr->x_param_jump_table_max_growth_ratio_for_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_jump_table_max_growth_ratio_for_size",
             ptr->x_param_jump_table_max_growth_ratio_for_size);

  if (ptr->x_param_jump_table_max_growth_ratio_for_speed)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_jump_table_max_growth_ratio_for_speed",
             ptr->x_param_jump_table_max_growth_ratio_for_speed);

  if (ptr->x_param_l1_cache_line_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_l1_cache_line_size",
             ptr->x_param_l1_cache_line_size);

  if (ptr->x_param_l1_cache_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_l1_cache_size",
             ptr->x_param_l1_cache_size);

  if (ptr->x_param_l2_cache_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_l2_cache_size",
             ptr->x_param_l2_cache_size);

  if (ptr->x_param_large_function_growth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_large_function_growth",
             ptr->x_param_large_function_growth);

  if (ptr->x_param_large_function_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_large_function_insns",
             ptr->x_param_large_function_insns);

  if (ptr->x_param_stack_frame_growth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_stack_frame_growth",
             ptr->x_param_stack_frame_growth);

  if (ptr->x_param_large_stack_frame)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_large_stack_frame",
             ptr->x_param_large_stack_frame);

  if (ptr->x_param_large_unit_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_large_unit_insns",
             ptr->x_param_large_unit_insns);

  if (ptr->x_param_lim_expensive)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_lim_expensive",
             ptr->x_param_lim_expensive);

  if (ptr->x_param_loop_block_tile_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_block_tile_size",
             ptr->x_param_loop_block_tile_size);

  if (ptr->x_param_loop_interchange_max_num_stmts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_interchange_max_num_stmts",
             ptr->x_param_loop_interchange_max_num_stmts);

  if (ptr->x_param_loop_interchange_stride_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_interchange_stride_ratio",
             ptr->x_param_loop_interchange_stride_ratio);

  if (ptr->x_param_loop_invariant_max_bbs_in_loop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_invariant_max_bbs_in_loop",
             ptr->x_param_loop_invariant_max_bbs_in_loop);

  if (ptr->x_param_loop_max_datarefs_for_datadeps)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_max_datarefs_for_datadeps",
             ptr->x_param_loop_max_datarefs_for_datadeps);

  if (ptr->x_param_loop_versioning_max_inner_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_versioning_max_inner_insns",
             ptr->x_param_loop_versioning_max_inner_insns);

  if (ptr->x_param_loop_versioning_max_outer_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_loop_versioning_max_outer_insns",
             ptr->x_param_loop_versioning_max_outer_insns);

  if (ptr->x_param_lra_inheritance_ebb_probability_cutoff)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_lra_inheritance_ebb_probability_cutoff",
             ptr->x_param_lra_inheritance_ebb_probability_cutoff);

  if (ptr->x_param_lra_max_considered_reload_pseudos)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_lra_max_considered_reload_pseudos",
             ptr->x_param_lra_max_considered_reload_pseudos);

  if (ptr->x_param_max_average_unrolled_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_average_unrolled_insns",
             ptr->x_param_max_average_unrolled_insns);

  if (ptr->x_param_max_combine_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_combine_insns",
             ptr->x_param_max_combine_insns);

  if (ptr->x_param_max_unroll_iterations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_unroll_iterations",
             ptr->x_param_max_unroll_iterations);

  if (ptr->x_param_max_completely_peel_times)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_completely_peel_times",
             ptr->x_param_max_completely_peel_times);

  if (ptr->x_param_max_completely_peeled_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_completely_peeled_insns",
             ptr->x_param_max_completely_peeled_insns);

  if (ptr->x_param_max_crossjump_edges)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_crossjump_edges",
             ptr->x_param_max_crossjump_edges);

  if (ptr->x_param_max_cse_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_cse_insns",
             ptr->x_param_max_cse_insns);

  if (ptr->x_param_max_cse_path_length)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_cse_path_length",
             ptr->x_param_max_cse_path_length);

  if (ptr->x_param_max_cselib_memory_locations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_cselib_memory_locations",
             ptr->x_param_max_cselib_memory_locations);

  if (ptr->x_param_max_debug_marker_count)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_debug_marker_count",
             ptr->x_param_max_debug_marker_count);

  if (ptr->x_param_max_delay_slot_insn_search)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_delay_slot_insn_search",
             ptr->x_param_max_delay_slot_insn_search);

  if (ptr->x_param_max_delay_slot_live_search)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_delay_slot_live_search",
             ptr->x_param_max_delay_slot_live_search);

  if (ptr->x_param_max_dse_active_local_stores)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_dse_active_local_stores",
             ptr->x_param_max_dse_active_local_stores);

  if (ptr->x_param_early_inliner_max_iterations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_early_inliner_max_iterations",
             ptr->x_param_early_inliner_max_iterations);

  if (ptr->x_param_max_find_base_term_values)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_find_base_term_values",
             ptr->x_param_max_find_base_term_values);

  if (ptr->x_param_max_fsm_thread_length)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_fsm_thread_length",
             ptr->x_param_max_fsm_thread_length);

  if (ptr->x_param_max_fsm_thread_path_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_fsm_thread_path_insns",
             ptr->x_param_max_fsm_thread_path_insns);

  if (ptr->x_param_max_gcse_insertion_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_gcse_insertion_ratio",
             ptr->x_param_max_gcse_insertion_ratio);

  if (ptr->x_param_max_gcse_memory)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_gcse_memory",
             ptr->x_param_max_gcse_memory);

  if (ptr->x_param_max_goto_duplication_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_goto_duplication_insns",
             ptr->x_param_max_goto_duplication_insns);

  if (ptr->x_param_max_grow_copy_bb_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_grow_copy_bb_insns",
             ptr->x_param_max_grow_copy_bb_insns);

  if (ptr->x_param_max_hoist_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_hoist_depth",
             ptr->x_param_max_hoist_depth);

  if (ptr->x_param_inline_functions_called_once_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_inline_functions_called_once_insns",
             ptr->x_param_inline_functions_called_once_insns);

  if (ptr->x_param_inline_functions_called_once_loop_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_inline_functions_called_once_loop_depth",
             ptr->x_param_inline_functions_called_once_loop_depth);

  if (ptr->x_param_max_inline_insns_auto)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_auto",
             ptr->x_param_max_inline_insns_auto);

  if (ptr->x_param_max_inline_insns_recursive_auto)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_recursive_auto",
             ptr->x_param_max_inline_insns_recursive_auto);

  if (ptr->x_param_max_inline_insns_recursive)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_recursive",
             ptr->x_param_max_inline_insns_recursive);

  if (ptr->x_param_max_inline_insns_single)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_single",
             ptr->x_param_max_inline_insns_single);

  if (ptr->x_param_max_inline_insns_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_size",
             ptr->x_param_max_inline_insns_size);

  if (ptr->x_param_max_inline_insns_small)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_insns_small",
             ptr->x_param_max_inline_insns_small);

  if (ptr->x_param_max_inline_recursive_depth_auto)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_recursive_depth_auto",
             ptr->x_param_max_inline_recursive_depth_auto);

  if (ptr->x_param_max_inline_recursive_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_inline_recursive_depth",
             ptr->x_param_max_inline_recursive_depth);

  if (ptr->x_param_max_isl_operations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_isl_operations",
             ptr->x_param_max_isl_operations);

  if (ptr->x_param_max_iterations_computation_cost)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_iterations_computation_cost",
             ptr->x_param_max_iterations_computation_cost);

  if (ptr->x_param_max_iterations_to_track)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_iterations_to_track",
             ptr->x_param_max_iterations_to_track);

  if (ptr->x_param_max_jump_thread_duplication_stmts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_jump_thread_duplication_stmts",
             ptr->x_param_max_jump_thread_duplication_stmts);

  if (ptr->x_param_max_last_value_rtl)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_last_value_rtl",
             ptr->x_param_max_last_value_rtl);

  if (ptr->x_param_max_loop_header_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_loop_header_insns",
             ptr->x_param_max_loop_header_insns);

  if (ptr->x_param_max_modulo_backtrack_attempts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_modulo_backtrack_attempts",
             ptr->x_param_max_modulo_backtrack_attempts);

  if (ptr->x_param_max_partial_antic_length)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_partial_antic_length",
             ptr->x_param_max_partial_antic_length);

  if (ptr->x_param_max_peel_branches)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_peel_branches",
             ptr->x_param_max_peel_branches);

  if (ptr->x_param_max_peel_times)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_peel_times",
             ptr->x_param_max_peel_times);

  if (ptr->x_param_max_peeled_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_peeled_insns",
             ptr->x_param_max_peeled_insns);

  if (ptr->x_param_max_pending_list_length)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_pending_list_length",
             ptr->x_param_max_pending_list_length);

  if (ptr->x_param_max_pipeline_region_blocks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_pipeline_region_blocks",
             ptr->x_param_max_pipeline_region_blocks);

  if (ptr->x_param_max_pipeline_region_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_pipeline_region_insns",
             ptr->x_param_max_pipeline_region_insns);

  if (ptr->x_param_max_pow_sqrt_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_pow_sqrt_depth",
             ptr->x_param_max_pow_sqrt_depth);

  if (ptr->x_param_max_predicted_iterations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_predicted_iterations",
             ptr->x_param_max_predicted_iterations);

  if (ptr->x_param_max_reload_search_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_reload_search_insns",
             ptr->x_param_max_reload_search_insns);

  if (ptr->x_param_max_rtl_if_conversion_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_insns",
             ptr->x_param_max_rtl_if_conversion_insns);

  if (ptr->x_param_max_rtl_if_conversion_predictable_cost)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_predictable_cost",
             ptr->x_param_max_rtl_if_conversion_predictable_cost);

  if (ptr->x_param_max_rtl_if_conversion_unpredictable_cost)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_unpredictable_cost",
             ptr->x_param_max_rtl_if_conversion_unpredictable_cost);

  if (ptr->x_param_max_sched_extend_regions_iters)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_sched_extend_regions_iters",
             ptr->x_param_max_sched_extend_regions_iters);

  if (ptr->x_param_max_sched_insn_conflict_delay)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_sched_insn_conflict_delay",
             ptr->x_param_max_sched_insn_conflict_delay);

  if (ptr->x_param_max_sched_ready_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_sched_ready_insns",
             ptr->x_param_max_sched_ready_insns);

  if (ptr->x_param_max_sched_region_blocks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_sched_region_blocks",
             ptr->x_param_max_sched_region_blocks);

  if (ptr->x_param_max_sched_region_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_sched_region_insns",
             ptr->x_param_max_sched_region_insns);

  if (ptr->x_param_max_slsr_candidate_scan)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_slsr_candidate_scan",
             ptr->x_param_max_slsr_candidate_scan);

  if (ptr->x_param_max_speculative_devirt_maydefs)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_speculative_devirt_maydefs",
             ptr->x_param_max_speculative_devirt_maydefs);

  if (ptr->x_param_max_stores_to_merge)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_stores_to_merge",
             ptr->x_param_max_stores_to_merge);

  if (ptr->x_param_max_stores_to_sink)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_stores_to_sink",
             ptr->x_param_max_stores_to_sink);

  if (ptr->x_param_max_tail_merge_comparisons)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_tail_merge_comparisons",
             ptr->x_param_max_tail_merge_comparisons);

  if (ptr->x_param_max_tail_merge_iterations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_tail_merge_iterations",
             ptr->x_param_max_tail_merge_iterations);

  if (ptr->x_param_max_tracked_strlens)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_tracked_strlens",
             ptr->x_param_max_tracked_strlens);

  if (ptr->x_param_max_tree_if_conversion_phi_args)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_tree_if_conversion_phi_args",
             ptr->x_param_max_tree_if_conversion_phi_args);

  if (ptr->x_param_max_unroll_times)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_unroll_times",
             ptr->x_param_max_unroll_times);

  if (ptr->x_param_max_unrolled_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_unrolled_insns",
             ptr->x_param_max_unrolled_insns);

  if (ptr->x_param_max_unswitch_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_unswitch_insns",
             ptr->x_param_max_unswitch_insns);

  if (ptr->x_param_max_variable_expansions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_variable_expansions",
             ptr->x_param_max_variable_expansions);

  if (ptr->x_param_max_vartrack_expr_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_vartrack_expr_depth",
             ptr->x_param_max_vartrack_expr_depth);

  if (ptr->x_param_max_vartrack_reverse_op_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_vartrack_reverse_op_size",
             ptr->x_param_max_vartrack_reverse_op_size);

  if (ptr->x_param_max_vartrack_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_vartrack_size",
             ptr->x_param_max_vartrack_size);

  if (ptr->x_param_max_vrp_switch_assertions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_max_vrp_switch_assertions",
             ptr->x_param_max_vrp_switch_assertions);

  if (ptr->x_param_min_crossjump_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_crossjump_insns",
             ptr->x_param_min_crossjump_insns);

  if (ptr->x_param_min_inline_recursive_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_inline_recursive_probability",
             ptr->x_param_min_inline_recursive_probability);

  if (ptr->x_param_min_insn_to_prefetch_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_insn_to_prefetch_ratio",
             ptr->x_param_min_insn_to_prefetch_ratio);

  if (ptr->x_param_min_loop_cond_split_prob)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_loop_cond_split_prob",
             ptr->x_param_min_loop_cond_split_prob);

  if (ptr->x_param_min_pagesize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_pagesize",
             ptr->x_param_min_pagesize);

  if (ptr->x_param_min_size_for_stack_sharing)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_size_for_stack_sharing",
             ptr->x_param_min_size_for_stack_sharing);

  if (ptr->x_param_min_spec_prob)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_spec_prob",
             ptr->x_param_min_spec_prob);

  if (ptr->x_param_min_vect_loop_bound)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_min_vect_loop_bound",
             ptr->x_param_min_vect_loop_bound);

  if (ptr->x_param_modref_max_accesses)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_accesses",
             ptr->x_param_modref_max_accesses);

  if (ptr->x_param_modref_max_adjustments)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_adjustments",
             ptr->x_param_modref_max_adjustments);

  if (ptr->x_param_modref_max_bases)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_bases",
             ptr->x_param_modref_max_bases);

  if (ptr->x_param_modref_max_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_depth",
             ptr->x_param_modref_max_depth);

  if (ptr->x_param_modref_max_escape_points)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_escape_points",
             ptr->x_param_modref_max_escape_points);

  if (ptr->x_param_modref_max_refs)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_refs",
             ptr->x_param_modref_max_refs);

  if (ptr->x_param_modref_max_tests)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_modref_max_tests",
             ptr->x_param_modref_max_tests);

  if (ptr->x_param_parloops_chunk_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_parloops_chunk_size",
             ptr->x_param_parloops_chunk_size);

  if (ptr->x_param_parloops_min_per_thread)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_parloops_min_per_thread",
             ptr->x_param_parloops_min_per_thread);

  if (ptr->x_param_parloops_schedule)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_parloops_schedule",
             ptr->x_param_parloops_schedule);

  if (ptr->x_param_partial_inlining_entry_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_partial_inlining_entry_probability",
             ptr->x_param_partial_inlining_entry_probability);

  if (ptr->x_param_predictable_branch_outcome)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_predictable_branch_outcome",
             ptr->x_param_predictable_branch_outcome);

  if (ptr->x_param_prefetch_dynamic_strides)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_prefetch_dynamic_strides",
             ptr->x_param_prefetch_dynamic_strides);

  if (ptr->x_param_prefetch_latency)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_prefetch_latency",
             ptr->x_param_prefetch_latency);

  if (ptr->x_param_prefetch_min_insn_to_mem_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_prefetch_min_insn_to_mem_ratio",
             ptr->x_param_prefetch_min_insn_to_mem_ratio);

  if (ptr->x_param_prefetch_minimum_stride)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_prefetch_minimum_stride",
             ptr->x_param_prefetch_minimum_stride);

  if (ptr->x_param_ranger_logical_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ranger_logical_depth",
             ptr->x_param_ranger_logical_depth);

  if (ptr->x_param_relation_block_limit)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_relation_block_limit",
             ptr->x_param_relation_block_limit);

  if (ptr->x_param_rpo_vn_max_loop_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_rpo_vn_max_loop_depth",
             ptr->x_param_rpo_vn_max_loop_depth);

  if (ptr->x_param_sccvn_max_alias_queries_per_access)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sccvn_max_alias_queries_per_access",
             ptr->x_param_sccvn_max_alias_queries_per_access);

  if (ptr->x_param_scev_max_expr_complexity)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_scev_max_expr_complexity",
             ptr->x_param_scev_max_expr_complexity);

  if (ptr->x_param_scev_max_expr_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_scev_max_expr_size",
             ptr->x_param_scev_max_expr_size);

  if (ptr->x_param_sched_autopref_queue_depth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sched_autopref_queue_depth",
             ptr->x_param_sched_autopref_queue_depth);

  if (ptr->x_param_sched_mem_true_dep_cost)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sched_mem_true_dep_cost",
             ptr->x_param_sched_mem_true_dep_cost);

  if (ptr->x_param_sched_pressure_algorithm)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sched_pressure_algorithm",
             ptr->x_param_sched_pressure_algorithm);

  if (ptr->x_param_sched_spec_prob_cutoff)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sched_spec_prob_cutoff",
             ptr->x_param_sched_spec_prob_cutoff);

  if (ptr->x_param_sched_state_edge_prob_cutoff)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sched_state_edge_prob_cutoff",
             ptr->x_param_sched_state_edge_prob_cutoff);

  if (ptr->x_param_selsched_insns_to_rename)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_selsched_insns_to_rename",
             ptr->x_param_selsched_insns_to_rename);

  if (ptr->x_param_selsched_max_lookahead)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_selsched_max_lookahead",
             ptr->x_param_selsched_max_lookahead);

  if (ptr->x_param_selsched_max_sched_times)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_selsched_max_sched_times",
             ptr->x_param_selsched_max_sched_times);

  if (ptr->x_param_simultaneous_prefetches)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_simultaneous_prefetches",
             ptr->x_param_simultaneous_prefetches);

  if (ptr->x_param_sink_frequency_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sink_frequency_threshold",
             ptr->x_param_sink_frequency_threshold);

  if (ptr->x_param_sms_dfa_history)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sms_dfa_history",
             ptr->x_param_sms_dfa_history);

  if (ptr->x_param_sms_loop_average_count_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sms_loop_average_count_threshold",
             ptr->x_param_sms_loop_average_count_threshold);

  if (ptr->x_param_sms_max_ii_factor)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sms_max_ii_factor",
             ptr->x_param_sms_max_ii_factor);

  if (ptr->x_param_sms_min_sc)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sms_min_sc",
             ptr->x_param_sms_min_sc);

  if (ptr->x_param_sra_max_propagations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sra_max_propagations",
             ptr->x_param_sra_max_propagations);

  if (ptr->x_param_sra_max_scalarization_size_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sra_max_scalarization_size_size",
             ptr->x_param_sra_max_scalarization_size_size);

  if (ptr->x_param_sra_max_scalarization_size_speed)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_sra_max_scalarization_size_speed",
             ptr->x_param_sra_max_scalarization_size_speed);

  if (ptr->x_param_ssa_name_def_chain_limit)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ssa_name_def_chain_limit",
             ptr->x_param_ssa_name_def_chain_limit);

  if (ptr->x_param_ssp_buffer_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_ssp_buffer_size",
             ptr->x_param_ssp_buffer_size);

  if (ptr->x_param_stack_clash_protection_guard_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_stack_clash_protection_guard_size",
             ptr->x_param_stack_clash_protection_guard_size);

  if (ptr->x_param_stack_clash_protection_probe_interval)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_stack_clash_protection_probe_interval",
             ptr->x_param_stack_clash_protection_probe_interval);

  if (ptr->x_param_store_merging_allow_unaligned)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_store_merging_allow_unaligned",
             ptr->x_param_store_merging_allow_unaligned);

  if (ptr->x_param_store_merging_max_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_store_merging_max_size",
             ptr->x_param_store_merging_max_size);

  if (ptr->x_param_switch_conversion_branch_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_switch_conversion_branch_ratio",
             ptr->x_param_switch_conversion_branch_ratio);

  if (ptr->x_param_tm_max_aggregate_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tm_max_aggregate_size",
             ptr->x_param_tm_max_aggregate_size);

  if (ptr->x_param_tracer_dynamic_coverage_feedback)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_dynamic_coverage_feedback",
             ptr->x_param_tracer_dynamic_coverage_feedback);

  if (ptr->x_param_tracer_dynamic_coverage)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_dynamic_coverage",
             ptr->x_param_tracer_dynamic_coverage);

  if (ptr->x_param_tracer_max_code_growth)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_max_code_growth",
             ptr->x_param_tracer_max_code_growth);

  if (ptr->x_param_tracer_min_branch_probability_feedback)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_probability_feedback",
             ptr->x_param_tracer_min_branch_probability_feedback);

  if (ptr->x_param_tracer_min_branch_probability)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_probability",
             ptr->x_param_tracer_min_branch_probability);

  if (ptr->x_param_tracer_min_branch_ratio)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_ratio",
             ptr->x_param_tracer_min_branch_ratio);

  if (ptr->x_param_tree_reassoc_width)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_tree_reassoc_width",
             ptr->x_param_tree_reassoc_width);

  if (ptr->x_param_uninit_control_dep_attempts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_uninit_control_dep_attempts",
             ptr->x_param_uninit_control_dep_attempts);

  if (ptr->x_param_uninlined_function_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_uninlined_function_insns",
             ptr->x_param_uninlined_function_insns);

  if (ptr->x_param_uninlined_function_time)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_uninlined_function_time",
             ptr->x_param_uninlined_function_time);

  if (ptr->x_param_uninlined_function_thunk_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_uninlined_function_thunk_insns",
             ptr->x_param_uninlined_function_thunk_insns);

  if (ptr->x_param_uninlined_function_thunk_time)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_uninlined_function_thunk_time",
             ptr->x_param_uninlined_function_thunk_time);

  if (ptr->x_param_unlikely_bb_count_fraction)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_unlikely_bb_count_fraction",
             ptr->x_param_unlikely_bb_count_fraction);

  if (ptr->x_param_unroll_jam_max_unroll)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_unroll_jam_max_unroll",
             ptr->x_param_unroll_jam_max_unroll);

  if (ptr->x_param_unroll_jam_min_percent)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_unroll_jam_min_percent",
             ptr->x_param_unroll_jam_min_percent);

  if (ptr->x_param_use_after_scope_direct_emission_threshold)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_use_after_scope_direct_emission_threshold",
             ptr->x_param_use_after_scope_direct_emission_threshold);

  if (ptr->x_param_vect_epilogues_nomask)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_epilogues_nomask",
             ptr->x_param_vect_epilogues_nomask);

  if (ptr->x_param_vect_induction_float)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_induction_float",
             ptr->x_param_vect_induction_float);

  if (ptr->x_param_vect_inner_loop_cost_factor)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_inner_loop_cost_factor",
             ptr->x_param_vect_inner_loop_cost_factor);

  if (ptr->x_param_vect_max_peeling_for_alignment)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_max_peeling_for_alignment",
             ptr->x_param_vect_max_peeling_for_alignment);

  if (ptr->x_param_vect_max_version_for_alias_checks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_max_version_for_alias_checks",
             ptr->x_param_vect_max_version_for_alias_checks);

  if (ptr->x_param_vect_max_version_for_alignment_checks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_max_version_for_alignment_checks",
             ptr->x_param_vect_max_version_for_alignment_checks);

  if (ptr->x_param_vect_partial_vector_usage)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "param_vect_partial_vector_usage",
             ptr->x_param_vect_partial_vector_usage);

  if (ptr->x_flag_sched_stalled_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_stalled_insns",
             ptr->x_flag_sched_stalled_insns);

  if (ptr->x_flag_sched_stalled_insns_dep)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_stalled_insns_dep",
             ptr->x_flag_sched_stalled_insns_dep);

  if (ptr->x_flag_tree_parallelize_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_parallelize_loops",
             ptr->x_flag_tree_parallelize_loops);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "param_evrp_mode",
           (int) ptr->x_param_evrp_mode);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "param_ranger_debug",
           (int) ptr->x_param_ranger_debug);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "param_threader_debug",
           (int) ptr->x_param_threader_debug);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "param_vrp1_mode",
           (int) ptr->x_param_vrp1_mode);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "param_vrp2_mode",
           (int) ptr->x_param_vrp2_mode);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_excess_precision",
           (int) ptr->x_flag_excess_precision);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_fp_contract_mode",
           (int) ptr->x_flag_fp_contract_mode);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_ira_algorithm",
           (int) ptr->x_flag_ira_algorithm);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_ira_region",
           (int) ptr->x_flag_ira_region);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_live_patching",
           (int) ptr->x_flag_live_patching);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_reorder_blocks_algorithm",
           (int) ptr->x_flag_reorder_blocks_algorithm);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_simd_cost_model",
           (int) ptr->x_flag_simd_cost_model);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_stack_reuse",
           (int) ptr->x_flag_stack_reuse);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_auto_var_init",
           (int) ptr->x_flag_auto_var_init);

  fprintf (file, "%*s%s (%#x)\n",
           indent_to, "",
           "flag_vect_cost_model",
           (int) ptr->x_flag_vect_cost_model);

  if (ptr->x_optimize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "optimize",
             ptr->x_optimize);

  if (ptr->x_optimize_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "optimize_size",
             ptr->x_optimize_size);

  if (ptr->x_optimize_debug)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "optimize_debug",
             ptr->x_optimize_debug);

  if (ptr->x_optimize_fast)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "optimize_fast",
             ptr->x_optimize_fast);

  if (ptr->x_warn_inline)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "warn_inline",
             ptr->x_warn_inline);

  if (ptr->x_flag_aggressive_loop_optimizations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_aggressive_loop_optimizations",
             ptr->x_flag_aggressive_loop_optimizations);

  if (ptr->x_flag_align_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_align_functions",
             ptr->x_flag_align_functions);

  if (ptr->x_flag_align_jumps)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_align_jumps",
             ptr->x_flag_align_jumps);

  if (ptr->x_flag_align_labels)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_align_labels",
             ptr->x_flag_align_labels);

  if (ptr->x_flag_align_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_align_loops",
             ptr->x_flag_align_loops);

  if (ptr->x_flag_allocation_dce)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_allocation_dce",
             ptr->x_flag_allocation_dce);

  if (ptr->x_flag_store_data_races)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_store_data_races",
             ptr->x_flag_store_data_races);

  if (ptr->x_flag_associative_math)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_associative_math",
             ptr->x_flag_associative_math);

  if (ptr->x_flag_asynchronous_unwind_tables)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_asynchronous_unwind_tables",
             ptr->x_flag_asynchronous_unwind_tables);

  if (ptr->x_flag_auto_inc_dec)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_auto_inc_dec",
             ptr->x_flag_auto_inc_dec);

  if (ptr->x_flag_bit_tests)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_bit_tests",
             ptr->x_flag_bit_tests);

  if (ptr->x_flag_branch_on_count_reg)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_branch_on_count_reg",
             ptr->x_flag_branch_on_count_reg);

  if (ptr->x_flag_branch_probabilities)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_branch_probabilities",
             ptr->x_flag_branch_probabilities);

  if (ptr->x_flag_caller_saves)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_caller_saves",
             ptr->x_flag_caller_saves);

  if (ptr->x_flag_code_hoisting)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_code_hoisting",
             ptr->x_flag_code_hoisting);

  if (ptr->x_flag_combine_stack_adjustments)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_combine_stack_adjustments",
             ptr->x_flag_combine_stack_adjustments);

  if (ptr->x_flag_compare_elim_after_reload)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_compare_elim_after_reload",
             ptr->x_flag_compare_elim_after_reload);

  if (ptr->x_flag_conserve_stack)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_conserve_stack",
             ptr->x_flag_conserve_stack);

  if (ptr->x_flag_cprop_registers)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_cprop_registers",
             ptr->x_flag_cprop_registers);

  if (ptr->x_flag_crossjumping)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_crossjumping",
             ptr->x_flag_crossjumping);

  if (ptr->x_flag_cse_follow_jumps)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_cse_follow_jumps",
             ptr->x_flag_cse_follow_jumps);

  if (ptr->x_flag_cx_fortran_rules)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_cx_fortran_rules",
             ptr->x_flag_cx_fortran_rules);

  if (ptr->x_flag_cx_limited_range)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_cx_limited_range",
             ptr->x_flag_cx_limited_range);

  if (ptr->x_flag_dce)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_dce",
             ptr->x_flag_dce);

  if (ptr->x_flag_defer_pop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_defer_pop",
             ptr->x_flag_defer_pop);

  if (ptr->x_flag_delayed_branch)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_delayed_branch",
             ptr->x_flag_delayed_branch);

  if (ptr->x_flag_delete_dead_exceptions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_delete_dead_exceptions",
             ptr->x_flag_delete_dead_exceptions);

  if (ptr->x_flag_delete_null_pointer_checks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_delete_null_pointer_checks",
             ptr->x_flag_delete_null_pointer_checks);

  if (ptr->x_flag_devirtualize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_devirtualize",
             ptr->x_flag_devirtualize);

  if (ptr->x_flag_devirtualize_speculatively)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_devirtualize_speculatively",
             ptr->x_flag_devirtualize_speculatively);

  if (ptr->x_flag_dse)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_dse",
             ptr->x_flag_dse);

  if (ptr->x_flag_early_inlining)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_early_inlining",
             ptr->x_flag_early_inlining);

  if (ptr->x_flag_exceptions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_exceptions",
             ptr->x_flag_exceptions);

  if (ptr->x_flag_expensive_optimizations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_expensive_optimizations",
             ptr->x_flag_expensive_optimizations);

  if (ptr->x_flag_finite_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_finite_loops",
             ptr->x_flag_finite_loops);

  if (ptr->x_flag_finite_math_only)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_finite_math_only",
             ptr->x_flag_finite_math_only);

  if (ptr->x_flag_float_store)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_float_store",
             ptr->x_flag_float_store);

  if (ptr->x_flag_fold_simple_inlines)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_fold_simple_inlines",
             ptr->x_flag_fold_simple_inlines);

  if (ptr->x_flag_forward_propagate)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_forward_propagate",
             ptr->x_flag_forward_propagate);

  if (ptr->x_flag_fp_int_builtin_inexact)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_fp_int_builtin_inexact",
             ptr->x_flag_fp_int_builtin_inexact);

  if (ptr->x_flag_no_function_cse)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_no_function_cse",
             ptr->x_flag_no_function_cse);

  if (ptr->x_flag_gcse)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_gcse",
             ptr->x_flag_gcse);

  if (ptr->x_flag_gcse_after_reload)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_gcse_after_reload",
             ptr->x_flag_gcse_after_reload);

  if (ptr->x_flag_gcse_las)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_gcse_las",
             ptr->x_flag_gcse_las);

  if (ptr->x_flag_gcse_lm)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_gcse_lm",
             ptr->x_flag_gcse_lm);

  if (ptr->x_flag_gcse_sm)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_gcse_sm",
             ptr->x_flag_gcse_sm);

  if (ptr->x_flag_graphite)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_graphite",
             ptr->x_flag_graphite);

  if (ptr->x_flag_graphite_identity)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_graphite_identity",
             ptr->x_flag_graphite_identity);

  if (ptr->x_flag_guess_branch_prob)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_guess_branch_prob",
             ptr->x_flag_guess_branch_prob);

  if (ptr->x_flag_harden_compares)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_harden_compares",
             ptr->x_flag_harden_compares);

  if (ptr->x_flag_harden_conditional_branches)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_harden_conditional_branches",
             ptr->x_flag_harden_conditional_branches);

  if (ptr->x_flag_hoist_adjacent_loads)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_hoist_adjacent_loads",
             ptr->x_flag_hoist_adjacent_loads);

  if (ptr->x_flag_if_conversion)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_if_conversion",
             ptr->x_flag_if_conversion);

  if (ptr->x_flag_if_conversion2)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_if_conversion2",
             ptr->x_flag_if_conversion2);

  if (ptr->x_flag_indirect_inlining)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_indirect_inlining",
             ptr->x_flag_indirect_inlining);

  if (ptr->x_flag_no_inline)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_no_inline",
             ptr->x_flag_no_inline);

  if (ptr->x_flag_inline_atomics)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_inline_atomics",
             ptr->x_flag_inline_atomics);

  if (ptr->x_flag_inline_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_inline_functions",
             ptr->x_flag_inline_functions);

  if (ptr->x_flag_inline_functions_called_once)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_inline_functions_called_once",
             ptr->x_flag_inline_functions_called_once);

  if (ptr->x_flag_inline_small_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_inline_small_functions",
             ptr->x_flag_inline_small_functions);

  if (ptr->x_flag_ipa_bit_cp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_bit_cp",
             ptr->x_flag_ipa_bit_cp);

  if (ptr->x_flag_ipa_cp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_cp",
             ptr->x_flag_ipa_cp);

  if (ptr->x_flag_ipa_cp_clone)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_cp_clone",
             ptr->x_flag_ipa_cp_clone);

  if (ptr->x_flag_ipa_icf)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_icf",
             ptr->x_flag_ipa_icf);

  if (ptr->x_flag_ipa_icf_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_icf_functions",
             ptr->x_flag_ipa_icf_functions);

  if (ptr->x_flag_ipa_icf_variables)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_icf_variables",
             ptr->x_flag_ipa_icf_variables);

  if (ptr->x_flag_ipa_modref)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_modref",
             ptr->x_flag_ipa_modref);

  if (ptr->x_flag_ipa_profile)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_profile",
             ptr->x_flag_ipa_profile);

  if (ptr->x_flag_ipa_pta)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_pta",
             ptr->x_flag_ipa_pta);

  if (ptr->x_flag_ipa_pure_const)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_pure_const",
             ptr->x_flag_ipa_pure_const);

  if (ptr->x_flag_ipa_ra)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_ra",
             ptr->x_flag_ipa_ra);

  if (ptr->x_flag_ipa_reference)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_reference",
             ptr->x_flag_ipa_reference);

  if (ptr->x_flag_ipa_reference_addressable)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_reference_addressable",
             ptr->x_flag_ipa_reference_addressable);

  if (ptr->x_flag_ipa_sra)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_sra",
             ptr->x_flag_ipa_sra);

  if (ptr->x_flag_ipa_stack_alignment)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_stack_alignment",
             ptr->x_flag_ipa_stack_alignment);

  if (ptr->x_flag_ipa_strict_aliasing)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_strict_aliasing",
             ptr->x_flag_ipa_strict_aliasing);

  if (ptr->x_flag_ipa_vrp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ipa_vrp",
             ptr->x_flag_ipa_vrp);

  if (ptr->x_flag_ira_hoist_pressure)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ira_hoist_pressure",
             ptr->x_flag_ira_hoist_pressure);

  if (ptr->x_flag_ira_loop_pressure)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ira_loop_pressure",
             ptr->x_flag_ira_loop_pressure);

  if (ptr->x_flag_ira_share_save_slots)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ira_share_save_slots",
             ptr->x_flag_ira_share_save_slots);

  if (ptr->x_flag_ira_share_spill_slots)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ira_share_spill_slots",
             ptr->x_flag_ira_share_spill_slots);

  if (ptr->x_flag_isolate_erroneous_paths_attribute)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_isolate_erroneous_paths_attribute",
             ptr->x_flag_isolate_erroneous_paths_attribute);

  if (ptr->x_flag_isolate_erroneous_paths_dereference)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_isolate_erroneous_paths_dereference",
             ptr->x_flag_isolate_erroneous_paths_dereference);

  if (ptr->x_flag_ivopts)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ivopts",
             ptr->x_flag_ivopts);

  if (ptr->x_flag_jump_tables)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_jump_tables",
             ptr->x_flag_jump_tables);

  if (ptr->x_flag_keep_gc_roots_live)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_keep_gc_roots_live",
             ptr->x_flag_keep_gc_roots_live);

  if (ptr->x_flag_lifetime_dse)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_lifetime_dse",
             ptr->x_flag_lifetime_dse);

  if (ptr->x_flag_limit_function_alignment)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_limit_function_alignment",
             ptr->x_flag_limit_function_alignment);

  if (ptr->x_flag_live_range_shrinkage)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_live_range_shrinkage",
             ptr->x_flag_live_range_shrinkage);

  if (ptr->x_flag_loop_interchange)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_loop_interchange",
             ptr->x_flag_loop_interchange);

  if (ptr->x_flag_loop_nest_optimize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_loop_nest_optimize",
             ptr->x_flag_loop_nest_optimize);

  if (ptr->x_flag_loop_parallelize_all)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_loop_parallelize_all",
             ptr->x_flag_loop_parallelize_all);

  if (ptr->x_flag_unroll_jam)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unroll_jam",
             ptr->x_flag_unroll_jam);

  if (ptr->x_flag_lra_remat)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_lra_remat",
             ptr->x_flag_lra_remat);

  if (ptr->x_flag_errno_math)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_errno_math",
             ptr->x_flag_errno_math);

  if (ptr->x_flag_modulo_sched)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_modulo_sched",
             ptr->x_flag_modulo_sched);

  if (ptr->x_flag_modulo_sched_allow_regmoves)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_modulo_sched_allow_regmoves",
             ptr->x_flag_modulo_sched_allow_regmoves);

  if (ptr->x_flag_move_loop_invariants)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_move_loop_invariants",
             ptr->x_flag_move_loop_invariants);

  if (ptr->x_flag_move_loop_stores)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_move_loop_stores",
             ptr->x_flag_move_loop_stores);

  if (ptr->x_flag_non_call_exceptions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_non_call_exceptions",
             ptr->x_flag_non_call_exceptions);

  if (ptr->x_flag_nothrow_opt)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_nothrow_opt",
             ptr->x_flag_nothrow_opt);

  if (ptr->x_flag_omit_frame_pointer)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_omit_frame_pointer",
             ptr->x_flag_omit_frame_pointer);

  if (ptr->x_flag_opt_info)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_opt_info",
             ptr->x_flag_opt_info);

  if (ptr->x_flag_optimize_sibling_calls)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_optimize_sibling_calls",
             ptr->x_flag_optimize_sibling_calls);

  if (ptr->x_flag_optimize_strlen)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_optimize_strlen",
             ptr->x_flag_optimize_strlen);

  if (ptr->x_flag_pack_struct)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_pack_struct",
             ptr->x_flag_pack_struct);

  if (ptr->x_flag_partial_inlining)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_partial_inlining",
             ptr->x_flag_partial_inlining);

  if (ptr->x_flag_peel_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_peel_loops",
             ptr->x_flag_peel_loops);

  if (ptr->x_flag_no_peephole)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_no_peephole",
             ptr->x_flag_no_peephole);

  if (ptr->x_flag_peephole2)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_peephole2",
             ptr->x_flag_peephole2);

  if (ptr->x_flag_plt)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_plt",
             ptr->x_flag_plt);

  if (ptr->x_flag_predictive_commoning)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_predictive_commoning",
             ptr->x_flag_predictive_commoning);

  if (ptr->x_flag_prefetch_loop_arrays)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_prefetch_loop_arrays",
             ptr->x_flag_prefetch_loop_arrays);

  if (ptr->x_flag_printf_return_value)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_printf_return_value",
             ptr->x_flag_printf_return_value);

  if (ptr->x_flag_profile_partial_training)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_profile_partial_training",
             ptr->x_flag_profile_partial_training);

  if (ptr->x_flag_profile_reorder_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_profile_reorder_functions",
             ptr->x_flag_profile_reorder_functions);

  if (ptr->x_flag_reciprocal_math)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_reciprocal_math",
             ptr->x_flag_reciprocal_math);

  if (ptr->x_flag_ree)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ree",
             ptr->x_flag_ree);

  if (ptr->x_flag_pcc_struct_return)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_pcc_struct_return",
             ptr->x_flag_pcc_struct_return);

  if (ptr->x_flag_rename_registers)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_rename_registers",
             ptr->x_flag_rename_registers);

  if (ptr->x_flag_reorder_blocks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_reorder_blocks",
             ptr->x_flag_reorder_blocks);

  if (ptr->x_flag_reorder_blocks_and_partition)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_reorder_blocks_and_partition",
             ptr->x_flag_reorder_blocks_and_partition);

  if (ptr->x_flag_reorder_functions)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_reorder_functions",
             ptr->x_flag_reorder_functions);

  if (ptr->x_flag_rerun_cse_after_loop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_rerun_cse_after_loop",
             ptr->x_flag_rerun_cse_after_loop);

  if (ptr->x_flag_resched_modulo_sched)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_resched_modulo_sched",
             ptr->x_flag_resched_modulo_sched);

  if (ptr->x_flag_rounding_math)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_rounding_math",
             ptr->x_flag_rounding_math);

  if (ptr->x_flag_rtti)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_rtti",
             ptr->x_flag_rtti);

  if (ptr->x_flag_save_optimization_record)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_save_optimization_record",
             ptr->x_flag_save_optimization_record);

  if (ptr->x_flag_sched_critical_path_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_critical_path_heuristic",
             ptr->x_flag_sched_critical_path_heuristic);

  if (ptr->x_flag_sched_dep_count_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_dep_count_heuristic",
             ptr->x_flag_sched_dep_count_heuristic);

  if (ptr->x_flag_sched_group_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_group_heuristic",
             ptr->x_flag_sched_group_heuristic);

  if (ptr->x_flag_schedule_interblock)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_interblock",
             ptr->x_flag_schedule_interblock);

  if (ptr->x_flag_sched_last_insn_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_last_insn_heuristic",
             ptr->x_flag_sched_last_insn_heuristic);

  if (ptr->x_flag_sched_pressure)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_pressure",
             ptr->x_flag_sched_pressure);

  if (ptr->x_flag_sched_rank_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_rank_heuristic",
             ptr->x_flag_sched_rank_heuristic);

  if (ptr->x_flag_schedule_speculative)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_speculative",
             ptr->x_flag_schedule_speculative);

  if (ptr->x_flag_sched_spec_insn_heuristic)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched_spec_insn_heuristic",
             ptr->x_flag_sched_spec_insn_heuristic);

  if (ptr->x_flag_schedule_speculative_load)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_speculative_load",
             ptr->x_flag_schedule_speculative_load);

  if (ptr->x_flag_schedule_speculative_load_dangerous)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_speculative_load_dangerous",
             ptr->x_flag_schedule_speculative_load_dangerous);

  if (ptr->x_flag_sched2_use_superblocks)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sched2_use_superblocks",
             ptr->x_flag_sched2_use_superblocks);

  if (ptr->x_flag_schedule_fusion)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_fusion",
             ptr->x_flag_schedule_fusion);

  if (ptr->x_flag_schedule_insns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_insns",
             ptr->x_flag_schedule_insns);

  if (ptr->x_flag_schedule_insns_after_reload)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_schedule_insns_after_reload",
             ptr->x_flag_schedule_insns_after_reload);

  if (ptr->x_flag_section_anchors)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_section_anchors",
             ptr->x_flag_section_anchors);

  if (ptr->x_flag_sel_sched_pipelining)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sel_sched_pipelining",
             ptr->x_flag_sel_sched_pipelining);

  if (ptr->x_flag_sel_sched_pipelining_outer_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sel_sched_pipelining_outer_loops",
             ptr->x_flag_sel_sched_pipelining_outer_loops);

  if (ptr->x_flag_sel_sched_reschedule_pipelined)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_sel_sched_reschedule_pipelined",
             ptr->x_flag_sel_sched_reschedule_pipelined);

  if (ptr->x_flag_selective_scheduling)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_selective_scheduling",
             ptr->x_flag_selective_scheduling);

  if (ptr->x_flag_selective_scheduling2)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_selective_scheduling2",
             ptr->x_flag_selective_scheduling2);

  if (ptr->x_flag_semantic_interposition)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_semantic_interposition",
             ptr->x_flag_semantic_interposition);

  if (ptr->x_flag_short_enums)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_short_enums",
             ptr->x_flag_short_enums);

  if (ptr->x_flag_short_wchar)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_short_wchar",
             ptr->x_flag_short_wchar);

  if (ptr->x_flag_shrink_wrap)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_shrink_wrap",
             ptr->x_flag_shrink_wrap);

  if (ptr->x_flag_shrink_wrap_separate)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_shrink_wrap_separate",
             ptr->x_flag_shrink_wrap_separate);

  if (ptr->x_flag_signaling_nans)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_signaling_nans",
             ptr->x_flag_signaling_nans);

  if (ptr->x_flag_signed_zeros)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_signed_zeros",
             ptr->x_flag_signed_zeros);

  if (ptr->x_flag_single_precision_constant)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_single_precision_constant",
             ptr->x_flag_single_precision_constant);

  if (ptr->x_flag_split_ivs_in_unroller)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_split_ivs_in_unroller",
             ptr->x_flag_split_ivs_in_unroller);

  if (ptr->x_flag_split_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_split_loops",
             ptr->x_flag_split_loops);

  if (ptr->x_flag_split_paths)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_split_paths",
             ptr->x_flag_split_paths);

  if (ptr->x_flag_split_wide_types)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_split_wide_types",
             ptr->x_flag_split_wide_types);

  if (ptr->x_flag_split_wide_types_early)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_split_wide_types_early",
             ptr->x_flag_split_wide_types_early);

  if (ptr->x_flag_ssa_backprop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ssa_backprop",
             ptr->x_flag_ssa_backprop);

  if (ptr->x_flag_ssa_phiopt)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_ssa_phiopt",
             ptr->x_flag_ssa_phiopt);

  if (ptr->x_flag_stack_clash_protection)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_stack_clash_protection",
             ptr->x_flag_stack_clash_protection);

  if (ptr->x_flag_stack_protect)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_stack_protect",
             ptr->x_flag_stack_protect);

  if (ptr->x_flag_stdarg_opt)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_stdarg_opt",
             ptr->x_flag_stdarg_opt);

  if (ptr->x_flag_store_merging)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_store_merging",
             ptr->x_flag_store_merging);

  if (ptr->x_flag_strict_aliasing)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_strict_aliasing",
             ptr->x_flag_strict_aliasing);

  if (ptr->x_flag_strict_enums)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_strict_enums",
             ptr->x_flag_strict_enums);

  if (ptr->x_flag_strict_volatile_bitfields)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_strict_volatile_bitfields",
             ptr->x_flag_strict_volatile_bitfields);

  if (ptr->x_flag_thread_jumps)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_thread_jumps",
             ptr->x_flag_thread_jumps);

  if (ptr->x_flag_threadsafe_statics)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_threadsafe_statics",
             ptr->x_flag_threadsafe_statics);

  if (ptr->x_flag_toplevel_reorder)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_toplevel_reorder",
             ptr->x_flag_toplevel_reorder);

  if (ptr->x_flag_tracer)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tracer",
             ptr->x_flag_tracer);

  if (ptr->x_flag_trapping_math)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_trapping_math",
             ptr->x_flag_trapping_math);

  if (ptr->x_flag_trapv)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_trapv",
             ptr->x_flag_trapv);

  if (ptr->x_flag_tree_bit_ccp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_bit_ccp",
             ptr->x_flag_tree_bit_ccp);

  if (ptr->x_flag_tree_builtin_call_dce)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_builtin_call_dce",
             ptr->x_flag_tree_builtin_call_dce);

  if (ptr->x_flag_tree_ccp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_ccp",
             ptr->x_flag_tree_ccp);

  if (ptr->x_flag_tree_ch)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_ch",
             ptr->x_flag_tree_ch);

  if (ptr->x_flag_tree_coalesce_vars)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_coalesce_vars",
             ptr->x_flag_tree_coalesce_vars);

  if (ptr->x_flag_tree_copy_prop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_copy_prop",
             ptr->x_flag_tree_copy_prop);

  if (ptr->x_flag_tree_cselim)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_cselim",
             ptr->x_flag_tree_cselim);

  if (ptr->x_flag_tree_dce)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_dce",
             ptr->x_flag_tree_dce);

  if (ptr->x_flag_tree_dom)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_dom",
             ptr->x_flag_tree_dom);

  if (ptr->x_flag_tree_dse)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_dse",
             ptr->x_flag_tree_dse);

  if (ptr->x_flag_tree_forwprop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_forwprop",
             ptr->x_flag_tree_forwprop);

  if (ptr->x_flag_tree_fre)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_fre",
             ptr->x_flag_tree_fre);

  if (ptr->x_flag_tree_loop_distribute_patterns)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_distribute_patterns",
             ptr->x_flag_tree_loop_distribute_patterns);

  if (ptr->x_flag_tree_loop_distribution)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_distribution",
             ptr->x_flag_tree_loop_distribution);

  if (ptr->x_flag_tree_loop_if_convert)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_if_convert",
             ptr->x_flag_tree_loop_if_convert);

  if (ptr->x_flag_tree_loop_im)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_im",
             ptr->x_flag_tree_loop_im);

  if (ptr->x_flag_tree_loop_ivcanon)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_ivcanon",
             ptr->x_flag_tree_loop_ivcanon);

  if (ptr->x_flag_tree_loop_optimize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_optimize",
             ptr->x_flag_tree_loop_optimize);

  if (ptr->x_flag_tree_loop_vectorize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_loop_vectorize",
             ptr->x_flag_tree_loop_vectorize);

  if (ptr->x_flag_tree_live_range_split)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_live_range_split",
             ptr->x_flag_tree_live_range_split);

  if (ptr->x_flag_tree_partial_pre)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_partial_pre",
             ptr->x_flag_tree_partial_pre);

  if (ptr->x_flag_tree_phiprop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_phiprop",
             ptr->x_flag_tree_phiprop);

  if (ptr->x_flag_tree_pre)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_pre",
             ptr->x_flag_tree_pre);

  if (ptr->x_flag_tree_pta)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_pta",
             ptr->x_flag_tree_pta);

  if (ptr->x_flag_tree_reassoc)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_reassoc",
             ptr->x_flag_tree_reassoc);

  if (ptr->x_flag_tree_scev_cprop)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_scev_cprop",
             ptr->x_flag_tree_scev_cprop);

  if (ptr->x_flag_tree_sink)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_sink",
             ptr->x_flag_tree_sink);

  if (ptr->x_flag_tree_slp_vectorize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_slp_vectorize",
             ptr->x_flag_tree_slp_vectorize);

  if (ptr->x_flag_tree_slsr)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_slsr",
             ptr->x_flag_tree_slsr);

  if (ptr->x_flag_tree_sra)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_sra",
             ptr->x_flag_tree_sra);

  if (ptr->x_flag_tree_switch_conversion)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_switch_conversion",
             ptr->x_flag_tree_switch_conversion);

  if (ptr->x_flag_tree_tail_merge)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_tail_merge",
             ptr->x_flag_tree_tail_merge);

  if (ptr->x_flag_tree_ter)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_ter",
             ptr->x_flag_tree_ter);

  if (ptr->x_flag_tree_vectorize)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_vectorize",
             ptr->x_flag_tree_vectorize);

  if (ptr->x_flag_tree_vrp)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_tree_vrp",
             ptr->x_flag_tree_vrp);

  if (ptr->x_flag_unconstrained_commons)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unconstrained_commons",
             ptr->x_flag_unconstrained_commons);

  if (ptr->x_flag_unroll_all_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unroll_all_loops",
             ptr->x_flag_unroll_all_loops);

  if (ptr->x_flag_cunroll_grow_size)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_cunroll_grow_size",
             ptr->x_flag_cunroll_grow_size);

  if (ptr->x_flag_unroll_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unroll_loops",
             ptr->x_flag_unroll_loops);

  if (ptr->x_flag_unsafe_math_optimizations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unsafe_math_optimizations",
             ptr->x_flag_unsafe_math_optimizations);

  if (ptr->x_flag_unswitch_loops)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unswitch_loops",
             ptr->x_flag_unswitch_loops);

  if (ptr->x_flag_unwind_tables)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_unwind_tables",
             ptr->x_flag_unwind_tables);

  if (ptr->x_flag_var_tracking)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_var_tracking",
             ptr->x_flag_var_tracking);

  if (ptr->x_flag_var_tracking_assignments)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_var_tracking_assignments",
             ptr->x_flag_var_tracking_assignments);

  if (ptr->x_flag_var_tracking_assignments_toggle)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_var_tracking_assignments_toggle",
             ptr->x_flag_var_tracking_assignments_toggle);

  if (ptr->x_flag_var_tracking_uninit)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_var_tracking_uninit",
             ptr->x_flag_var_tracking_uninit);

  if (ptr->x_flag_variable_expansion_in_unroller)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_variable_expansion_in_unroller",
             ptr->x_flag_variable_expansion_in_unroller);

  if (ptr->x_flag_version_loops_for_strides)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_version_loops_for_strides",
             ptr->x_flag_version_loops_for_strides);

  if (ptr->x_flag_value_profile_transformations)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_value_profile_transformations",
             ptr->x_flag_value_profile_transformations);

  if (ptr->x_flag_web)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_web",
             ptr->x_flag_web);

  if (ptr->x_flag_wrapv)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_wrapv",
             ptr->x_flag_wrapv);

  if (ptr->x_flag_wrapv_pointer)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "flag_wrapv_pointer",
             ptr->x_flag_wrapv_pointer);

  if (ptr->x_debug_nonbind_markers_p)
    fprintf (file, "%*s%s (%#x)\n",
             indent_to, "",
             "debug_nonbind_markers_p",
             ptr->x_debug_nonbind_markers_p);

  if (ptr->x_str_align_functions)
    fprintf (file, "%*s%s (%s)\n",
             indent_to, "",
             "str_align_functions",
             ptr->x_str_align_functions);

  if (ptr->x_str_align_jumps)
    fprintf (file, "%*s%s (%s)\n",
             indent_to, "",
             "str_align_jumps",
             ptr->x_str_align_jumps);

  if (ptr->x_str_align_labels)
    fprintf (file, "%*s%s (%s)\n",
             indent_to, "",
             "str_align_labels",
             ptr->x_str_align_labels);

  if (ptr->x_str_align_loops)
    fprintf (file, "%*s%s (%s)\n",
             indent_to, "",
             "str_align_loops",
             ptr->x_str_align_loops);

  if (ptr->x_flag_patchable_function_entry)
    fprintf (file, "%*s%s (%s)\n",
             indent_to, "",
             "flag_patchable_function_entry",
             ptr->x_flag_patchable_function_entry);

}

/* Print different optimization variables from structures provided as arguments.  */
void
cl_optimization_print_diff (FILE *file,
                            int indent_to,
                            struct cl_optimization *ptr1,
                            struct cl_optimization *ptr2)
{
  fputs ("\n", file);
  if (ptr1->x_param_align_loop_iterations != ptr2->x_param_align_loop_iterations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_align_loop_iterations",
             ptr1->x_param_align_loop_iterations,
             ptr2->x_param_align_loop_iterations);

  if (ptr1->x_param_align_threshold != ptr2->x_param_align_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_align_threshold",
             ptr1->x_param_align_threshold,
             ptr2->x_param_align_threshold);

  if (ptr1->x_param_asan_protect_allocas != ptr2->x_param_asan_protect_allocas)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_protect_allocas",
             ptr1->x_param_asan_protect_allocas,
             ptr2->x_param_asan_protect_allocas);

  if (ptr1->x_param_asan_instrument_reads != ptr2->x_param_asan_instrument_reads)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_instrument_reads",
             ptr1->x_param_asan_instrument_reads,
             ptr2->x_param_asan_instrument_reads);

  if (ptr1->x_param_asan_instrument_writes != ptr2->x_param_asan_instrument_writes)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_instrument_writes",
             ptr1->x_param_asan_instrument_writes,
             ptr2->x_param_asan_instrument_writes);

  if (ptr1->x_param_asan_instrumentation_with_call_threshold != ptr2->x_param_asan_instrumentation_with_call_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_instrumentation_with_call_threshold",
             ptr1->x_param_asan_instrumentation_with_call_threshold,
             ptr2->x_param_asan_instrumentation_with_call_threshold);

  if (ptr1->x_param_asan_memintrin != ptr2->x_param_asan_memintrin)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_memintrin",
             ptr1->x_param_asan_memintrin,
             ptr2->x_param_asan_memintrin);

  if (ptr1->x_param_asan_stack != ptr2->x_param_asan_stack)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_stack",
             ptr1->x_param_asan_stack,
             ptr2->x_param_asan_stack);

  if (ptr1->x_param_asan_use_after_return != ptr2->x_param_asan_use_after_return)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_asan_use_after_return",
             ptr1->x_param_asan_use_after_return,
             ptr2->x_param_asan_use_after_return);

  if (ptr1->x_param_avg_loop_niter != ptr2->x_param_avg_loop_niter)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_avg_loop_niter",
             ptr1->x_param_avg_loop_niter,
             ptr2->x_param_avg_loop_niter);

  if (ptr1->x_param_avoid_fma_max_bits != ptr2->x_param_avoid_fma_max_bits)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_avoid_fma_max_bits",
             ptr1->x_param_avoid_fma_max_bits,
             ptr2->x_param_avoid_fma_max_bits);

  if (ptr1->x_param_builtin_expect_probability != ptr2->x_param_builtin_expect_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_builtin_expect_probability",
             ptr1->x_param_builtin_expect_probability,
             ptr2->x_param_builtin_expect_probability);

  if (ptr1->x_param_builtin_string_cmp_inline_length != ptr2->x_param_builtin_string_cmp_inline_length)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_builtin_string_cmp_inline_length",
             ptr1->x_param_builtin_string_cmp_inline_length,
             ptr2->x_param_builtin_string_cmp_inline_length);

  if (ptr1->x_param_case_values_threshold != ptr2->x_param_case_values_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_case_values_threshold",
             ptr1->x_param_case_values_threshold,
             ptr2->x_param_case_values_threshold);

  if (ptr1->x_param_comdat_sharing_probability != ptr2->x_param_comdat_sharing_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_comdat_sharing_probability",
             ptr1->x_param_comdat_sharing_probability,
             ptr2->x_param_comdat_sharing_probability);

  if (ptr1->x_param_construct_interfere_size != ptr2->x_param_construct_interfere_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_construct_interfere_size",
             ptr1->x_param_construct_interfere_size,
             ptr2->x_param_construct_interfere_size);

  if (ptr1->x_param_destruct_interfere_size != ptr2->x_param_destruct_interfere_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_destruct_interfere_size",
             ptr1->x_param_destruct_interfere_size,
             ptr2->x_param_destruct_interfere_size);

  if (ptr1->x_param_dse_max_alias_queries_per_store != ptr2->x_param_dse_max_alias_queries_per_store)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_dse_max_alias_queries_per_store",
             ptr1->x_param_dse_max_alias_queries_per_store,
             ptr2->x_param_dse_max_alias_queries_per_store);

  if (ptr1->x_param_dse_max_object_size != ptr2->x_param_dse_max_object_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_dse_max_object_size",
             ptr1->x_param_dse_max_object_size,
             ptr2->x_param_dse_max_object_size);

  if (ptr1->x_param_early_inlining_insns != ptr2->x_param_early_inlining_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_early_inlining_insns",
             ptr1->x_param_early_inlining_insns,
             ptr2->x_param_early_inlining_insns);

  if (ptr1->x_param_evrp_sparse_threshold != ptr2->x_param_evrp_sparse_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_evrp_sparse_threshold",
             ptr1->x_param_evrp_sparse_threshold,
             ptr2->x_param_evrp_sparse_threshold);

  if (ptr1->x_param_evrp_switch_limit != ptr2->x_param_evrp_switch_limit)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_evrp_switch_limit",
             ptr1->x_param_evrp_switch_limit,
             ptr2->x_param_evrp_switch_limit);

  if (ptr1->x_param_fsm_scale_path_blocks != ptr2->x_param_fsm_scale_path_blocks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_fsm_scale_path_blocks",
             ptr1->x_param_fsm_scale_path_blocks,
             ptr2->x_param_fsm_scale_path_blocks);

  if (ptr1->x_param_fsm_scale_path_stmts != ptr2->x_param_fsm_scale_path_stmts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_fsm_scale_path_stmts",
             ptr1->x_param_fsm_scale_path_stmts,
             ptr2->x_param_fsm_scale_path_stmts);

  if (ptr1->x_param_gcse_after_reload_critical_fraction != ptr2->x_param_gcse_after_reload_critical_fraction)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_gcse_after_reload_critical_fraction",
             ptr1->x_param_gcse_after_reload_critical_fraction,
             ptr2->x_param_gcse_after_reload_critical_fraction);

  if (ptr1->x_param_gcse_after_reload_partial_fraction != ptr2->x_param_gcse_after_reload_partial_fraction)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_gcse_after_reload_partial_fraction",
             ptr1->x_param_gcse_after_reload_partial_fraction,
             ptr2->x_param_gcse_after_reload_partial_fraction);

  if (ptr1->x_param_gcse_cost_distance_ratio != ptr2->x_param_gcse_cost_distance_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_gcse_cost_distance_ratio",
             ptr1->x_param_gcse_cost_distance_ratio,
             ptr2->x_param_gcse_cost_distance_ratio);

  if (ptr1->x_param_gcse_unrestricted_cost != ptr2->x_param_gcse_unrestricted_cost)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_gcse_unrestricted_cost",
             ptr1->x_param_gcse_unrestricted_cost,
             ptr2->x_param_gcse_unrestricted_cost);

  if (ptr1->x_param_graphite_max_arrays_per_scop != ptr2->x_param_graphite_max_arrays_per_scop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_graphite_max_arrays_per_scop",
             ptr1->x_param_graphite_max_arrays_per_scop,
             ptr2->x_param_graphite_max_arrays_per_scop);

  if (ptr1->x_param_graphite_max_nb_scop_params != ptr2->x_param_graphite_max_nb_scop_params)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_graphite_max_nb_scop_params",
             ptr1->x_param_graphite_max_nb_scop_params,
             ptr2->x_param_graphite_max_nb_scop_params);

  if (ptr1->x_param_hwasan_instrument_allocas != ptr2->x_param_hwasan_instrument_allocas)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_allocas",
             ptr1->x_param_hwasan_instrument_allocas,
             ptr2->x_param_hwasan_instrument_allocas);

  if (ptr1->x_param_hwasan_instrument_mem_intrinsics != ptr2->x_param_hwasan_instrument_mem_intrinsics)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_mem_intrinsics",
             ptr1->x_param_hwasan_instrument_mem_intrinsics,
             ptr2->x_param_hwasan_instrument_mem_intrinsics);

  if (ptr1->x_param_hwasan_instrument_reads != ptr2->x_param_hwasan_instrument_reads)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_reads",
             ptr1->x_param_hwasan_instrument_reads,
             ptr2->x_param_hwasan_instrument_reads);

  if (ptr1->x_param_hwasan_instrument_stack != ptr2->x_param_hwasan_instrument_stack)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_stack",
             ptr1->x_param_hwasan_instrument_stack,
             ptr2->x_param_hwasan_instrument_stack);

  if (ptr1->x_param_hwasan_instrument_writes != ptr2->x_param_hwasan_instrument_writes)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_instrument_writes",
             ptr1->x_param_hwasan_instrument_writes,
             ptr2->x_param_hwasan_instrument_writes);

  if (ptr1->x_param_hwasan_random_frame_tag != ptr2->x_param_hwasan_random_frame_tag)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_hwasan_random_frame_tag",
             ptr1->x_param_hwasan_random_frame_tag,
             ptr2->x_param_hwasan_random_frame_tag);

  if (ptr1->x_param_inline_heuristics_hint_percent != ptr2->x_param_inline_heuristics_hint_percent)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_inline_heuristics_hint_percent",
             ptr1->x_param_inline_heuristics_hint_percent,
             ptr2->x_param_inline_heuristics_hint_percent);

  if (ptr1->x_param_inline_min_speedup != ptr2->x_param_inline_min_speedup)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_inline_min_speedup",
             ptr1->x_param_inline_min_speedup,
             ptr2->x_param_inline_min_speedup);

  if (ptr1->x_param_inline_unit_growth != ptr2->x_param_inline_unit_growth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_inline_unit_growth",
             ptr1->x_param_inline_unit_growth,
             ptr2->x_param_inline_unit_growth);

  if (ptr1->x_param_ipa_cp_eval_threshold != ptr2->x_param_ipa_cp_eval_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_eval_threshold",
             ptr1->x_param_ipa_cp_eval_threshold,
             ptr2->x_param_ipa_cp_eval_threshold);

  if (ptr1->x_param_ipa_cp_large_unit_insns != ptr2->x_param_ipa_cp_large_unit_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_large_unit_insns",
             ptr1->x_param_ipa_cp_large_unit_insns,
             ptr2->x_param_ipa_cp_large_unit_insns);

  if (ptr1->x_param_ipa_cp_loop_hint_bonus != ptr2->x_param_ipa_cp_loop_hint_bonus)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_loop_hint_bonus",
             ptr1->x_param_ipa_cp_loop_hint_bonus,
             ptr2->x_param_ipa_cp_loop_hint_bonus);

  if (ptr1->x_param_ipa_cp_max_recursive_depth != ptr2->x_param_ipa_cp_max_recursive_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_max_recursive_depth",
             ptr1->x_param_ipa_cp_max_recursive_depth,
             ptr2->x_param_ipa_cp_max_recursive_depth);

  if (ptr1->x_param_ipa_cp_min_recursive_probability != ptr2->x_param_ipa_cp_min_recursive_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_min_recursive_probability",
             ptr1->x_param_ipa_cp_min_recursive_probability,
             ptr2->x_param_ipa_cp_min_recursive_probability);

  if (ptr1->x_param_ipa_cp_profile_count_base != ptr2->x_param_ipa_cp_profile_count_base)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_profile_count_base",
             ptr1->x_param_ipa_cp_profile_count_base,
             ptr2->x_param_ipa_cp_profile_count_base);

  if (ptr1->x_param_ipa_cp_recursion_penalty != ptr2->x_param_ipa_cp_recursion_penalty)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_recursion_penalty",
             ptr1->x_param_ipa_cp_recursion_penalty,
             ptr2->x_param_ipa_cp_recursion_penalty);

  if (ptr1->x_param_ipa_cp_recursive_freq_factor != ptr2->x_param_ipa_cp_recursive_freq_factor)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_recursive_freq_factor",
             ptr1->x_param_ipa_cp_recursive_freq_factor,
             ptr2->x_param_ipa_cp_recursive_freq_factor);

  if (ptr1->x_param_ipa_cp_single_call_penalty != ptr2->x_param_ipa_cp_single_call_penalty)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_single_call_penalty",
             ptr1->x_param_ipa_cp_single_call_penalty,
             ptr2->x_param_ipa_cp_single_call_penalty);

  if (ptr1->x_param_ipa_cp_unit_growth != ptr2->x_param_ipa_cp_unit_growth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_unit_growth",
             ptr1->x_param_ipa_cp_unit_growth,
             ptr2->x_param_ipa_cp_unit_growth);

  if (ptr1->x_param_ipa_cp_value_list_size != ptr2->x_param_ipa_cp_value_list_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_cp_value_list_size",
             ptr1->x_param_ipa_cp_value_list_size,
             ptr2->x_param_ipa_cp_value_list_size);

  if (ptr1->x_param_ipa_jump_function_lookups != ptr2->x_param_ipa_jump_function_lookups)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_jump_function_lookups",
             ptr1->x_param_ipa_jump_function_lookups,
             ptr2->x_param_ipa_jump_function_lookups);

  if (ptr1->x_param_ipa_max_aa_steps != ptr2->x_param_ipa_max_aa_steps)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_max_aa_steps",
             ptr1->x_param_ipa_max_aa_steps,
             ptr2->x_param_ipa_max_aa_steps);

  if (ptr1->x_param_ipa_max_agg_items != ptr2->x_param_ipa_max_agg_items)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_max_agg_items",
             ptr1->x_param_ipa_max_agg_items,
             ptr2->x_param_ipa_max_agg_items);

  if (ptr1->x_param_ipa_max_loop_predicates != ptr2->x_param_ipa_max_loop_predicates)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_max_loop_predicates",
             ptr1->x_param_ipa_max_loop_predicates,
             ptr2->x_param_ipa_max_loop_predicates);

  if (ptr1->x_param_ipa_max_param_expr_ops != ptr2->x_param_ipa_max_param_expr_ops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_max_param_expr_ops",
             ptr1->x_param_ipa_max_param_expr_ops,
             ptr2->x_param_ipa_max_param_expr_ops);

  if (ptr1->x_param_ipa_max_switch_predicate_bounds != ptr2->x_param_ipa_max_switch_predicate_bounds)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_max_switch_predicate_bounds",
             ptr1->x_param_ipa_max_switch_predicate_bounds,
             ptr2->x_param_ipa_max_switch_predicate_bounds);

  if (ptr1->x_param_ipa_sra_max_replacements != ptr2->x_param_ipa_sra_max_replacements)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_sra_max_replacements",
             ptr1->x_param_ipa_sra_max_replacements,
             ptr2->x_param_ipa_sra_max_replacements);

  if (ptr1->x_param_ipa_sra_ptr_growth_factor != ptr2->x_param_ipa_sra_ptr_growth_factor)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ipa_sra_ptr_growth_factor",
             ptr1->x_param_ipa_sra_ptr_growth_factor,
             ptr2->x_param_ipa_sra_ptr_growth_factor);

  if (ptr1->x_param_ira_consider_dup_in_all_alts != ptr2->x_param_ira_consider_dup_in_all_alts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ira_consider_dup_in_all_alts",
             ptr1->x_param_ira_consider_dup_in_all_alts,
             ptr2->x_param_ira_consider_dup_in_all_alts);

  if (ptr1->x_param_ira_loop_reserved_regs != ptr2->x_param_ira_loop_reserved_regs)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ira_loop_reserved_regs",
             ptr1->x_param_ira_loop_reserved_regs,
             ptr2->x_param_ira_loop_reserved_regs);

  if (ptr1->x_param_ira_max_conflict_table_size != ptr2->x_param_ira_max_conflict_table_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ira_max_conflict_table_size",
             ptr1->x_param_ira_max_conflict_table_size,
             ptr2->x_param_ira_max_conflict_table_size);

  if (ptr1->x_param_ira_max_loops_num != ptr2->x_param_ira_max_loops_num)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ira_max_loops_num",
             ptr1->x_param_ira_max_loops_num,
             ptr2->x_param_ira_max_loops_num);

  if (ptr1->x_param_iv_always_prune_cand_set_bound != ptr2->x_param_iv_always_prune_cand_set_bound)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_iv_always_prune_cand_set_bound",
             ptr1->x_param_iv_always_prune_cand_set_bound,
             ptr2->x_param_iv_always_prune_cand_set_bound);

  if (ptr1->x_param_iv_consider_all_candidates_bound != ptr2->x_param_iv_consider_all_candidates_bound)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_iv_consider_all_candidates_bound",
             ptr1->x_param_iv_consider_all_candidates_bound,
             ptr2->x_param_iv_consider_all_candidates_bound);

  if (ptr1->x_param_iv_max_considered_uses != ptr2->x_param_iv_max_considered_uses)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_iv_max_considered_uses",
             ptr1->x_param_iv_max_considered_uses,
             ptr2->x_param_iv_max_considered_uses);

  if (ptr1->x_param_jump_table_max_growth_ratio_for_size != ptr2->x_param_jump_table_max_growth_ratio_for_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_jump_table_max_growth_ratio_for_size",
             ptr1->x_param_jump_table_max_growth_ratio_for_size,
             ptr2->x_param_jump_table_max_growth_ratio_for_size);

  if (ptr1->x_param_jump_table_max_growth_ratio_for_speed != ptr2->x_param_jump_table_max_growth_ratio_for_speed)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_jump_table_max_growth_ratio_for_speed",
             ptr1->x_param_jump_table_max_growth_ratio_for_speed,
             ptr2->x_param_jump_table_max_growth_ratio_for_speed);

  if (ptr1->x_param_l1_cache_line_size != ptr2->x_param_l1_cache_line_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_l1_cache_line_size",
             ptr1->x_param_l1_cache_line_size,
             ptr2->x_param_l1_cache_line_size);

  if (ptr1->x_param_l1_cache_size != ptr2->x_param_l1_cache_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_l1_cache_size",
             ptr1->x_param_l1_cache_size,
             ptr2->x_param_l1_cache_size);

  if (ptr1->x_param_l2_cache_size != ptr2->x_param_l2_cache_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_l2_cache_size",
             ptr1->x_param_l2_cache_size,
             ptr2->x_param_l2_cache_size);

  if (ptr1->x_param_large_function_growth != ptr2->x_param_large_function_growth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_large_function_growth",
             ptr1->x_param_large_function_growth,
             ptr2->x_param_large_function_growth);

  if (ptr1->x_param_large_function_insns != ptr2->x_param_large_function_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_large_function_insns",
             ptr1->x_param_large_function_insns,
             ptr2->x_param_large_function_insns);

  if (ptr1->x_param_stack_frame_growth != ptr2->x_param_stack_frame_growth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_stack_frame_growth",
             ptr1->x_param_stack_frame_growth,
             ptr2->x_param_stack_frame_growth);

  if (ptr1->x_param_large_stack_frame != ptr2->x_param_large_stack_frame)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_large_stack_frame",
             ptr1->x_param_large_stack_frame,
             ptr2->x_param_large_stack_frame);

  if (ptr1->x_param_large_unit_insns != ptr2->x_param_large_unit_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_large_unit_insns",
             ptr1->x_param_large_unit_insns,
             ptr2->x_param_large_unit_insns);

  if (ptr1->x_param_lim_expensive != ptr2->x_param_lim_expensive)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_lim_expensive",
             ptr1->x_param_lim_expensive,
             ptr2->x_param_lim_expensive);

  if (ptr1->x_param_loop_block_tile_size != ptr2->x_param_loop_block_tile_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_block_tile_size",
             ptr1->x_param_loop_block_tile_size,
             ptr2->x_param_loop_block_tile_size);

  if (ptr1->x_param_loop_interchange_max_num_stmts != ptr2->x_param_loop_interchange_max_num_stmts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_interchange_max_num_stmts",
             ptr1->x_param_loop_interchange_max_num_stmts,
             ptr2->x_param_loop_interchange_max_num_stmts);

  if (ptr1->x_param_loop_interchange_stride_ratio != ptr2->x_param_loop_interchange_stride_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_interchange_stride_ratio",
             ptr1->x_param_loop_interchange_stride_ratio,
             ptr2->x_param_loop_interchange_stride_ratio);

  if (ptr1->x_param_loop_invariant_max_bbs_in_loop != ptr2->x_param_loop_invariant_max_bbs_in_loop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_invariant_max_bbs_in_loop",
             ptr1->x_param_loop_invariant_max_bbs_in_loop,
             ptr2->x_param_loop_invariant_max_bbs_in_loop);

  if (ptr1->x_param_loop_max_datarefs_for_datadeps != ptr2->x_param_loop_max_datarefs_for_datadeps)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_max_datarefs_for_datadeps",
             ptr1->x_param_loop_max_datarefs_for_datadeps,
             ptr2->x_param_loop_max_datarefs_for_datadeps);

  if (ptr1->x_param_loop_versioning_max_inner_insns != ptr2->x_param_loop_versioning_max_inner_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_versioning_max_inner_insns",
             ptr1->x_param_loop_versioning_max_inner_insns,
             ptr2->x_param_loop_versioning_max_inner_insns);

  if (ptr1->x_param_loop_versioning_max_outer_insns != ptr2->x_param_loop_versioning_max_outer_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_loop_versioning_max_outer_insns",
             ptr1->x_param_loop_versioning_max_outer_insns,
             ptr2->x_param_loop_versioning_max_outer_insns);

  if (ptr1->x_param_lra_inheritance_ebb_probability_cutoff != ptr2->x_param_lra_inheritance_ebb_probability_cutoff)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_lra_inheritance_ebb_probability_cutoff",
             ptr1->x_param_lra_inheritance_ebb_probability_cutoff,
             ptr2->x_param_lra_inheritance_ebb_probability_cutoff);

  if (ptr1->x_param_lra_max_considered_reload_pseudos != ptr2->x_param_lra_max_considered_reload_pseudos)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_lra_max_considered_reload_pseudos",
             ptr1->x_param_lra_max_considered_reload_pseudos,
             ptr2->x_param_lra_max_considered_reload_pseudos);

  if (ptr1->x_param_max_average_unrolled_insns != ptr2->x_param_max_average_unrolled_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_average_unrolled_insns",
             ptr1->x_param_max_average_unrolled_insns,
             ptr2->x_param_max_average_unrolled_insns);

  if (ptr1->x_param_max_combine_insns != ptr2->x_param_max_combine_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_combine_insns",
             ptr1->x_param_max_combine_insns,
             ptr2->x_param_max_combine_insns);

  if (ptr1->x_param_max_unroll_iterations != ptr2->x_param_max_unroll_iterations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_unroll_iterations",
             ptr1->x_param_max_unroll_iterations,
             ptr2->x_param_max_unroll_iterations);

  if (ptr1->x_param_max_completely_peel_times != ptr2->x_param_max_completely_peel_times)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_completely_peel_times",
             ptr1->x_param_max_completely_peel_times,
             ptr2->x_param_max_completely_peel_times);

  if (ptr1->x_param_max_completely_peeled_insns != ptr2->x_param_max_completely_peeled_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_completely_peeled_insns",
             ptr1->x_param_max_completely_peeled_insns,
             ptr2->x_param_max_completely_peeled_insns);

  if (ptr1->x_param_max_crossjump_edges != ptr2->x_param_max_crossjump_edges)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_crossjump_edges",
             ptr1->x_param_max_crossjump_edges,
             ptr2->x_param_max_crossjump_edges);

  if (ptr1->x_param_max_cse_insns != ptr2->x_param_max_cse_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_cse_insns",
             ptr1->x_param_max_cse_insns,
             ptr2->x_param_max_cse_insns);

  if (ptr1->x_param_max_cse_path_length != ptr2->x_param_max_cse_path_length)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_cse_path_length",
             ptr1->x_param_max_cse_path_length,
             ptr2->x_param_max_cse_path_length);

  if (ptr1->x_param_max_cselib_memory_locations != ptr2->x_param_max_cselib_memory_locations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_cselib_memory_locations",
             ptr1->x_param_max_cselib_memory_locations,
             ptr2->x_param_max_cselib_memory_locations);

  if (ptr1->x_param_max_debug_marker_count != ptr2->x_param_max_debug_marker_count)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_debug_marker_count",
             ptr1->x_param_max_debug_marker_count,
             ptr2->x_param_max_debug_marker_count);

  if (ptr1->x_param_max_delay_slot_insn_search != ptr2->x_param_max_delay_slot_insn_search)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_delay_slot_insn_search",
             ptr1->x_param_max_delay_slot_insn_search,
             ptr2->x_param_max_delay_slot_insn_search);

  if (ptr1->x_param_max_delay_slot_live_search != ptr2->x_param_max_delay_slot_live_search)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_delay_slot_live_search",
             ptr1->x_param_max_delay_slot_live_search,
             ptr2->x_param_max_delay_slot_live_search);

  if (ptr1->x_param_max_dse_active_local_stores != ptr2->x_param_max_dse_active_local_stores)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_dse_active_local_stores",
             ptr1->x_param_max_dse_active_local_stores,
             ptr2->x_param_max_dse_active_local_stores);

  if (ptr1->x_param_early_inliner_max_iterations != ptr2->x_param_early_inliner_max_iterations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_early_inliner_max_iterations",
             ptr1->x_param_early_inliner_max_iterations,
             ptr2->x_param_early_inliner_max_iterations);

  if (ptr1->x_param_max_find_base_term_values != ptr2->x_param_max_find_base_term_values)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_find_base_term_values",
             ptr1->x_param_max_find_base_term_values,
             ptr2->x_param_max_find_base_term_values);

  if (ptr1->x_param_max_fsm_thread_length != ptr2->x_param_max_fsm_thread_length)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_fsm_thread_length",
             ptr1->x_param_max_fsm_thread_length,
             ptr2->x_param_max_fsm_thread_length);

  if (ptr1->x_param_max_fsm_thread_path_insns != ptr2->x_param_max_fsm_thread_path_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_fsm_thread_path_insns",
             ptr1->x_param_max_fsm_thread_path_insns,
             ptr2->x_param_max_fsm_thread_path_insns);

  if (ptr1->x_param_max_gcse_insertion_ratio != ptr2->x_param_max_gcse_insertion_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_gcse_insertion_ratio",
             ptr1->x_param_max_gcse_insertion_ratio,
             ptr2->x_param_max_gcse_insertion_ratio);

  if (ptr1->x_param_max_gcse_memory != ptr2->x_param_max_gcse_memory)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_gcse_memory",
             ptr1->x_param_max_gcse_memory,
             ptr2->x_param_max_gcse_memory);

  if (ptr1->x_param_max_goto_duplication_insns != ptr2->x_param_max_goto_duplication_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_goto_duplication_insns",
             ptr1->x_param_max_goto_duplication_insns,
             ptr2->x_param_max_goto_duplication_insns);

  if (ptr1->x_param_max_grow_copy_bb_insns != ptr2->x_param_max_grow_copy_bb_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_grow_copy_bb_insns",
             ptr1->x_param_max_grow_copy_bb_insns,
             ptr2->x_param_max_grow_copy_bb_insns);

  if (ptr1->x_param_max_hoist_depth != ptr2->x_param_max_hoist_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_hoist_depth",
             ptr1->x_param_max_hoist_depth,
             ptr2->x_param_max_hoist_depth);

  if (ptr1->x_param_inline_functions_called_once_insns != ptr2->x_param_inline_functions_called_once_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_inline_functions_called_once_insns",
             ptr1->x_param_inline_functions_called_once_insns,
             ptr2->x_param_inline_functions_called_once_insns);

  if (ptr1->x_param_inline_functions_called_once_loop_depth != ptr2->x_param_inline_functions_called_once_loop_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_inline_functions_called_once_loop_depth",
             ptr1->x_param_inline_functions_called_once_loop_depth,
             ptr2->x_param_inline_functions_called_once_loop_depth);

  if (ptr1->x_param_max_inline_insns_auto != ptr2->x_param_max_inline_insns_auto)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_auto",
             ptr1->x_param_max_inline_insns_auto,
             ptr2->x_param_max_inline_insns_auto);

  if (ptr1->x_param_max_inline_insns_recursive_auto != ptr2->x_param_max_inline_insns_recursive_auto)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_recursive_auto",
             ptr1->x_param_max_inline_insns_recursive_auto,
             ptr2->x_param_max_inline_insns_recursive_auto);

  if (ptr1->x_param_max_inline_insns_recursive != ptr2->x_param_max_inline_insns_recursive)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_recursive",
             ptr1->x_param_max_inline_insns_recursive,
             ptr2->x_param_max_inline_insns_recursive);

  if (ptr1->x_param_max_inline_insns_single != ptr2->x_param_max_inline_insns_single)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_single",
             ptr1->x_param_max_inline_insns_single,
             ptr2->x_param_max_inline_insns_single);

  if (ptr1->x_param_max_inline_insns_size != ptr2->x_param_max_inline_insns_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_size",
             ptr1->x_param_max_inline_insns_size,
             ptr2->x_param_max_inline_insns_size);

  if (ptr1->x_param_max_inline_insns_small != ptr2->x_param_max_inline_insns_small)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_insns_small",
             ptr1->x_param_max_inline_insns_small,
             ptr2->x_param_max_inline_insns_small);

  if (ptr1->x_param_max_inline_recursive_depth_auto != ptr2->x_param_max_inline_recursive_depth_auto)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_recursive_depth_auto",
             ptr1->x_param_max_inline_recursive_depth_auto,
             ptr2->x_param_max_inline_recursive_depth_auto);

  if (ptr1->x_param_max_inline_recursive_depth != ptr2->x_param_max_inline_recursive_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_inline_recursive_depth",
             ptr1->x_param_max_inline_recursive_depth,
             ptr2->x_param_max_inline_recursive_depth);

  if (ptr1->x_param_max_isl_operations != ptr2->x_param_max_isl_operations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_isl_operations",
             ptr1->x_param_max_isl_operations,
             ptr2->x_param_max_isl_operations);

  if (ptr1->x_param_max_iterations_computation_cost != ptr2->x_param_max_iterations_computation_cost)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_iterations_computation_cost",
             ptr1->x_param_max_iterations_computation_cost,
             ptr2->x_param_max_iterations_computation_cost);

  if (ptr1->x_param_max_iterations_to_track != ptr2->x_param_max_iterations_to_track)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_iterations_to_track",
             ptr1->x_param_max_iterations_to_track,
             ptr2->x_param_max_iterations_to_track);

  if (ptr1->x_param_max_jump_thread_duplication_stmts != ptr2->x_param_max_jump_thread_duplication_stmts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_jump_thread_duplication_stmts",
             ptr1->x_param_max_jump_thread_duplication_stmts,
             ptr2->x_param_max_jump_thread_duplication_stmts);

  if (ptr1->x_param_max_last_value_rtl != ptr2->x_param_max_last_value_rtl)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_last_value_rtl",
             ptr1->x_param_max_last_value_rtl,
             ptr2->x_param_max_last_value_rtl);

  if (ptr1->x_param_max_loop_header_insns != ptr2->x_param_max_loop_header_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_loop_header_insns",
             ptr1->x_param_max_loop_header_insns,
             ptr2->x_param_max_loop_header_insns);

  if (ptr1->x_param_max_modulo_backtrack_attempts != ptr2->x_param_max_modulo_backtrack_attempts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_modulo_backtrack_attempts",
             ptr1->x_param_max_modulo_backtrack_attempts,
             ptr2->x_param_max_modulo_backtrack_attempts);

  if (ptr1->x_param_max_partial_antic_length != ptr2->x_param_max_partial_antic_length)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_partial_antic_length",
             ptr1->x_param_max_partial_antic_length,
             ptr2->x_param_max_partial_antic_length);

  if (ptr1->x_param_max_peel_branches != ptr2->x_param_max_peel_branches)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_peel_branches",
             ptr1->x_param_max_peel_branches,
             ptr2->x_param_max_peel_branches);

  if (ptr1->x_param_max_peel_times != ptr2->x_param_max_peel_times)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_peel_times",
             ptr1->x_param_max_peel_times,
             ptr2->x_param_max_peel_times);

  if (ptr1->x_param_max_peeled_insns != ptr2->x_param_max_peeled_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_peeled_insns",
             ptr1->x_param_max_peeled_insns,
             ptr2->x_param_max_peeled_insns);

  if (ptr1->x_param_max_pending_list_length != ptr2->x_param_max_pending_list_length)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_pending_list_length",
             ptr1->x_param_max_pending_list_length,
             ptr2->x_param_max_pending_list_length);

  if (ptr1->x_param_max_pipeline_region_blocks != ptr2->x_param_max_pipeline_region_blocks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_pipeline_region_blocks",
             ptr1->x_param_max_pipeline_region_blocks,
             ptr2->x_param_max_pipeline_region_blocks);

  if (ptr1->x_param_max_pipeline_region_insns != ptr2->x_param_max_pipeline_region_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_pipeline_region_insns",
             ptr1->x_param_max_pipeline_region_insns,
             ptr2->x_param_max_pipeline_region_insns);

  if (ptr1->x_param_max_pow_sqrt_depth != ptr2->x_param_max_pow_sqrt_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_pow_sqrt_depth",
             ptr1->x_param_max_pow_sqrt_depth,
             ptr2->x_param_max_pow_sqrt_depth);

  if (ptr1->x_param_max_predicted_iterations != ptr2->x_param_max_predicted_iterations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_predicted_iterations",
             ptr1->x_param_max_predicted_iterations,
             ptr2->x_param_max_predicted_iterations);

  if (ptr1->x_param_max_reload_search_insns != ptr2->x_param_max_reload_search_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_reload_search_insns",
             ptr1->x_param_max_reload_search_insns,
             ptr2->x_param_max_reload_search_insns);

  if (ptr1->x_param_max_rtl_if_conversion_insns != ptr2->x_param_max_rtl_if_conversion_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_insns",
             ptr1->x_param_max_rtl_if_conversion_insns,
             ptr2->x_param_max_rtl_if_conversion_insns);

  if (ptr1->x_param_max_rtl_if_conversion_predictable_cost != ptr2->x_param_max_rtl_if_conversion_predictable_cost)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_predictable_cost",
             ptr1->x_param_max_rtl_if_conversion_predictable_cost,
             ptr2->x_param_max_rtl_if_conversion_predictable_cost);

  if (ptr1->x_param_max_rtl_if_conversion_unpredictable_cost != ptr2->x_param_max_rtl_if_conversion_unpredictable_cost)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_rtl_if_conversion_unpredictable_cost",
             ptr1->x_param_max_rtl_if_conversion_unpredictable_cost,
             ptr2->x_param_max_rtl_if_conversion_unpredictable_cost);

  if (ptr1->x_param_max_sched_extend_regions_iters != ptr2->x_param_max_sched_extend_regions_iters)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_sched_extend_regions_iters",
             ptr1->x_param_max_sched_extend_regions_iters,
             ptr2->x_param_max_sched_extend_regions_iters);

  if (ptr1->x_param_max_sched_insn_conflict_delay != ptr2->x_param_max_sched_insn_conflict_delay)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_sched_insn_conflict_delay",
             ptr1->x_param_max_sched_insn_conflict_delay,
             ptr2->x_param_max_sched_insn_conflict_delay);

  if (ptr1->x_param_max_sched_ready_insns != ptr2->x_param_max_sched_ready_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_sched_ready_insns",
             ptr1->x_param_max_sched_ready_insns,
             ptr2->x_param_max_sched_ready_insns);

  if (ptr1->x_param_max_sched_region_blocks != ptr2->x_param_max_sched_region_blocks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_sched_region_blocks",
             ptr1->x_param_max_sched_region_blocks,
             ptr2->x_param_max_sched_region_blocks);

  if (ptr1->x_param_max_sched_region_insns != ptr2->x_param_max_sched_region_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_sched_region_insns",
             ptr1->x_param_max_sched_region_insns,
             ptr2->x_param_max_sched_region_insns);

  if (ptr1->x_param_max_slsr_candidate_scan != ptr2->x_param_max_slsr_candidate_scan)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_slsr_candidate_scan",
             ptr1->x_param_max_slsr_candidate_scan,
             ptr2->x_param_max_slsr_candidate_scan);

  if (ptr1->x_param_max_speculative_devirt_maydefs != ptr2->x_param_max_speculative_devirt_maydefs)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_speculative_devirt_maydefs",
             ptr1->x_param_max_speculative_devirt_maydefs,
             ptr2->x_param_max_speculative_devirt_maydefs);

  if (ptr1->x_param_max_stores_to_merge != ptr2->x_param_max_stores_to_merge)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_stores_to_merge",
             ptr1->x_param_max_stores_to_merge,
             ptr2->x_param_max_stores_to_merge);

  if (ptr1->x_param_max_stores_to_sink != ptr2->x_param_max_stores_to_sink)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_stores_to_sink",
             ptr1->x_param_max_stores_to_sink,
             ptr2->x_param_max_stores_to_sink);

  if (ptr1->x_param_max_tail_merge_comparisons != ptr2->x_param_max_tail_merge_comparisons)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_tail_merge_comparisons",
             ptr1->x_param_max_tail_merge_comparisons,
             ptr2->x_param_max_tail_merge_comparisons);

  if (ptr1->x_param_max_tail_merge_iterations != ptr2->x_param_max_tail_merge_iterations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_tail_merge_iterations",
             ptr1->x_param_max_tail_merge_iterations,
             ptr2->x_param_max_tail_merge_iterations);

  if (ptr1->x_param_max_tracked_strlens != ptr2->x_param_max_tracked_strlens)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_tracked_strlens",
             ptr1->x_param_max_tracked_strlens,
             ptr2->x_param_max_tracked_strlens);

  if (ptr1->x_param_max_tree_if_conversion_phi_args != ptr2->x_param_max_tree_if_conversion_phi_args)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_tree_if_conversion_phi_args",
             ptr1->x_param_max_tree_if_conversion_phi_args,
             ptr2->x_param_max_tree_if_conversion_phi_args);

  if (ptr1->x_param_max_unroll_times != ptr2->x_param_max_unroll_times)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_unroll_times",
             ptr1->x_param_max_unroll_times,
             ptr2->x_param_max_unroll_times);

  if (ptr1->x_param_max_unrolled_insns != ptr2->x_param_max_unrolled_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_unrolled_insns",
             ptr1->x_param_max_unrolled_insns,
             ptr2->x_param_max_unrolled_insns);

  if (ptr1->x_param_max_unswitch_insns != ptr2->x_param_max_unswitch_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_unswitch_insns",
             ptr1->x_param_max_unswitch_insns,
             ptr2->x_param_max_unswitch_insns);

  if (ptr1->x_param_max_variable_expansions != ptr2->x_param_max_variable_expansions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_variable_expansions",
             ptr1->x_param_max_variable_expansions,
             ptr2->x_param_max_variable_expansions);

  if (ptr1->x_param_max_vartrack_expr_depth != ptr2->x_param_max_vartrack_expr_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_vartrack_expr_depth",
             ptr1->x_param_max_vartrack_expr_depth,
             ptr2->x_param_max_vartrack_expr_depth);

  if (ptr1->x_param_max_vartrack_reverse_op_size != ptr2->x_param_max_vartrack_reverse_op_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_vartrack_reverse_op_size",
             ptr1->x_param_max_vartrack_reverse_op_size,
             ptr2->x_param_max_vartrack_reverse_op_size);

  if (ptr1->x_param_max_vartrack_size != ptr2->x_param_max_vartrack_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_vartrack_size",
             ptr1->x_param_max_vartrack_size,
             ptr2->x_param_max_vartrack_size);

  if (ptr1->x_param_max_vrp_switch_assertions != ptr2->x_param_max_vrp_switch_assertions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_max_vrp_switch_assertions",
             ptr1->x_param_max_vrp_switch_assertions,
             ptr2->x_param_max_vrp_switch_assertions);

  if (ptr1->x_param_min_crossjump_insns != ptr2->x_param_min_crossjump_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_crossjump_insns",
             ptr1->x_param_min_crossjump_insns,
             ptr2->x_param_min_crossjump_insns);

  if (ptr1->x_param_min_inline_recursive_probability != ptr2->x_param_min_inline_recursive_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_inline_recursive_probability",
             ptr1->x_param_min_inline_recursive_probability,
             ptr2->x_param_min_inline_recursive_probability);

  if (ptr1->x_param_min_insn_to_prefetch_ratio != ptr2->x_param_min_insn_to_prefetch_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_insn_to_prefetch_ratio",
             ptr1->x_param_min_insn_to_prefetch_ratio,
             ptr2->x_param_min_insn_to_prefetch_ratio);

  if (ptr1->x_param_min_loop_cond_split_prob != ptr2->x_param_min_loop_cond_split_prob)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_loop_cond_split_prob",
             ptr1->x_param_min_loop_cond_split_prob,
             ptr2->x_param_min_loop_cond_split_prob);

  if (ptr1->x_param_min_pagesize != ptr2->x_param_min_pagesize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_pagesize",
             ptr1->x_param_min_pagesize,
             ptr2->x_param_min_pagesize);

  if (ptr1->x_param_min_size_for_stack_sharing != ptr2->x_param_min_size_for_stack_sharing)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_size_for_stack_sharing",
             ptr1->x_param_min_size_for_stack_sharing,
             ptr2->x_param_min_size_for_stack_sharing);

  if (ptr1->x_param_min_spec_prob != ptr2->x_param_min_spec_prob)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_spec_prob",
             ptr1->x_param_min_spec_prob,
             ptr2->x_param_min_spec_prob);

  if (ptr1->x_param_min_vect_loop_bound != ptr2->x_param_min_vect_loop_bound)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_min_vect_loop_bound",
             ptr1->x_param_min_vect_loop_bound,
             ptr2->x_param_min_vect_loop_bound);

  if (ptr1->x_param_modref_max_accesses != ptr2->x_param_modref_max_accesses)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_accesses",
             ptr1->x_param_modref_max_accesses,
             ptr2->x_param_modref_max_accesses);

  if (ptr1->x_param_modref_max_adjustments != ptr2->x_param_modref_max_adjustments)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_adjustments",
             ptr1->x_param_modref_max_adjustments,
             ptr2->x_param_modref_max_adjustments);

  if (ptr1->x_param_modref_max_bases != ptr2->x_param_modref_max_bases)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_bases",
             ptr1->x_param_modref_max_bases,
             ptr2->x_param_modref_max_bases);

  if (ptr1->x_param_modref_max_depth != ptr2->x_param_modref_max_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_depth",
             ptr1->x_param_modref_max_depth,
             ptr2->x_param_modref_max_depth);

  if (ptr1->x_param_modref_max_escape_points != ptr2->x_param_modref_max_escape_points)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_escape_points",
             ptr1->x_param_modref_max_escape_points,
             ptr2->x_param_modref_max_escape_points);

  if (ptr1->x_param_modref_max_refs != ptr2->x_param_modref_max_refs)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_refs",
             ptr1->x_param_modref_max_refs,
             ptr2->x_param_modref_max_refs);

  if (ptr1->x_param_modref_max_tests != ptr2->x_param_modref_max_tests)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_modref_max_tests",
             ptr1->x_param_modref_max_tests,
             ptr2->x_param_modref_max_tests);

  if (ptr1->x_param_parloops_chunk_size != ptr2->x_param_parloops_chunk_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_parloops_chunk_size",
             ptr1->x_param_parloops_chunk_size,
             ptr2->x_param_parloops_chunk_size);

  if (ptr1->x_param_parloops_min_per_thread != ptr2->x_param_parloops_min_per_thread)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_parloops_min_per_thread",
             ptr1->x_param_parloops_min_per_thread,
             ptr2->x_param_parloops_min_per_thread);

  if (ptr1->x_param_parloops_schedule != ptr2->x_param_parloops_schedule)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_parloops_schedule",
             ptr1->x_param_parloops_schedule,
             ptr2->x_param_parloops_schedule);

  if (ptr1->x_param_partial_inlining_entry_probability != ptr2->x_param_partial_inlining_entry_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_partial_inlining_entry_probability",
             ptr1->x_param_partial_inlining_entry_probability,
             ptr2->x_param_partial_inlining_entry_probability);

  if (ptr1->x_param_predictable_branch_outcome != ptr2->x_param_predictable_branch_outcome)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_predictable_branch_outcome",
             ptr1->x_param_predictable_branch_outcome,
             ptr2->x_param_predictable_branch_outcome);

  if (ptr1->x_param_prefetch_dynamic_strides != ptr2->x_param_prefetch_dynamic_strides)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_prefetch_dynamic_strides",
             ptr1->x_param_prefetch_dynamic_strides,
             ptr2->x_param_prefetch_dynamic_strides);

  if (ptr1->x_param_prefetch_latency != ptr2->x_param_prefetch_latency)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_prefetch_latency",
             ptr1->x_param_prefetch_latency,
             ptr2->x_param_prefetch_latency);

  if (ptr1->x_param_prefetch_min_insn_to_mem_ratio != ptr2->x_param_prefetch_min_insn_to_mem_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_prefetch_min_insn_to_mem_ratio",
             ptr1->x_param_prefetch_min_insn_to_mem_ratio,
             ptr2->x_param_prefetch_min_insn_to_mem_ratio);

  if (ptr1->x_param_prefetch_minimum_stride != ptr2->x_param_prefetch_minimum_stride)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_prefetch_minimum_stride",
             ptr1->x_param_prefetch_minimum_stride,
             ptr2->x_param_prefetch_minimum_stride);

  if (ptr1->x_param_ranger_logical_depth != ptr2->x_param_ranger_logical_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ranger_logical_depth",
             ptr1->x_param_ranger_logical_depth,
             ptr2->x_param_ranger_logical_depth);

  if (ptr1->x_param_relation_block_limit != ptr2->x_param_relation_block_limit)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_relation_block_limit",
             ptr1->x_param_relation_block_limit,
             ptr2->x_param_relation_block_limit);

  if (ptr1->x_param_rpo_vn_max_loop_depth != ptr2->x_param_rpo_vn_max_loop_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_rpo_vn_max_loop_depth",
             ptr1->x_param_rpo_vn_max_loop_depth,
             ptr2->x_param_rpo_vn_max_loop_depth);

  if (ptr1->x_param_sccvn_max_alias_queries_per_access != ptr2->x_param_sccvn_max_alias_queries_per_access)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sccvn_max_alias_queries_per_access",
             ptr1->x_param_sccvn_max_alias_queries_per_access,
             ptr2->x_param_sccvn_max_alias_queries_per_access);

  if (ptr1->x_param_scev_max_expr_complexity != ptr2->x_param_scev_max_expr_complexity)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_scev_max_expr_complexity",
             ptr1->x_param_scev_max_expr_complexity,
             ptr2->x_param_scev_max_expr_complexity);

  if (ptr1->x_param_scev_max_expr_size != ptr2->x_param_scev_max_expr_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_scev_max_expr_size",
             ptr1->x_param_scev_max_expr_size,
             ptr2->x_param_scev_max_expr_size);

  if (ptr1->x_param_sched_autopref_queue_depth != ptr2->x_param_sched_autopref_queue_depth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sched_autopref_queue_depth",
             ptr1->x_param_sched_autopref_queue_depth,
             ptr2->x_param_sched_autopref_queue_depth);

  if (ptr1->x_param_sched_mem_true_dep_cost != ptr2->x_param_sched_mem_true_dep_cost)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sched_mem_true_dep_cost",
             ptr1->x_param_sched_mem_true_dep_cost,
             ptr2->x_param_sched_mem_true_dep_cost);

  if (ptr1->x_param_sched_pressure_algorithm != ptr2->x_param_sched_pressure_algorithm)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sched_pressure_algorithm",
             ptr1->x_param_sched_pressure_algorithm,
             ptr2->x_param_sched_pressure_algorithm);

  if (ptr1->x_param_sched_spec_prob_cutoff != ptr2->x_param_sched_spec_prob_cutoff)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sched_spec_prob_cutoff",
             ptr1->x_param_sched_spec_prob_cutoff,
             ptr2->x_param_sched_spec_prob_cutoff);

  if (ptr1->x_param_sched_state_edge_prob_cutoff != ptr2->x_param_sched_state_edge_prob_cutoff)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sched_state_edge_prob_cutoff",
             ptr1->x_param_sched_state_edge_prob_cutoff,
             ptr2->x_param_sched_state_edge_prob_cutoff);

  if (ptr1->x_param_selsched_insns_to_rename != ptr2->x_param_selsched_insns_to_rename)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_selsched_insns_to_rename",
             ptr1->x_param_selsched_insns_to_rename,
             ptr2->x_param_selsched_insns_to_rename);

  if (ptr1->x_param_selsched_max_lookahead != ptr2->x_param_selsched_max_lookahead)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_selsched_max_lookahead",
             ptr1->x_param_selsched_max_lookahead,
             ptr2->x_param_selsched_max_lookahead);

  if (ptr1->x_param_selsched_max_sched_times != ptr2->x_param_selsched_max_sched_times)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_selsched_max_sched_times",
             ptr1->x_param_selsched_max_sched_times,
             ptr2->x_param_selsched_max_sched_times);

  if (ptr1->x_param_simultaneous_prefetches != ptr2->x_param_simultaneous_prefetches)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_simultaneous_prefetches",
             ptr1->x_param_simultaneous_prefetches,
             ptr2->x_param_simultaneous_prefetches);

  if (ptr1->x_param_sink_frequency_threshold != ptr2->x_param_sink_frequency_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sink_frequency_threshold",
             ptr1->x_param_sink_frequency_threshold,
             ptr2->x_param_sink_frequency_threshold);

  if (ptr1->x_param_sms_dfa_history != ptr2->x_param_sms_dfa_history)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sms_dfa_history",
             ptr1->x_param_sms_dfa_history,
             ptr2->x_param_sms_dfa_history);

  if (ptr1->x_param_sms_loop_average_count_threshold != ptr2->x_param_sms_loop_average_count_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sms_loop_average_count_threshold",
             ptr1->x_param_sms_loop_average_count_threshold,
             ptr2->x_param_sms_loop_average_count_threshold);

  if (ptr1->x_param_sms_max_ii_factor != ptr2->x_param_sms_max_ii_factor)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sms_max_ii_factor",
             ptr1->x_param_sms_max_ii_factor,
             ptr2->x_param_sms_max_ii_factor);

  if (ptr1->x_param_sms_min_sc != ptr2->x_param_sms_min_sc)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sms_min_sc",
             ptr1->x_param_sms_min_sc,
             ptr2->x_param_sms_min_sc);

  if (ptr1->x_param_sra_max_propagations != ptr2->x_param_sra_max_propagations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sra_max_propagations",
             ptr1->x_param_sra_max_propagations,
             ptr2->x_param_sra_max_propagations);

  if (ptr1->x_param_sra_max_scalarization_size_size != ptr2->x_param_sra_max_scalarization_size_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sra_max_scalarization_size_size",
             ptr1->x_param_sra_max_scalarization_size_size,
             ptr2->x_param_sra_max_scalarization_size_size);

  if (ptr1->x_param_sra_max_scalarization_size_speed != ptr2->x_param_sra_max_scalarization_size_speed)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_sra_max_scalarization_size_speed",
             ptr1->x_param_sra_max_scalarization_size_speed,
             ptr2->x_param_sra_max_scalarization_size_speed);

  if (ptr1->x_param_ssa_name_def_chain_limit != ptr2->x_param_ssa_name_def_chain_limit)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ssa_name_def_chain_limit",
             ptr1->x_param_ssa_name_def_chain_limit,
             ptr2->x_param_ssa_name_def_chain_limit);

  if (ptr1->x_param_ssp_buffer_size != ptr2->x_param_ssp_buffer_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_ssp_buffer_size",
             ptr1->x_param_ssp_buffer_size,
             ptr2->x_param_ssp_buffer_size);

  if (ptr1->x_param_stack_clash_protection_guard_size != ptr2->x_param_stack_clash_protection_guard_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_stack_clash_protection_guard_size",
             ptr1->x_param_stack_clash_protection_guard_size,
             ptr2->x_param_stack_clash_protection_guard_size);

  if (ptr1->x_param_stack_clash_protection_probe_interval != ptr2->x_param_stack_clash_protection_probe_interval)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_stack_clash_protection_probe_interval",
             ptr1->x_param_stack_clash_protection_probe_interval,
             ptr2->x_param_stack_clash_protection_probe_interval);

  if (ptr1->x_param_store_merging_allow_unaligned != ptr2->x_param_store_merging_allow_unaligned)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_store_merging_allow_unaligned",
             ptr1->x_param_store_merging_allow_unaligned,
             ptr2->x_param_store_merging_allow_unaligned);

  if (ptr1->x_param_store_merging_max_size != ptr2->x_param_store_merging_max_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_store_merging_max_size",
             ptr1->x_param_store_merging_max_size,
             ptr2->x_param_store_merging_max_size);

  if (ptr1->x_param_switch_conversion_branch_ratio != ptr2->x_param_switch_conversion_branch_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_switch_conversion_branch_ratio",
             ptr1->x_param_switch_conversion_branch_ratio,
             ptr2->x_param_switch_conversion_branch_ratio);

  if (ptr1->x_param_tm_max_aggregate_size != ptr2->x_param_tm_max_aggregate_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tm_max_aggregate_size",
             ptr1->x_param_tm_max_aggregate_size,
             ptr2->x_param_tm_max_aggregate_size);

  if (ptr1->x_param_tracer_dynamic_coverage_feedback != ptr2->x_param_tracer_dynamic_coverage_feedback)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_dynamic_coverage_feedback",
             ptr1->x_param_tracer_dynamic_coverage_feedback,
             ptr2->x_param_tracer_dynamic_coverage_feedback);

  if (ptr1->x_param_tracer_dynamic_coverage != ptr2->x_param_tracer_dynamic_coverage)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_dynamic_coverage",
             ptr1->x_param_tracer_dynamic_coverage,
             ptr2->x_param_tracer_dynamic_coverage);

  if (ptr1->x_param_tracer_max_code_growth != ptr2->x_param_tracer_max_code_growth)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_max_code_growth",
             ptr1->x_param_tracer_max_code_growth,
             ptr2->x_param_tracer_max_code_growth);

  if (ptr1->x_param_tracer_min_branch_probability_feedback != ptr2->x_param_tracer_min_branch_probability_feedback)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_probability_feedback",
             ptr1->x_param_tracer_min_branch_probability_feedback,
             ptr2->x_param_tracer_min_branch_probability_feedback);

  if (ptr1->x_param_tracer_min_branch_probability != ptr2->x_param_tracer_min_branch_probability)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_probability",
             ptr1->x_param_tracer_min_branch_probability,
             ptr2->x_param_tracer_min_branch_probability);

  if (ptr1->x_param_tracer_min_branch_ratio != ptr2->x_param_tracer_min_branch_ratio)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tracer_min_branch_ratio",
             ptr1->x_param_tracer_min_branch_ratio,
             ptr2->x_param_tracer_min_branch_ratio);

  if (ptr1->x_param_tree_reassoc_width != ptr2->x_param_tree_reassoc_width)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_tree_reassoc_width",
             ptr1->x_param_tree_reassoc_width,
             ptr2->x_param_tree_reassoc_width);

  if (ptr1->x_param_uninit_control_dep_attempts != ptr2->x_param_uninit_control_dep_attempts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_uninit_control_dep_attempts",
             ptr1->x_param_uninit_control_dep_attempts,
             ptr2->x_param_uninit_control_dep_attempts);

  if (ptr1->x_param_uninlined_function_insns != ptr2->x_param_uninlined_function_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_uninlined_function_insns",
             ptr1->x_param_uninlined_function_insns,
             ptr2->x_param_uninlined_function_insns);

  if (ptr1->x_param_uninlined_function_time != ptr2->x_param_uninlined_function_time)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_uninlined_function_time",
             ptr1->x_param_uninlined_function_time,
             ptr2->x_param_uninlined_function_time);

  if (ptr1->x_param_uninlined_function_thunk_insns != ptr2->x_param_uninlined_function_thunk_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_uninlined_function_thunk_insns",
             ptr1->x_param_uninlined_function_thunk_insns,
             ptr2->x_param_uninlined_function_thunk_insns);

  if (ptr1->x_param_uninlined_function_thunk_time != ptr2->x_param_uninlined_function_thunk_time)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_uninlined_function_thunk_time",
             ptr1->x_param_uninlined_function_thunk_time,
             ptr2->x_param_uninlined_function_thunk_time);

  if (ptr1->x_param_unlikely_bb_count_fraction != ptr2->x_param_unlikely_bb_count_fraction)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_unlikely_bb_count_fraction",
             ptr1->x_param_unlikely_bb_count_fraction,
             ptr2->x_param_unlikely_bb_count_fraction);

  if (ptr1->x_param_unroll_jam_max_unroll != ptr2->x_param_unroll_jam_max_unroll)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_unroll_jam_max_unroll",
             ptr1->x_param_unroll_jam_max_unroll,
             ptr2->x_param_unroll_jam_max_unroll);

  if (ptr1->x_param_unroll_jam_min_percent != ptr2->x_param_unroll_jam_min_percent)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_unroll_jam_min_percent",
             ptr1->x_param_unroll_jam_min_percent,
             ptr2->x_param_unroll_jam_min_percent);

  if (ptr1->x_param_use_after_scope_direct_emission_threshold != ptr2->x_param_use_after_scope_direct_emission_threshold)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_use_after_scope_direct_emission_threshold",
             ptr1->x_param_use_after_scope_direct_emission_threshold,
             ptr2->x_param_use_after_scope_direct_emission_threshold);

  if (ptr1->x_param_vect_epilogues_nomask != ptr2->x_param_vect_epilogues_nomask)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_epilogues_nomask",
             ptr1->x_param_vect_epilogues_nomask,
             ptr2->x_param_vect_epilogues_nomask);

  if (ptr1->x_param_vect_induction_float != ptr2->x_param_vect_induction_float)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_induction_float",
             ptr1->x_param_vect_induction_float,
             ptr2->x_param_vect_induction_float);

  if (ptr1->x_param_vect_inner_loop_cost_factor != ptr2->x_param_vect_inner_loop_cost_factor)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_inner_loop_cost_factor",
             ptr1->x_param_vect_inner_loop_cost_factor,
             ptr2->x_param_vect_inner_loop_cost_factor);

  if (ptr1->x_param_vect_max_peeling_for_alignment != ptr2->x_param_vect_max_peeling_for_alignment)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_max_peeling_for_alignment",
             ptr1->x_param_vect_max_peeling_for_alignment,
             ptr2->x_param_vect_max_peeling_for_alignment);

  if (ptr1->x_param_vect_max_version_for_alias_checks != ptr2->x_param_vect_max_version_for_alias_checks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_max_version_for_alias_checks",
             ptr1->x_param_vect_max_version_for_alias_checks,
             ptr2->x_param_vect_max_version_for_alias_checks);

  if (ptr1->x_param_vect_max_version_for_alignment_checks != ptr2->x_param_vect_max_version_for_alignment_checks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_max_version_for_alignment_checks",
             ptr1->x_param_vect_max_version_for_alignment_checks,
             ptr2->x_param_vect_max_version_for_alignment_checks);

  if (ptr1->x_param_vect_partial_vector_usage != ptr2->x_param_vect_partial_vector_usage)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "param_vect_partial_vector_usage",
             ptr1->x_param_vect_partial_vector_usage,
             ptr2->x_param_vect_partial_vector_usage);

  if (ptr1->x_flag_sched_stalled_insns != ptr2->x_flag_sched_stalled_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_stalled_insns",
             ptr1->x_flag_sched_stalled_insns,
             ptr2->x_flag_sched_stalled_insns);

  if (ptr1->x_flag_sched_stalled_insns_dep != ptr2->x_flag_sched_stalled_insns_dep)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_stalled_insns_dep",
             ptr1->x_flag_sched_stalled_insns_dep,
             ptr2->x_flag_sched_stalled_insns_dep);

  if (ptr1->x_flag_tree_parallelize_loops != ptr2->x_flag_tree_parallelize_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_parallelize_loops",
             ptr1->x_flag_tree_parallelize_loops,
             ptr2->x_flag_tree_parallelize_loops);

  if (ptr1->x_param_evrp_mode != ptr2->x_param_evrp_mode)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "param_evrp_mode",
           (int) ptr1->x_param_evrp_mode,
           (int) ptr2->x_param_evrp_mode);

  if (ptr1->x_param_ranger_debug != ptr2->x_param_ranger_debug)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "param_ranger_debug",
           (int) ptr1->x_param_ranger_debug,
           (int) ptr2->x_param_ranger_debug);

  if (ptr1->x_param_threader_debug != ptr2->x_param_threader_debug)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "param_threader_debug",
           (int) ptr1->x_param_threader_debug,
           (int) ptr2->x_param_threader_debug);

  if (ptr1->x_param_vrp1_mode != ptr2->x_param_vrp1_mode)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "param_vrp1_mode",
           (int) ptr1->x_param_vrp1_mode,
           (int) ptr2->x_param_vrp1_mode);

  if (ptr1->x_param_vrp2_mode != ptr2->x_param_vrp2_mode)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "param_vrp2_mode",
           (int) ptr1->x_param_vrp2_mode,
           (int) ptr2->x_param_vrp2_mode);

  if (ptr1->x_flag_excess_precision != ptr2->x_flag_excess_precision)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_excess_precision",
           (int) ptr1->x_flag_excess_precision,
           (int) ptr2->x_flag_excess_precision);

  if (ptr1->x_flag_fp_contract_mode != ptr2->x_flag_fp_contract_mode)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_fp_contract_mode",
           (int) ptr1->x_flag_fp_contract_mode,
           (int) ptr2->x_flag_fp_contract_mode);

  if (ptr1->x_flag_ira_algorithm != ptr2->x_flag_ira_algorithm)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_ira_algorithm",
           (int) ptr1->x_flag_ira_algorithm,
           (int) ptr2->x_flag_ira_algorithm);

  if (ptr1->x_flag_ira_region != ptr2->x_flag_ira_region)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_ira_region",
           (int) ptr1->x_flag_ira_region,
           (int) ptr2->x_flag_ira_region);

  if (ptr1->x_flag_live_patching != ptr2->x_flag_live_patching)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_live_patching",
           (int) ptr1->x_flag_live_patching,
           (int) ptr2->x_flag_live_patching);

  if (ptr1->x_flag_reorder_blocks_algorithm != ptr2->x_flag_reorder_blocks_algorithm)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_reorder_blocks_algorithm",
           (int) ptr1->x_flag_reorder_blocks_algorithm,
           (int) ptr2->x_flag_reorder_blocks_algorithm);

  if (ptr1->x_flag_simd_cost_model != ptr2->x_flag_simd_cost_model)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_simd_cost_model",
           (int) ptr1->x_flag_simd_cost_model,
           (int) ptr2->x_flag_simd_cost_model);

  if (ptr1->x_flag_stack_reuse != ptr2->x_flag_stack_reuse)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_stack_reuse",
           (int) ptr1->x_flag_stack_reuse,
           (int) ptr2->x_flag_stack_reuse);

  if (ptr1->x_flag_auto_var_init != ptr2->x_flag_auto_var_init)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_auto_var_init",
           (int) ptr1->x_flag_auto_var_init,
           (int) ptr2->x_flag_auto_var_init);

  if (ptr1->x_flag_vect_cost_model != ptr2->x_flag_vect_cost_model)
  fprintf (file, "%*s%s (%#x/%#x)\n",
           indent_to, "",
           "flag_vect_cost_model",
           (int) ptr1->x_flag_vect_cost_model,
           (int) ptr2->x_flag_vect_cost_model);

  if (ptr1->x_optimize != ptr2->x_optimize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "optimize",
             ptr1->x_optimize,
             ptr2->x_optimize);

  if (ptr1->x_optimize_size != ptr2->x_optimize_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "optimize_size",
             ptr1->x_optimize_size,
             ptr2->x_optimize_size);

  if (ptr1->x_optimize_debug != ptr2->x_optimize_debug)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "optimize_debug",
             ptr1->x_optimize_debug,
             ptr2->x_optimize_debug);

  if (ptr1->x_optimize_fast != ptr2->x_optimize_fast)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "optimize_fast",
             ptr1->x_optimize_fast,
             ptr2->x_optimize_fast);

  if (ptr1->x_warn_inline != ptr2->x_warn_inline)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "warn_inline",
             ptr1->x_warn_inline,
             ptr2->x_warn_inline);

  if (ptr1->x_flag_aggressive_loop_optimizations != ptr2->x_flag_aggressive_loop_optimizations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_aggressive_loop_optimizations",
             ptr1->x_flag_aggressive_loop_optimizations,
             ptr2->x_flag_aggressive_loop_optimizations);

  if (ptr1->x_flag_align_functions != ptr2->x_flag_align_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_align_functions",
             ptr1->x_flag_align_functions,
             ptr2->x_flag_align_functions);

  if (ptr1->x_flag_align_jumps != ptr2->x_flag_align_jumps)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_align_jumps",
             ptr1->x_flag_align_jumps,
             ptr2->x_flag_align_jumps);

  if (ptr1->x_flag_align_labels != ptr2->x_flag_align_labels)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_align_labels",
             ptr1->x_flag_align_labels,
             ptr2->x_flag_align_labels);

  if (ptr1->x_flag_align_loops != ptr2->x_flag_align_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_align_loops",
             ptr1->x_flag_align_loops,
             ptr2->x_flag_align_loops);

  if (ptr1->x_flag_allocation_dce != ptr2->x_flag_allocation_dce)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_allocation_dce",
             ptr1->x_flag_allocation_dce,
             ptr2->x_flag_allocation_dce);

  if (ptr1->x_flag_store_data_races != ptr2->x_flag_store_data_races)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_store_data_races",
             ptr1->x_flag_store_data_races,
             ptr2->x_flag_store_data_races);

  if (ptr1->x_flag_associative_math != ptr2->x_flag_associative_math)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_associative_math",
             ptr1->x_flag_associative_math,
             ptr2->x_flag_associative_math);

  if (ptr1->x_flag_asynchronous_unwind_tables != ptr2->x_flag_asynchronous_unwind_tables)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_asynchronous_unwind_tables",
             ptr1->x_flag_asynchronous_unwind_tables,
             ptr2->x_flag_asynchronous_unwind_tables);

  if (ptr1->x_flag_auto_inc_dec != ptr2->x_flag_auto_inc_dec)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_auto_inc_dec",
             ptr1->x_flag_auto_inc_dec,
             ptr2->x_flag_auto_inc_dec);

  if (ptr1->x_flag_bit_tests != ptr2->x_flag_bit_tests)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_bit_tests",
             ptr1->x_flag_bit_tests,
             ptr2->x_flag_bit_tests);

  if (ptr1->x_flag_branch_on_count_reg != ptr2->x_flag_branch_on_count_reg)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_branch_on_count_reg",
             ptr1->x_flag_branch_on_count_reg,
             ptr2->x_flag_branch_on_count_reg);

  if (ptr1->x_flag_branch_probabilities != ptr2->x_flag_branch_probabilities)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_branch_probabilities",
             ptr1->x_flag_branch_probabilities,
             ptr2->x_flag_branch_probabilities);

  if (ptr1->x_flag_caller_saves != ptr2->x_flag_caller_saves)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_caller_saves",
             ptr1->x_flag_caller_saves,
             ptr2->x_flag_caller_saves);

  if (ptr1->x_flag_code_hoisting != ptr2->x_flag_code_hoisting)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_code_hoisting",
             ptr1->x_flag_code_hoisting,
             ptr2->x_flag_code_hoisting);

  if (ptr1->x_flag_combine_stack_adjustments != ptr2->x_flag_combine_stack_adjustments)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_combine_stack_adjustments",
             ptr1->x_flag_combine_stack_adjustments,
             ptr2->x_flag_combine_stack_adjustments);

  if (ptr1->x_flag_compare_elim_after_reload != ptr2->x_flag_compare_elim_after_reload)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_compare_elim_after_reload",
             ptr1->x_flag_compare_elim_after_reload,
             ptr2->x_flag_compare_elim_after_reload);

  if (ptr1->x_flag_conserve_stack != ptr2->x_flag_conserve_stack)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_conserve_stack",
             ptr1->x_flag_conserve_stack,
             ptr2->x_flag_conserve_stack);

  if (ptr1->x_flag_cprop_registers != ptr2->x_flag_cprop_registers)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_cprop_registers",
             ptr1->x_flag_cprop_registers,
             ptr2->x_flag_cprop_registers);

  if (ptr1->x_flag_crossjumping != ptr2->x_flag_crossjumping)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_crossjumping",
             ptr1->x_flag_crossjumping,
             ptr2->x_flag_crossjumping);

  if (ptr1->x_flag_cse_follow_jumps != ptr2->x_flag_cse_follow_jumps)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_cse_follow_jumps",
             ptr1->x_flag_cse_follow_jumps,
             ptr2->x_flag_cse_follow_jumps);

  if (ptr1->x_flag_cx_fortran_rules != ptr2->x_flag_cx_fortran_rules)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_cx_fortran_rules",
             ptr1->x_flag_cx_fortran_rules,
             ptr2->x_flag_cx_fortran_rules);

  if (ptr1->x_flag_cx_limited_range != ptr2->x_flag_cx_limited_range)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_cx_limited_range",
             ptr1->x_flag_cx_limited_range,
             ptr2->x_flag_cx_limited_range);

  if (ptr1->x_flag_dce != ptr2->x_flag_dce)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_dce",
             ptr1->x_flag_dce,
             ptr2->x_flag_dce);

  if (ptr1->x_flag_defer_pop != ptr2->x_flag_defer_pop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_defer_pop",
             ptr1->x_flag_defer_pop,
             ptr2->x_flag_defer_pop);

  if (ptr1->x_flag_delayed_branch != ptr2->x_flag_delayed_branch)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_delayed_branch",
             ptr1->x_flag_delayed_branch,
             ptr2->x_flag_delayed_branch);

  if (ptr1->x_flag_delete_dead_exceptions != ptr2->x_flag_delete_dead_exceptions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_delete_dead_exceptions",
             ptr1->x_flag_delete_dead_exceptions,
             ptr2->x_flag_delete_dead_exceptions);

  if (ptr1->x_flag_delete_null_pointer_checks != ptr2->x_flag_delete_null_pointer_checks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_delete_null_pointer_checks",
             ptr1->x_flag_delete_null_pointer_checks,
             ptr2->x_flag_delete_null_pointer_checks);

  if (ptr1->x_flag_devirtualize != ptr2->x_flag_devirtualize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_devirtualize",
             ptr1->x_flag_devirtualize,
             ptr2->x_flag_devirtualize);

  if (ptr1->x_flag_devirtualize_speculatively != ptr2->x_flag_devirtualize_speculatively)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_devirtualize_speculatively",
             ptr1->x_flag_devirtualize_speculatively,
             ptr2->x_flag_devirtualize_speculatively);

  if (ptr1->x_flag_dse != ptr2->x_flag_dse)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_dse",
             ptr1->x_flag_dse,
             ptr2->x_flag_dse);

  if (ptr1->x_flag_early_inlining != ptr2->x_flag_early_inlining)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_early_inlining",
             ptr1->x_flag_early_inlining,
             ptr2->x_flag_early_inlining);

  if (ptr1->x_flag_exceptions != ptr2->x_flag_exceptions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_exceptions",
             ptr1->x_flag_exceptions,
             ptr2->x_flag_exceptions);

  if (ptr1->x_flag_expensive_optimizations != ptr2->x_flag_expensive_optimizations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_expensive_optimizations",
             ptr1->x_flag_expensive_optimizations,
             ptr2->x_flag_expensive_optimizations);

  if (ptr1->x_flag_finite_loops != ptr2->x_flag_finite_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_finite_loops",
             ptr1->x_flag_finite_loops,
             ptr2->x_flag_finite_loops);

  if (ptr1->x_flag_finite_math_only != ptr2->x_flag_finite_math_only)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_finite_math_only",
             ptr1->x_flag_finite_math_only,
             ptr2->x_flag_finite_math_only);

  if (ptr1->x_flag_float_store != ptr2->x_flag_float_store)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_float_store",
             ptr1->x_flag_float_store,
             ptr2->x_flag_float_store);

  if (ptr1->x_flag_fold_simple_inlines != ptr2->x_flag_fold_simple_inlines)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_fold_simple_inlines",
             ptr1->x_flag_fold_simple_inlines,
             ptr2->x_flag_fold_simple_inlines);

  if (ptr1->x_flag_forward_propagate != ptr2->x_flag_forward_propagate)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_forward_propagate",
             ptr1->x_flag_forward_propagate,
             ptr2->x_flag_forward_propagate);

  if (ptr1->x_flag_fp_int_builtin_inexact != ptr2->x_flag_fp_int_builtin_inexact)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_fp_int_builtin_inexact",
             ptr1->x_flag_fp_int_builtin_inexact,
             ptr2->x_flag_fp_int_builtin_inexact);

  if (ptr1->x_flag_no_function_cse != ptr2->x_flag_no_function_cse)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_no_function_cse",
             ptr1->x_flag_no_function_cse,
             ptr2->x_flag_no_function_cse);

  if (ptr1->x_flag_gcse != ptr2->x_flag_gcse)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_gcse",
             ptr1->x_flag_gcse,
             ptr2->x_flag_gcse);

  if (ptr1->x_flag_gcse_after_reload != ptr2->x_flag_gcse_after_reload)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_gcse_after_reload",
             ptr1->x_flag_gcse_after_reload,
             ptr2->x_flag_gcse_after_reload);

  if (ptr1->x_flag_gcse_las != ptr2->x_flag_gcse_las)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_gcse_las",
             ptr1->x_flag_gcse_las,
             ptr2->x_flag_gcse_las);

  if (ptr1->x_flag_gcse_lm != ptr2->x_flag_gcse_lm)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_gcse_lm",
             ptr1->x_flag_gcse_lm,
             ptr2->x_flag_gcse_lm);

  if (ptr1->x_flag_gcse_sm != ptr2->x_flag_gcse_sm)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_gcse_sm",
             ptr1->x_flag_gcse_sm,
             ptr2->x_flag_gcse_sm);

  if (ptr1->x_flag_graphite != ptr2->x_flag_graphite)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_graphite",
             ptr1->x_flag_graphite,
             ptr2->x_flag_graphite);

  if (ptr1->x_flag_graphite_identity != ptr2->x_flag_graphite_identity)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_graphite_identity",
             ptr1->x_flag_graphite_identity,
             ptr2->x_flag_graphite_identity);

  if (ptr1->x_flag_guess_branch_prob != ptr2->x_flag_guess_branch_prob)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_guess_branch_prob",
             ptr1->x_flag_guess_branch_prob,
             ptr2->x_flag_guess_branch_prob);

  if (ptr1->x_flag_harden_compares != ptr2->x_flag_harden_compares)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_harden_compares",
             ptr1->x_flag_harden_compares,
             ptr2->x_flag_harden_compares);

  if (ptr1->x_flag_harden_conditional_branches != ptr2->x_flag_harden_conditional_branches)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_harden_conditional_branches",
             ptr1->x_flag_harden_conditional_branches,
             ptr2->x_flag_harden_conditional_branches);

  if (ptr1->x_flag_hoist_adjacent_loads != ptr2->x_flag_hoist_adjacent_loads)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_hoist_adjacent_loads",
             ptr1->x_flag_hoist_adjacent_loads,
             ptr2->x_flag_hoist_adjacent_loads);

  if (ptr1->x_flag_if_conversion != ptr2->x_flag_if_conversion)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_if_conversion",
             ptr1->x_flag_if_conversion,
             ptr2->x_flag_if_conversion);

  if (ptr1->x_flag_if_conversion2 != ptr2->x_flag_if_conversion2)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_if_conversion2",
             ptr1->x_flag_if_conversion2,
             ptr2->x_flag_if_conversion2);

  if (ptr1->x_flag_indirect_inlining != ptr2->x_flag_indirect_inlining)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_indirect_inlining",
             ptr1->x_flag_indirect_inlining,
             ptr2->x_flag_indirect_inlining);

  if (ptr1->x_flag_no_inline != ptr2->x_flag_no_inline)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_no_inline",
             ptr1->x_flag_no_inline,
             ptr2->x_flag_no_inline);

  if (ptr1->x_flag_inline_atomics != ptr2->x_flag_inline_atomics)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_inline_atomics",
             ptr1->x_flag_inline_atomics,
             ptr2->x_flag_inline_atomics);

  if (ptr1->x_flag_inline_functions != ptr2->x_flag_inline_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_inline_functions",
             ptr1->x_flag_inline_functions,
             ptr2->x_flag_inline_functions);

  if (ptr1->x_flag_inline_functions_called_once != ptr2->x_flag_inline_functions_called_once)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_inline_functions_called_once",
             ptr1->x_flag_inline_functions_called_once,
             ptr2->x_flag_inline_functions_called_once);

  if (ptr1->x_flag_inline_small_functions != ptr2->x_flag_inline_small_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_inline_small_functions",
             ptr1->x_flag_inline_small_functions,
             ptr2->x_flag_inline_small_functions);

  if (ptr1->x_flag_ipa_bit_cp != ptr2->x_flag_ipa_bit_cp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_bit_cp",
             ptr1->x_flag_ipa_bit_cp,
             ptr2->x_flag_ipa_bit_cp);

  if (ptr1->x_flag_ipa_cp != ptr2->x_flag_ipa_cp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_cp",
             ptr1->x_flag_ipa_cp,
             ptr2->x_flag_ipa_cp);

  if (ptr1->x_flag_ipa_cp_clone != ptr2->x_flag_ipa_cp_clone)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_cp_clone",
             ptr1->x_flag_ipa_cp_clone,
             ptr2->x_flag_ipa_cp_clone);

  if (ptr1->x_flag_ipa_icf != ptr2->x_flag_ipa_icf)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_icf",
             ptr1->x_flag_ipa_icf,
             ptr2->x_flag_ipa_icf);

  if (ptr1->x_flag_ipa_icf_functions != ptr2->x_flag_ipa_icf_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_icf_functions",
             ptr1->x_flag_ipa_icf_functions,
             ptr2->x_flag_ipa_icf_functions);

  if (ptr1->x_flag_ipa_icf_variables != ptr2->x_flag_ipa_icf_variables)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_icf_variables",
             ptr1->x_flag_ipa_icf_variables,
             ptr2->x_flag_ipa_icf_variables);

  if (ptr1->x_flag_ipa_modref != ptr2->x_flag_ipa_modref)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_modref",
             ptr1->x_flag_ipa_modref,
             ptr2->x_flag_ipa_modref);

  if (ptr1->x_flag_ipa_profile != ptr2->x_flag_ipa_profile)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_profile",
             ptr1->x_flag_ipa_profile,
             ptr2->x_flag_ipa_profile);

  if (ptr1->x_flag_ipa_pta != ptr2->x_flag_ipa_pta)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_pta",
             ptr1->x_flag_ipa_pta,
             ptr2->x_flag_ipa_pta);

  if (ptr1->x_flag_ipa_pure_const != ptr2->x_flag_ipa_pure_const)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_pure_const",
             ptr1->x_flag_ipa_pure_const,
             ptr2->x_flag_ipa_pure_const);

  if (ptr1->x_flag_ipa_ra != ptr2->x_flag_ipa_ra)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_ra",
             ptr1->x_flag_ipa_ra,
             ptr2->x_flag_ipa_ra);

  if (ptr1->x_flag_ipa_reference != ptr2->x_flag_ipa_reference)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_reference",
             ptr1->x_flag_ipa_reference,
             ptr2->x_flag_ipa_reference);

  if (ptr1->x_flag_ipa_reference_addressable != ptr2->x_flag_ipa_reference_addressable)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_reference_addressable",
             ptr1->x_flag_ipa_reference_addressable,
             ptr2->x_flag_ipa_reference_addressable);

  if (ptr1->x_flag_ipa_sra != ptr2->x_flag_ipa_sra)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_sra",
             ptr1->x_flag_ipa_sra,
             ptr2->x_flag_ipa_sra);

  if (ptr1->x_flag_ipa_stack_alignment != ptr2->x_flag_ipa_stack_alignment)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_stack_alignment",
             ptr1->x_flag_ipa_stack_alignment,
             ptr2->x_flag_ipa_stack_alignment);

  if (ptr1->x_flag_ipa_strict_aliasing != ptr2->x_flag_ipa_strict_aliasing)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_strict_aliasing",
             ptr1->x_flag_ipa_strict_aliasing,
             ptr2->x_flag_ipa_strict_aliasing);

  if (ptr1->x_flag_ipa_vrp != ptr2->x_flag_ipa_vrp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ipa_vrp",
             ptr1->x_flag_ipa_vrp,
             ptr2->x_flag_ipa_vrp);

  if (ptr1->x_flag_ira_hoist_pressure != ptr2->x_flag_ira_hoist_pressure)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ira_hoist_pressure",
             ptr1->x_flag_ira_hoist_pressure,
             ptr2->x_flag_ira_hoist_pressure);

  if (ptr1->x_flag_ira_loop_pressure != ptr2->x_flag_ira_loop_pressure)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ira_loop_pressure",
             ptr1->x_flag_ira_loop_pressure,
             ptr2->x_flag_ira_loop_pressure);

  if (ptr1->x_flag_ira_share_save_slots != ptr2->x_flag_ira_share_save_slots)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ira_share_save_slots",
             ptr1->x_flag_ira_share_save_slots,
             ptr2->x_flag_ira_share_save_slots);

  if (ptr1->x_flag_ira_share_spill_slots != ptr2->x_flag_ira_share_spill_slots)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ira_share_spill_slots",
             ptr1->x_flag_ira_share_spill_slots,
             ptr2->x_flag_ira_share_spill_slots);

  if (ptr1->x_flag_isolate_erroneous_paths_attribute != ptr2->x_flag_isolate_erroneous_paths_attribute)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_isolate_erroneous_paths_attribute",
             ptr1->x_flag_isolate_erroneous_paths_attribute,
             ptr2->x_flag_isolate_erroneous_paths_attribute);

  if (ptr1->x_flag_isolate_erroneous_paths_dereference != ptr2->x_flag_isolate_erroneous_paths_dereference)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_isolate_erroneous_paths_dereference",
             ptr1->x_flag_isolate_erroneous_paths_dereference,
             ptr2->x_flag_isolate_erroneous_paths_dereference);

  if (ptr1->x_flag_ivopts != ptr2->x_flag_ivopts)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ivopts",
             ptr1->x_flag_ivopts,
             ptr2->x_flag_ivopts);

  if (ptr1->x_flag_jump_tables != ptr2->x_flag_jump_tables)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_jump_tables",
             ptr1->x_flag_jump_tables,
             ptr2->x_flag_jump_tables);

  if (ptr1->x_flag_keep_gc_roots_live != ptr2->x_flag_keep_gc_roots_live)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_keep_gc_roots_live",
             ptr1->x_flag_keep_gc_roots_live,
             ptr2->x_flag_keep_gc_roots_live);

  if (ptr1->x_flag_lifetime_dse != ptr2->x_flag_lifetime_dse)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_lifetime_dse",
             ptr1->x_flag_lifetime_dse,
             ptr2->x_flag_lifetime_dse);

  if (ptr1->x_flag_limit_function_alignment != ptr2->x_flag_limit_function_alignment)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_limit_function_alignment",
             ptr1->x_flag_limit_function_alignment,
             ptr2->x_flag_limit_function_alignment);

  if (ptr1->x_flag_live_range_shrinkage != ptr2->x_flag_live_range_shrinkage)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_live_range_shrinkage",
             ptr1->x_flag_live_range_shrinkage,
             ptr2->x_flag_live_range_shrinkage);

  if (ptr1->x_flag_loop_interchange != ptr2->x_flag_loop_interchange)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_loop_interchange",
             ptr1->x_flag_loop_interchange,
             ptr2->x_flag_loop_interchange);

  if (ptr1->x_flag_loop_nest_optimize != ptr2->x_flag_loop_nest_optimize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_loop_nest_optimize",
             ptr1->x_flag_loop_nest_optimize,
             ptr2->x_flag_loop_nest_optimize);

  if (ptr1->x_flag_loop_parallelize_all != ptr2->x_flag_loop_parallelize_all)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_loop_parallelize_all",
             ptr1->x_flag_loop_parallelize_all,
             ptr2->x_flag_loop_parallelize_all);

  if (ptr1->x_flag_unroll_jam != ptr2->x_flag_unroll_jam)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unroll_jam",
             ptr1->x_flag_unroll_jam,
             ptr2->x_flag_unroll_jam);

  if (ptr1->x_flag_lra_remat != ptr2->x_flag_lra_remat)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_lra_remat",
             ptr1->x_flag_lra_remat,
             ptr2->x_flag_lra_remat);

  if (ptr1->x_flag_errno_math != ptr2->x_flag_errno_math)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_errno_math",
             ptr1->x_flag_errno_math,
             ptr2->x_flag_errno_math);

  if (ptr1->x_flag_modulo_sched != ptr2->x_flag_modulo_sched)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_modulo_sched",
             ptr1->x_flag_modulo_sched,
             ptr2->x_flag_modulo_sched);

  if (ptr1->x_flag_modulo_sched_allow_regmoves != ptr2->x_flag_modulo_sched_allow_regmoves)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_modulo_sched_allow_regmoves",
             ptr1->x_flag_modulo_sched_allow_regmoves,
             ptr2->x_flag_modulo_sched_allow_regmoves);

  if (ptr1->x_flag_move_loop_invariants != ptr2->x_flag_move_loop_invariants)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_move_loop_invariants",
             ptr1->x_flag_move_loop_invariants,
             ptr2->x_flag_move_loop_invariants);

  if (ptr1->x_flag_move_loop_stores != ptr2->x_flag_move_loop_stores)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_move_loop_stores",
             ptr1->x_flag_move_loop_stores,
             ptr2->x_flag_move_loop_stores);

  if (ptr1->x_flag_non_call_exceptions != ptr2->x_flag_non_call_exceptions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_non_call_exceptions",
             ptr1->x_flag_non_call_exceptions,
             ptr2->x_flag_non_call_exceptions);

  if (ptr1->x_flag_nothrow_opt != ptr2->x_flag_nothrow_opt)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_nothrow_opt",
             ptr1->x_flag_nothrow_opt,
             ptr2->x_flag_nothrow_opt);

  if (ptr1->x_flag_omit_frame_pointer != ptr2->x_flag_omit_frame_pointer)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_omit_frame_pointer",
             ptr1->x_flag_omit_frame_pointer,
             ptr2->x_flag_omit_frame_pointer);

  if (ptr1->x_flag_opt_info != ptr2->x_flag_opt_info)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_opt_info",
             ptr1->x_flag_opt_info,
             ptr2->x_flag_opt_info);

  if (ptr1->x_flag_optimize_sibling_calls != ptr2->x_flag_optimize_sibling_calls)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_optimize_sibling_calls",
             ptr1->x_flag_optimize_sibling_calls,
             ptr2->x_flag_optimize_sibling_calls);

  if (ptr1->x_flag_optimize_strlen != ptr2->x_flag_optimize_strlen)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_optimize_strlen",
             ptr1->x_flag_optimize_strlen,
             ptr2->x_flag_optimize_strlen);

  if (ptr1->x_flag_pack_struct != ptr2->x_flag_pack_struct)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_pack_struct",
             ptr1->x_flag_pack_struct,
             ptr2->x_flag_pack_struct);

  if (ptr1->x_flag_partial_inlining != ptr2->x_flag_partial_inlining)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_partial_inlining",
             ptr1->x_flag_partial_inlining,
             ptr2->x_flag_partial_inlining);

  if (ptr1->x_flag_peel_loops != ptr2->x_flag_peel_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_peel_loops",
             ptr1->x_flag_peel_loops,
             ptr2->x_flag_peel_loops);

  if (ptr1->x_flag_no_peephole != ptr2->x_flag_no_peephole)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_no_peephole",
             ptr1->x_flag_no_peephole,
             ptr2->x_flag_no_peephole);

  if (ptr1->x_flag_peephole2 != ptr2->x_flag_peephole2)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_peephole2",
             ptr1->x_flag_peephole2,
             ptr2->x_flag_peephole2);

  if (ptr1->x_flag_plt != ptr2->x_flag_plt)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_plt",
             ptr1->x_flag_plt,
             ptr2->x_flag_plt);

  if (ptr1->x_flag_predictive_commoning != ptr2->x_flag_predictive_commoning)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_predictive_commoning",
             ptr1->x_flag_predictive_commoning,
             ptr2->x_flag_predictive_commoning);

  if (ptr1->x_flag_prefetch_loop_arrays != ptr2->x_flag_prefetch_loop_arrays)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_prefetch_loop_arrays",
             ptr1->x_flag_prefetch_loop_arrays,
             ptr2->x_flag_prefetch_loop_arrays);

  if (ptr1->x_flag_printf_return_value != ptr2->x_flag_printf_return_value)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_printf_return_value",
             ptr1->x_flag_printf_return_value,
             ptr2->x_flag_printf_return_value);

  if (ptr1->x_flag_profile_partial_training != ptr2->x_flag_profile_partial_training)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_profile_partial_training",
             ptr1->x_flag_profile_partial_training,
             ptr2->x_flag_profile_partial_training);

  if (ptr1->x_flag_profile_reorder_functions != ptr2->x_flag_profile_reorder_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_profile_reorder_functions",
             ptr1->x_flag_profile_reorder_functions,
             ptr2->x_flag_profile_reorder_functions);

  if (ptr1->x_flag_reciprocal_math != ptr2->x_flag_reciprocal_math)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_reciprocal_math",
             ptr1->x_flag_reciprocal_math,
             ptr2->x_flag_reciprocal_math);

  if (ptr1->x_flag_ree != ptr2->x_flag_ree)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ree",
             ptr1->x_flag_ree,
             ptr2->x_flag_ree);

  if (ptr1->x_flag_pcc_struct_return != ptr2->x_flag_pcc_struct_return)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_pcc_struct_return",
             ptr1->x_flag_pcc_struct_return,
             ptr2->x_flag_pcc_struct_return);

  if (ptr1->x_flag_rename_registers != ptr2->x_flag_rename_registers)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_rename_registers",
             ptr1->x_flag_rename_registers,
             ptr2->x_flag_rename_registers);

  if (ptr1->x_flag_reorder_blocks != ptr2->x_flag_reorder_blocks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_reorder_blocks",
             ptr1->x_flag_reorder_blocks,
             ptr2->x_flag_reorder_blocks);

  if (ptr1->x_flag_reorder_blocks_and_partition != ptr2->x_flag_reorder_blocks_and_partition)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_reorder_blocks_and_partition",
             ptr1->x_flag_reorder_blocks_and_partition,
             ptr2->x_flag_reorder_blocks_and_partition);

  if (ptr1->x_flag_reorder_functions != ptr2->x_flag_reorder_functions)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_reorder_functions",
             ptr1->x_flag_reorder_functions,
             ptr2->x_flag_reorder_functions);

  if (ptr1->x_flag_rerun_cse_after_loop != ptr2->x_flag_rerun_cse_after_loop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_rerun_cse_after_loop",
             ptr1->x_flag_rerun_cse_after_loop,
             ptr2->x_flag_rerun_cse_after_loop);

  if (ptr1->x_flag_resched_modulo_sched != ptr2->x_flag_resched_modulo_sched)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_resched_modulo_sched",
             ptr1->x_flag_resched_modulo_sched,
             ptr2->x_flag_resched_modulo_sched);

  if (ptr1->x_flag_rounding_math != ptr2->x_flag_rounding_math)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_rounding_math",
             ptr1->x_flag_rounding_math,
             ptr2->x_flag_rounding_math);

  if (ptr1->x_flag_rtti != ptr2->x_flag_rtti)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_rtti",
             ptr1->x_flag_rtti,
             ptr2->x_flag_rtti);

  if (ptr1->x_flag_save_optimization_record != ptr2->x_flag_save_optimization_record)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_save_optimization_record",
             ptr1->x_flag_save_optimization_record,
             ptr2->x_flag_save_optimization_record);

  if (ptr1->x_flag_sched_critical_path_heuristic != ptr2->x_flag_sched_critical_path_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_critical_path_heuristic",
             ptr1->x_flag_sched_critical_path_heuristic,
             ptr2->x_flag_sched_critical_path_heuristic);

  if (ptr1->x_flag_sched_dep_count_heuristic != ptr2->x_flag_sched_dep_count_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_dep_count_heuristic",
             ptr1->x_flag_sched_dep_count_heuristic,
             ptr2->x_flag_sched_dep_count_heuristic);

  if (ptr1->x_flag_sched_group_heuristic != ptr2->x_flag_sched_group_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_group_heuristic",
             ptr1->x_flag_sched_group_heuristic,
             ptr2->x_flag_sched_group_heuristic);

  if (ptr1->x_flag_schedule_interblock != ptr2->x_flag_schedule_interblock)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_interblock",
             ptr1->x_flag_schedule_interblock,
             ptr2->x_flag_schedule_interblock);

  if (ptr1->x_flag_sched_last_insn_heuristic != ptr2->x_flag_sched_last_insn_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_last_insn_heuristic",
             ptr1->x_flag_sched_last_insn_heuristic,
             ptr2->x_flag_sched_last_insn_heuristic);

  if (ptr1->x_flag_sched_pressure != ptr2->x_flag_sched_pressure)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_pressure",
             ptr1->x_flag_sched_pressure,
             ptr2->x_flag_sched_pressure);

  if (ptr1->x_flag_sched_rank_heuristic != ptr2->x_flag_sched_rank_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_rank_heuristic",
             ptr1->x_flag_sched_rank_heuristic,
             ptr2->x_flag_sched_rank_heuristic);

  if (ptr1->x_flag_schedule_speculative != ptr2->x_flag_schedule_speculative)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_speculative",
             ptr1->x_flag_schedule_speculative,
             ptr2->x_flag_schedule_speculative);

  if (ptr1->x_flag_sched_spec_insn_heuristic != ptr2->x_flag_sched_spec_insn_heuristic)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched_spec_insn_heuristic",
             ptr1->x_flag_sched_spec_insn_heuristic,
             ptr2->x_flag_sched_spec_insn_heuristic);

  if (ptr1->x_flag_schedule_speculative_load != ptr2->x_flag_schedule_speculative_load)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_speculative_load",
             ptr1->x_flag_schedule_speculative_load,
             ptr2->x_flag_schedule_speculative_load);

  if (ptr1->x_flag_schedule_speculative_load_dangerous != ptr2->x_flag_schedule_speculative_load_dangerous)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_speculative_load_dangerous",
             ptr1->x_flag_schedule_speculative_load_dangerous,
             ptr2->x_flag_schedule_speculative_load_dangerous);

  if (ptr1->x_flag_sched2_use_superblocks != ptr2->x_flag_sched2_use_superblocks)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sched2_use_superblocks",
             ptr1->x_flag_sched2_use_superblocks,
             ptr2->x_flag_sched2_use_superblocks);

  if (ptr1->x_flag_schedule_fusion != ptr2->x_flag_schedule_fusion)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_fusion",
             ptr1->x_flag_schedule_fusion,
             ptr2->x_flag_schedule_fusion);

  if (ptr1->x_flag_schedule_insns != ptr2->x_flag_schedule_insns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_insns",
             ptr1->x_flag_schedule_insns,
             ptr2->x_flag_schedule_insns);

  if (ptr1->x_flag_schedule_insns_after_reload != ptr2->x_flag_schedule_insns_after_reload)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_schedule_insns_after_reload",
             ptr1->x_flag_schedule_insns_after_reload,
             ptr2->x_flag_schedule_insns_after_reload);

  if (ptr1->x_flag_section_anchors != ptr2->x_flag_section_anchors)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_section_anchors",
             ptr1->x_flag_section_anchors,
             ptr2->x_flag_section_anchors);

  if (ptr1->x_flag_sel_sched_pipelining != ptr2->x_flag_sel_sched_pipelining)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sel_sched_pipelining",
             ptr1->x_flag_sel_sched_pipelining,
             ptr2->x_flag_sel_sched_pipelining);

  if (ptr1->x_flag_sel_sched_pipelining_outer_loops != ptr2->x_flag_sel_sched_pipelining_outer_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sel_sched_pipelining_outer_loops",
             ptr1->x_flag_sel_sched_pipelining_outer_loops,
             ptr2->x_flag_sel_sched_pipelining_outer_loops);

  if (ptr1->x_flag_sel_sched_reschedule_pipelined != ptr2->x_flag_sel_sched_reschedule_pipelined)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_sel_sched_reschedule_pipelined",
             ptr1->x_flag_sel_sched_reschedule_pipelined,
             ptr2->x_flag_sel_sched_reschedule_pipelined);

  if (ptr1->x_flag_selective_scheduling != ptr2->x_flag_selective_scheduling)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_selective_scheduling",
             ptr1->x_flag_selective_scheduling,
             ptr2->x_flag_selective_scheduling);

  if (ptr1->x_flag_selective_scheduling2 != ptr2->x_flag_selective_scheduling2)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_selective_scheduling2",
             ptr1->x_flag_selective_scheduling2,
             ptr2->x_flag_selective_scheduling2);

  if (ptr1->x_flag_semantic_interposition != ptr2->x_flag_semantic_interposition)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_semantic_interposition",
             ptr1->x_flag_semantic_interposition,
             ptr2->x_flag_semantic_interposition);

  if (ptr1->x_flag_short_enums != ptr2->x_flag_short_enums)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_short_enums",
             ptr1->x_flag_short_enums,
             ptr2->x_flag_short_enums);

  if (ptr1->x_flag_short_wchar != ptr2->x_flag_short_wchar)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_short_wchar",
             ptr1->x_flag_short_wchar,
             ptr2->x_flag_short_wchar);

  if (ptr1->x_flag_shrink_wrap != ptr2->x_flag_shrink_wrap)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_shrink_wrap",
             ptr1->x_flag_shrink_wrap,
             ptr2->x_flag_shrink_wrap);

  if (ptr1->x_flag_shrink_wrap_separate != ptr2->x_flag_shrink_wrap_separate)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_shrink_wrap_separate",
             ptr1->x_flag_shrink_wrap_separate,
             ptr2->x_flag_shrink_wrap_separate);

  if (ptr1->x_flag_signaling_nans != ptr2->x_flag_signaling_nans)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_signaling_nans",
             ptr1->x_flag_signaling_nans,
             ptr2->x_flag_signaling_nans);

  if (ptr1->x_flag_signed_zeros != ptr2->x_flag_signed_zeros)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_signed_zeros",
             ptr1->x_flag_signed_zeros,
             ptr2->x_flag_signed_zeros);

  if (ptr1->x_flag_single_precision_constant != ptr2->x_flag_single_precision_constant)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_single_precision_constant",
             ptr1->x_flag_single_precision_constant,
             ptr2->x_flag_single_precision_constant);

  if (ptr1->x_flag_split_ivs_in_unroller != ptr2->x_flag_split_ivs_in_unroller)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_split_ivs_in_unroller",
             ptr1->x_flag_split_ivs_in_unroller,
             ptr2->x_flag_split_ivs_in_unroller);

  if (ptr1->x_flag_split_loops != ptr2->x_flag_split_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_split_loops",
             ptr1->x_flag_split_loops,
             ptr2->x_flag_split_loops);

  if (ptr1->x_flag_split_paths != ptr2->x_flag_split_paths)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_split_paths",
             ptr1->x_flag_split_paths,
             ptr2->x_flag_split_paths);

  if (ptr1->x_flag_split_wide_types != ptr2->x_flag_split_wide_types)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_split_wide_types",
             ptr1->x_flag_split_wide_types,
             ptr2->x_flag_split_wide_types);

  if (ptr1->x_flag_split_wide_types_early != ptr2->x_flag_split_wide_types_early)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_split_wide_types_early",
             ptr1->x_flag_split_wide_types_early,
             ptr2->x_flag_split_wide_types_early);

  if (ptr1->x_flag_ssa_backprop != ptr2->x_flag_ssa_backprop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ssa_backprop",
             ptr1->x_flag_ssa_backprop,
             ptr2->x_flag_ssa_backprop);

  if (ptr1->x_flag_ssa_phiopt != ptr2->x_flag_ssa_phiopt)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_ssa_phiopt",
             ptr1->x_flag_ssa_phiopt,
             ptr2->x_flag_ssa_phiopt);

  if (ptr1->x_flag_stack_clash_protection != ptr2->x_flag_stack_clash_protection)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_stack_clash_protection",
             ptr1->x_flag_stack_clash_protection,
             ptr2->x_flag_stack_clash_protection);

  if (ptr1->x_flag_stack_protect != ptr2->x_flag_stack_protect)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_stack_protect",
             ptr1->x_flag_stack_protect,
             ptr2->x_flag_stack_protect);

  if (ptr1->x_flag_stdarg_opt != ptr2->x_flag_stdarg_opt)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_stdarg_opt",
             ptr1->x_flag_stdarg_opt,
             ptr2->x_flag_stdarg_opt);

  if (ptr1->x_flag_store_merging != ptr2->x_flag_store_merging)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_store_merging",
             ptr1->x_flag_store_merging,
             ptr2->x_flag_store_merging);

  if (ptr1->x_flag_strict_aliasing != ptr2->x_flag_strict_aliasing)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_strict_aliasing",
             ptr1->x_flag_strict_aliasing,
             ptr2->x_flag_strict_aliasing);

  if (ptr1->x_flag_strict_enums != ptr2->x_flag_strict_enums)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_strict_enums",
             ptr1->x_flag_strict_enums,
             ptr2->x_flag_strict_enums);

  if (ptr1->x_flag_strict_volatile_bitfields != ptr2->x_flag_strict_volatile_bitfields)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_strict_volatile_bitfields",
             ptr1->x_flag_strict_volatile_bitfields,
             ptr2->x_flag_strict_volatile_bitfields);

  if (ptr1->x_flag_thread_jumps != ptr2->x_flag_thread_jumps)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_thread_jumps",
             ptr1->x_flag_thread_jumps,
             ptr2->x_flag_thread_jumps);

  if (ptr1->x_flag_threadsafe_statics != ptr2->x_flag_threadsafe_statics)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_threadsafe_statics",
             ptr1->x_flag_threadsafe_statics,
             ptr2->x_flag_threadsafe_statics);

  if (ptr1->x_flag_toplevel_reorder != ptr2->x_flag_toplevel_reorder)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_toplevel_reorder",
             ptr1->x_flag_toplevel_reorder,
             ptr2->x_flag_toplevel_reorder);

  if (ptr1->x_flag_tracer != ptr2->x_flag_tracer)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tracer",
             ptr1->x_flag_tracer,
             ptr2->x_flag_tracer);

  if (ptr1->x_flag_trapping_math != ptr2->x_flag_trapping_math)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_trapping_math",
             ptr1->x_flag_trapping_math,
             ptr2->x_flag_trapping_math);

  if (ptr1->x_flag_trapv != ptr2->x_flag_trapv)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_trapv",
             ptr1->x_flag_trapv,
             ptr2->x_flag_trapv);

  if (ptr1->x_flag_tree_bit_ccp != ptr2->x_flag_tree_bit_ccp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_bit_ccp",
             ptr1->x_flag_tree_bit_ccp,
             ptr2->x_flag_tree_bit_ccp);

  if (ptr1->x_flag_tree_builtin_call_dce != ptr2->x_flag_tree_builtin_call_dce)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_builtin_call_dce",
             ptr1->x_flag_tree_builtin_call_dce,
             ptr2->x_flag_tree_builtin_call_dce);

  if (ptr1->x_flag_tree_ccp != ptr2->x_flag_tree_ccp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_ccp",
             ptr1->x_flag_tree_ccp,
             ptr2->x_flag_tree_ccp);

  if (ptr1->x_flag_tree_ch != ptr2->x_flag_tree_ch)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_ch",
             ptr1->x_flag_tree_ch,
             ptr2->x_flag_tree_ch);

  if (ptr1->x_flag_tree_coalesce_vars != ptr2->x_flag_tree_coalesce_vars)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_coalesce_vars",
             ptr1->x_flag_tree_coalesce_vars,
             ptr2->x_flag_tree_coalesce_vars);

  if (ptr1->x_flag_tree_copy_prop != ptr2->x_flag_tree_copy_prop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_copy_prop",
             ptr1->x_flag_tree_copy_prop,
             ptr2->x_flag_tree_copy_prop);

  if (ptr1->x_flag_tree_cselim != ptr2->x_flag_tree_cselim)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_cselim",
             ptr1->x_flag_tree_cselim,
             ptr2->x_flag_tree_cselim);

  if (ptr1->x_flag_tree_dce != ptr2->x_flag_tree_dce)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_dce",
             ptr1->x_flag_tree_dce,
             ptr2->x_flag_tree_dce);

  if (ptr1->x_flag_tree_dom != ptr2->x_flag_tree_dom)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_dom",
             ptr1->x_flag_tree_dom,
             ptr2->x_flag_tree_dom);

  if (ptr1->x_flag_tree_dse != ptr2->x_flag_tree_dse)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_dse",
             ptr1->x_flag_tree_dse,
             ptr2->x_flag_tree_dse);

  if (ptr1->x_flag_tree_forwprop != ptr2->x_flag_tree_forwprop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_forwprop",
             ptr1->x_flag_tree_forwprop,
             ptr2->x_flag_tree_forwprop);

  if (ptr1->x_flag_tree_fre != ptr2->x_flag_tree_fre)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_fre",
             ptr1->x_flag_tree_fre,
             ptr2->x_flag_tree_fre);

  if (ptr1->x_flag_tree_loop_distribute_patterns != ptr2->x_flag_tree_loop_distribute_patterns)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_distribute_patterns",
             ptr1->x_flag_tree_loop_distribute_patterns,
             ptr2->x_flag_tree_loop_distribute_patterns);

  if (ptr1->x_flag_tree_loop_distribution != ptr2->x_flag_tree_loop_distribution)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_distribution",
             ptr1->x_flag_tree_loop_distribution,
             ptr2->x_flag_tree_loop_distribution);

  if (ptr1->x_flag_tree_loop_if_convert != ptr2->x_flag_tree_loop_if_convert)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_if_convert",
             ptr1->x_flag_tree_loop_if_convert,
             ptr2->x_flag_tree_loop_if_convert);

  if (ptr1->x_flag_tree_loop_im != ptr2->x_flag_tree_loop_im)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_im",
             ptr1->x_flag_tree_loop_im,
             ptr2->x_flag_tree_loop_im);

  if (ptr1->x_flag_tree_loop_ivcanon != ptr2->x_flag_tree_loop_ivcanon)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_ivcanon",
             ptr1->x_flag_tree_loop_ivcanon,
             ptr2->x_flag_tree_loop_ivcanon);

  if (ptr1->x_flag_tree_loop_optimize != ptr2->x_flag_tree_loop_optimize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_optimize",
             ptr1->x_flag_tree_loop_optimize,
             ptr2->x_flag_tree_loop_optimize);

  if (ptr1->x_flag_tree_loop_vectorize != ptr2->x_flag_tree_loop_vectorize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_loop_vectorize",
             ptr1->x_flag_tree_loop_vectorize,
             ptr2->x_flag_tree_loop_vectorize);

  if (ptr1->x_flag_tree_live_range_split != ptr2->x_flag_tree_live_range_split)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_live_range_split",
             ptr1->x_flag_tree_live_range_split,
             ptr2->x_flag_tree_live_range_split);

  if (ptr1->x_flag_tree_partial_pre != ptr2->x_flag_tree_partial_pre)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_partial_pre",
             ptr1->x_flag_tree_partial_pre,
             ptr2->x_flag_tree_partial_pre);

  if (ptr1->x_flag_tree_phiprop != ptr2->x_flag_tree_phiprop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_phiprop",
             ptr1->x_flag_tree_phiprop,
             ptr2->x_flag_tree_phiprop);

  if (ptr1->x_flag_tree_pre != ptr2->x_flag_tree_pre)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_pre",
             ptr1->x_flag_tree_pre,
             ptr2->x_flag_tree_pre);

  if (ptr1->x_flag_tree_pta != ptr2->x_flag_tree_pta)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_pta",
             ptr1->x_flag_tree_pta,
             ptr2->x_flag_tree_pta);

  if (ptr1->x_flag_tree_reassoc != ptr2->x_flag_tree_reassoc)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_reassoc",
             ptr1->x_flag_tree_reassoc,
             ptr2->x_flag_tree_reassoc);

  if (ptr1->x_flag_tree_scev_cprop != ptr2->x_flag_tree_scev_cprop)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_scev_cprop",
             ptr1->x_flag_tree_scev_cprop,
             ptr2->x_flag_tree_scev_cprop);

  if (ptr1->x_flag_tree_sink != ptr2->x_flag_tree_sink)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_sink",
             ptr1->x_flag_tree_sink,
             ptr2->x_flag_tree_sink);

  if (ptr1->x_flag_tree_slp_vectorize != ptr2->x_flag_tree_slp_vectorize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_slp_vectorize",
             ptr1->x_flag_tree_slp_vectorize,
             ptr2->x_flag_tree_slp_vectorize);

  if (ptr1->x_flag_tree_slsr != ptr2->x_flag_tree_slsr)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_slsr",
             ptr1->x_flag_tree_slsr,
             ptr2->x_flag_tree_slsr);

  if (ptr1->x_flag_tree_sra != ptr2->x_flag_tree_sra)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_sra",
             ptr1->x_flag_tree_sra,
             ptr2->x_flag_tree_sra);

  if (ptr1->x_flag_tree_switch_conversion != ptr2->x_flag_tree_switch_conversion)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_switch_conversion",
             ptr1->x_flag_tree_switch_conversion,
             ptr2->x_flag_tree_switch_conversion);

  if (ptr1->x_flag_tree_tail_merge != ptr2->x_flag_tree_tail_merge)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_tail_merge",
             ptr1->x_flag_tree_tail_merge,
             ptr2->x_flag_tree_tail_merge);

  if (ptr1->x_flag_tree_ter != ptr2->x_flag_tree_ter)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_ter",
             ptr1->x_flag_tree_ter,
             ptr2->x_flag_tree_ter);

  if (ptr1->x_flag_tree_vectorize != ptr2->x_flag_tree_vectorize)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_vectorize",
             ptr1->x_flag_tree_vectorize,
             ptr2->x_flag_tree_vectorize);

  if (ptr1->x_flag_tree_vrp != ptr2->x_flag_tree_vrp)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_tree_vrp",
             ptr1->x_flag_tree_vrp,
             ptr2->x_flag_tree_vrp);

  if (ptr1->x_flag_unconstrained_commons != ptr2->x_flag_unconstrained_commons)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unconstrained_commons",
             ptr1->x_flag_unconstrained_commons,
             ptr2->x_flag_unconstrained_commons);

  if (ptr1->x_flag_unroll_all_loops != ptr2->x_flag_unroll_all_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unroll_all_loops",
             ptr1->x_flag_unroll_all_loops,
             ptr2->x_flag_unroll_all_loops);

  if (ptr1->x_flag_cunroll_grow_size != ptr2->x_flag_cunroll_grow_size)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_cunroll_grow_size",
             ptr1->x_flag_cunroll_grow_size,
             ptr2->x_flag_cunroll_grow_size);

  if (ptr1->x_flag_unroll_loops != ptr2->x_flag_unroll_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unroll_loops",
             ptr1->x_flag_unroll_loops,
             ptr2->x_flag_unroll_loops);

  if (ptr1->x_flag_unsafe_math_optimizations != ptr2->x_flag_unsafe_math_optimizations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unsafe_math_optimizations",
             ptr1->x_flag_unsafe_math_optimizations,
             ptr2->x_flag_unsafe_math_optimizations);

  if (ptr1->x_flag_unswitch_loops != ptr2->x_flag_unswitch_loops)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unswitch_loops",
             ptr1->x_flag_unswitch_loops,
             ptr2->x_flag_unswitch_loops);

  if (ptr1->x_flag_unwind_tables != ptr2->x_flag_unwind_tables)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_unwind_tables",
             ptr1->x_flag_unwind_tables,
             ptr2->x_flag_unwind_tables);

  if (ptr1->x_flag_var_tracking != ptr2->x_flag_var_tracking)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_var_tracking",
             ptr1->x_flag_var_tracking,
             ptr2->x_flag_var_tracking);

  if (ptr1->x_flag_var_tracking_assignments != ptr2->x_flag_var_tracking_assignments)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_var_tracking_assignments",
             ptr1->x_flag_var_tracking_assignments,
             ptr2->x_flag_var_tracking_assignments);

  if (ptr1->x_flag_var_tracking_assignments_toggle != ptr2->x_flag_var_tracking_assignments_toggle)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_var_tracking_assignments_toggle",
             ptr1->x_flag_var_tracking_assignments_toggle,
             ptr2->x_flag_var_tracking_assignments_toggle);

  if (ptr1->x_flag_var_tracking_uninit != ptr2->x_flag_var_tracking_uninit)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_var_tracking_uninit",
             ptr1->x_flag_var_tracking_uninit,
             ptr2->x_flag_var_tracking_uninit);

  if (ptr1->x_flag_variable_expansion_in_unroller != ptr2->x_flag_variable_expansion_in_unroller)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_variable_expansion_in_unroller",
             ptr1->x_flag_variable_expansion_in_unroller,
             ptr2->x_flag_variable_expansion_in_unroller);

  if (ptr1->x_flag_version_loops_for_strides != ptr2->x_flag_version_loops_for_strides)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_version_loops_for_strides",
             ptr1->x_flag_version_loops_for_strides,
             ptr2->x_flag_version_loops_for_strides);

  if (ptr1->x_flag_value_profile_transformations != ptr2->x_flag_value_profile_transformations)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_value_profile_transformations",
             ptr1->x_flag_value_profile_transformations,
             ptr2->x_flag_value_profile_transformations);

  if (ptr1->x_flag_web != ptr2->x_flag_web)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_web",
             ptr1->x_flag_web,
             ptr2->x_flag_web);

  if (ptr1->x_flag_wrapv != ptr2->x_flag_wrapv)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_wrapv",
             ptr1->x_flag_wrapv,
             ptr2->x_flag_wrapv);

  if (ptr1->x_flag_wrapv_pointer != ptr2->x_flag_wrapv_pointer)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "flag_wrapv_pointer",
             ptr1->x_flag_wrapv_pointer,
             ptr2->x_flag_wrapv_pointer);

  if (ptr1->x_debug_nonbind_markers_p != ptr2->x_debug_nonbind_markers_p)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent_to, "",
             "debug_nonbind_markers_p",
             ptr1->x_debug_nonbind_markers_p,
             ptr2->x_debug_nonbind_markers_p);

  if (ptr1->x_str_align_functions != ptr2->x_str_align_functions
      && (!ptr1->x_str_align_functions || !ptr2->x_str_align_functions
          || strcmp (ptr1->x_str_align_functions, ptr2->x_str_align_functions)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent_to, "",
             "str_align_functions",
             ptr1->x_str_align_functions ? ptr1->x_str_align_functions : "(null)",
             ptr2->x_str_align_functions ? ptr2->x_str_align_functions : "(null)");

  if (ptr1->x_str_align_jumps != ptr2->x_str_align_jumps
      && (!ptr1->x_str_align_jumps || !ptr2->x_str_align_jumps
          || strcmp (ptr1->x_str_align_jumps, ptr2->x_str_align_jumps)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent_to, "",
             "str_align_jumps",
             ptr1->x_str_align_jumps ? ptr1->x_str_align_jumps : "(null)",
             ptr2->x_str_align_jumps ? ptr2->x_str_align_jumps : "(null)");

  if (ptr1->x_str_align_labels != ptr2->x_str_align_labels
      && (!ptr1->x_str_align_labels || !ptr2->x_str_align_labels
          || strcmp (ptr1->x_str_align_labels, ptr2->x_str_align_labels)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent_to, "",
             "str_align_labels",
             ptr1->x_str_align_labels ? ptr1->x_str_align_labels : "(null)",
             ptr2->x_str_align_labels ? ptr2->x_str_align_labels : "(null)");

  if (ptr1->x_str_align_loops != ptr2->x_str_align_loops
      && (!ptr1->x_str_align_loops || !ptr2->x_str_align_loops
          || strcmp (ptr1->x_str_align_loops, ptr2->x_str_align_loops)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent_to, "",
             "str_align_loops",
             ptr1->x_str_align_loops ? ptr1->x_str_align_loops : "(null)",
             ptr2->x_str_align_loops ? ptr2->x_str_align_loops : "(null)");

  if (ptr1->x_flag_patchable_function_entry != ptr2->x_flag_patchable_function_entry
      && (!ptr1->x_flag_patchable_function_entry || !ptr2->x_flag_patchable_function_entry
          || strcmp (ptr1->x_flag_patchable_function_entry, ptr2->x_flag_patchable_function_entry)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent_to, "",
             "flag_patchable_function_entry",
             ptr1->x_flag_patchable_function_entry ? ptr1->x_flag_patchable_function_entry : "(null)",
             ptr2->x_flag_patchable_function_entry ? ptr2->x_flag_patchable_function_entry : "(null)");

}

/* Save selected option variables into a structure.  */
void
cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts,
		       struct gcc_options *opts_set)
{
  gcc_assert (IN_RANGE (opts->x_flag_fentry, -128, 127));
  gcc_assert (IN_RANGE (opts->x_ix86_needed, -128, 127));

  if (targetm.target_option.save)
    targetm.target_option.save (ptr, opts, opts_set);

  ptr->x_ix86_stack_protector_guard_offset = opts->x_ix86_stack_protector_guard_offset;
  ptr->x_ix86_stack_protector_guard_reg = opts->x_ix86_stack_protector_guard_reg;
  ptr->x_ix86_unsafe_math_optimizations = opts->x_ix86_unsafe_math_optimizations;
  ptr->x_ix86_cmodel = opts->x_ix86_cmodel;
  ptr->x_ix86_excess_precision = opts->x_ix86_excess_precision;
  ptr->x_ix86_veclibabi_type = opts->x_ix86_veclibabi_type;
  ptr->x_ix86_pmode = opts->x_ix86_pmode;
  ptr->x_ix86_incoming_stack_boundary_arg = opts->x_ix86_incoming_stack_boundary_arg;
  ptr->x_ix86_preferred_stack_boundary_arg = opts->x_ix86_preferred_stack_boundary_arg;
  ptr->x_ix86_regparm = opts->x_ix86_regparm;
  ptr->x_recip_mask = opts->x_recip_mask;
  ptr->x_target_flags = opts->x_target_flags;
  ptr->x_ix86_isa_flags = opts->x_ix86_isa_flags;
  ptr->x_ix86_isa_flags2 = opts->x_ix86_isa_flags2;
  ptr->x_ix86_target_flags = opts->x_ix86_target_flags;
  ptr->x_ix86_fpmath = opts->x_ix86_fpmath;
  ptr->x_ix86_move_max = opts->x_ix86_move_max;
  ptr->x_prefer_vector_width_type = opts->x_prefer_vector_width_type;
  ptr->x_ix86_store_max = opts->x_ix86_store_max;
  ptr->x_flag_fentry = opts->x_flag_fentry;
  ptr->x_ix86_needed = opts->x_ix86_needed;
  ptr->x_ix86_stack_protector_guard_offset_str = opts->x_ix86_stack_protector_guard_offset_str;
  ptr->x_ix86_stack_protector_guard_reg_str = opts->x_ix86_stack_protector_guard_reg_str;
  ptr->x_ix86_stack_protector_guard_symbol_str = opts->x_ix86_stack_protector_guard_symbol_str;

  unsigned HOST_WIDE_INT mask = 0;
  if (opts_set->x_ix86_stack_protector_guard_offset) mask |= HOST_WIDE_INT_1U << 0;
  if (opts_set->x_ix86_stack_protector_guard_reg) mask |= HOST_WIDE_INT_1U << 1;
  if (opts_set->x_ix86_unsafe_math_optimizations) mask |= HOST_WIDE_INT_1U << 2;
  if (opts_set->x_ix86_cmodel) mask |= HOST_WIDE_INT_1U << 3;
  if (opts_set->x_ix86_excess_precision) mask |= HOST_WIDE_INT_1U << 4;
  if (opts_set->x_ix86_veclibabi_type) mask |= HOST_WIDE_INT_1U << 5;
  if (opts_set->x_ix86_pmode) mask |= HOST_WIDE_INT_1U << 6;
  if (opts_set->x_ix86_incoming_stack_boundary_arg) mask |= HOST_WIDE_INT_1U << 7;
  if (opts_set->x_ix86_preferred_stack_boundary_arg) mask |= HOST_WIDE_INT_1U << 8;
  if (opts_set->x_ix86_regparm) mask |= HOST_WIDE_INT_1U << 9;
  if (opts_set->x_recip_mask) mask |= HOST_WIDE_INT_1U << 10;
  ptr->explicit_mask_target_flags = opts_set->x_target_flags;
  ptr->explicit_mask_ix86_isa_flags = opts_set->x_ix86_isa_flags;
  ptr->explicit_mask_ix86_isa_flags2 = opts_set->x_ix86_isa_flags2;
  ptr->explicit_mask_ix86_target_flags = opts_set->x_ix86_target_flags;
  if (opts_set->x_ix86_fpmath) mask |= HOST_WIDE_INT_1U << 11;
  if (opts_set->x_ix86_move_max) mask |= HOST_WIDE_INT_1U << 12;
  if (opts_set->x_prefer_vector_width_type) mask |= HOST_WIDE_INT_1U << 13;
  if (opts_set->x_ix86_store_max) mask |= HOST_WIDE_INT_1U << 14;
  if (opts_set->x_flag_fentry) mask |= HOST_WIDE_INT_1U << 15;
  if (opts_set->x_ix86_needed) mask |= HOST_WIDE_INT_1U << 16;
  if (opts_set->x_ix86_stack_protector_guard_offset_str) mask |= HOST_WIDE_INT_1U << 17;
  if (opts_set->x_ix86_stack_protector_guard_reg_str) mask |= HOST_WIDE_INT_1U << 18;
  if (opts_set->x_ix86_stack_protector_guard_symbol_str) mask |= HOST_WIDE_INT_1U << 19;
  ptr->explicit_mask[0] = mask;
}

/* Restore selected current options from a structure.  */
void
cl_target_option_restore (struct gcc_options *opts, struct gcc_options *opts_set,
			  struct cl_target_option *ptr)
{
  opts->x_ix86_stack_protector_guard_offset = ptr->x_ix86_stack_protector_guard_offset;
  opts->x_ix86_stack_protector_guard_reg = ptr->x_ix86_stack_protector_guard_reg;
  opts->x_ix86_unsafe_math_optimizations = ptr->x_ix86_unsafe_math_optimizations;
  opts->x_ix86_cmodel = ptr->x_ix86_cmodel;
  opts->x_ix86_excess_precision = ptr->x_ix86_excess_precision;
  opts->x_ix86_veclibabi_type = ptr->x_ix86_veclibabi_type;
  opts->x_ix86_pmode = ptr->x_ix86_pmode;
  opts->x_ix86_incoming_stack_boundary_arg = ptr->x_ix86_incoming_stack_boundary_arg;
  opts->x_ix86_preferred_stack_boundary_arg = ptr->x_ix86_preferred_stack_boundary_arg;
  opts->x_ix86_regparm = ptr->x_ix86_regparm;
  opts->x_recip_mask = ptr->x_recip_mask;
  opts->x_target_flags = ptr->x_target_flags;
  opts->x_ix86_isa_flags = ptr->x_ix86_isa_flags;
  opts->x_ix86_isa_flags2 = ptr->x_ix86_isa_flags2;
  opts->x_ix86_target_flags = ptr->x_ix86_target_flags;
  opts->x_ix86_fpmath = ptr->x_ix86_fpmath;
  opts->x_ix86_move_max = ptr->x_ix86_move_max;
  opts->x_prefer_vector_width_type = ptr->x_prefer_vector_width_type;
  opts->x_ix86_store_max = ptr->x_ix86_store_max;
  opts->x_flag_fentry = ptr->x_flag_fentry;
  opts->x_ix86_needed = ptr->x_ix86_needed;
  opts->x_ix86_stack_protector_guard_offset_str = ptr->x_ix86_stack_protector_guard_offset_str;
  opts->x_ix86_stack_protector_guard_reg_str = ptr->x_ix86_stack_protector_guard_reg_str;
  opts->x_ix86_stack_protector_guard_symbol_str = ptr->x_ix86_stack_protector_guard_symbol_str;

  unsigned HOST_WIDE_INT mask;
  mask = ptr->explicit_mask[0];
  opts_set->x_ix86_stack_protector_guard_offset = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_stack_protector_guard_reg = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_unsafe_math_optimizations = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_cmodel = static_cast<enum cmodel>((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_excess_precision = static_cast<enum excess_precision>((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_veclibabi_type = static_cast<enum ix86_veclibabi>((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_pmode = static_cast<enum pmode>((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_incoming_stack_boundary_arg = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_preferred_stack_boundary_arg = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_regparm = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_recip_mask = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_target_flags = ptr->explicit_mask_target_flags;
  opts_set->x_ix86_isa_flags = ptr->explicit_mask_ix86_isa_flags;
  opts_set->x_ix86_isa_flags2 = ptr->explicit_mask_ix86_isa_flags2;
  opts_set->x_ix86_target_flags = ptr->explicit_mask_ix86_target_flags;
  opts_set->x_ix86_fpmath = static_cast<enum fpmath_unit >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_move_max = static_cast<enum prefer_vector_width >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_prefer_vector_width_type = static_cast<enum prefer_vector_width >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_ix86_store_max = static_cast<enum prefer_vector_width >((mask & 1) != 0);
  mask >>= 1;
  opts_set->x_flag_fentry = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_needed = (mask & 1) != 0;
  mask >>= 1;
  opts_set->x_ix86_stack_protector_guard_offset_str = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_ix86_stack_protector_guard_reg_str = (mask & 1) ? "" : nullptr;
  mask >>= 1;
  opts_set->x_ix86_stack_protector_guard_symbol_str = (mask & 1) ? "" : nullptr;
  mask >>= 1;

  if (targetm.target_option.restore)
    targetm.target_option.restore (opts, opts_set, ptr);
}

/* Print optimization options from a structure.  */
void
cl_target_option_print (FILE *file,
                        int indent,
                        struct cl_target_option *ptr)
{
  fputs ("\n", file);
  if (ptr->x_target_flags)
    fprintf (file, "%*s%s (%#lx)\n",
             indent, "",
             "target_flags",
             (unsigned long)ptr->x_target_flags);

  if (ptr->x_ix86_isa_flags)
    fprintf (file, "%*s%s (%#" HOST_WIDE_INT_PRINT "x)\n",
             indent, "",
             "ix86_isa_flags",
             ptr->x_ix86_isa_flags);

  if (ptr->x_ix86_isa_flags2)
    fprintf (file, "%*s%s (%#" HOST_WIDE_INT_PRINT "x)\n",
             indent, "",
             "ix86_isa_flags2",
             ptr->x_ix86_isa_flags2);

  if (ptr->x_ix86_target_flags)
    fprintf (file, "%*s%s (%#lx)\n",
             indent, "",
             "ix86_target_flags",
             (unsigned long)ptr->x_ix86_target_flags);

  if (ptr->x_ix86_fpmath)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "ix86_fpmath",
             ptr->x_ix86_fpmath);

  if (ptr->x_ix86_move_max)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "ix86_move_max",
             ptr->x_ix86_move_max);

  if (ptr->x_prefer_vector_width_type)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "prefer_vector_width_type",
             ptr->x_prefer_vector_width_type);

  if (ptr->x_ix86_store_max)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "ix86_store_max",
             ptr->x_ix86_store_max);

  if (ptr->x_flag_fentry)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "flag_fentry",
             ptr->x_flag_fentry);

  if (ptr->x_ix86_needed)
    fprintf (file, "%*s%s (%#x)\n",
             indent, "",
             "ix86_needed",
             ptr->x_ix86_needed);

  if (ptr->x_ix86_stack_protector_guard_offset_str)
    fprintf (file, "%*s%s (%s)\n",
             indent, "",
             "ix86_stack_protector_guard_offset_str",
             ptr->x_ix86_stack_protector_guard_offset_str);

  if (ptr->x_ix86_stack_protector_guard_reg_str)
    fprintf (file, "%*s%s (%s)\n",
             indent, "",
             "ix86_stack_protector_guard_reg_str",
             ptr->x_ix86_stack_protector_guard_reg_str);

  if (ptr->x_ix86_stack_protector_guard_symbol_str)
    fprintf (file, "%*s%s (%s)\n",
             indent, "",
             "ix86_stack_protector_guard_symbol_str",
             ptr->x_ix86_stack_protector_guard_symbol_str);


  if (targetm.target_option.print)
    targetm.target_option.print (file, indent, ptr);
}

/* Print different target option variables from structures provided as arguments.  */
void
cl_target_option_print_diff (FILE *file,
                             int indent ATTRIBUTE_UNUSED,
                             struct cl_target_option *ptr1 ATTRIBUTE_UNUSED,
                             struct cl_target_option *ptr2 ATTRIBUTE_UNUSED)
{
  fputs ("\n", file);
  if (ptr1->x_target_flags != ptr2->x_target_flags)
    fprintf (file, "%*s%s (%#lx/%#lx)\n",
             indent, "",
             "target_flags",
             (unsigned long)ptr1->x_target_flags,
             (unsigned long)ptr2->x_target_flags);

  if (ptr1->x_ix86_isa_flags != ptr2->x_ix86_isa_flags)
    fprintf (file, "%*s%s (%#" HOST_WIDE_INT_PRINT "x/%#" HOST_WIDE_INT_PRINT "x)\n",
             indent, "",
             "ix86_isa_flags",
             ptr1->x_ix86_isa_flags,
             ptr2->x_ix86_isa_flags);

  if (ptr1->x_ix86_isa_flags2 != ptr2->x_ix86_isa_flags2)
    fprintf (file, "%*s%s (%#" HOST_WIDE_INT_PRINT "x/%#" HOST_WIDE_INT_PRINT "x)\n",
             indent, "",
             "ix86_isa_flags2",
             ptr1->x_ix86_isa_flags2,
             ptr2->x_ix86_isa_flags2);

  if (ptr1->x_ix86_target_flags != ptr2->x_ix86_target_flags)
    fprintf (file, "%*s%s (%#lx/%#lx)\n",
             indent, "",
             "ix86_target_flags",
             (unsigned long)ptr1->x_ix86_target_flags,
             (unsigned long)ptr2->x_ix86_target_flags);

  if (ptr1->x_ix86_fpmath != ptr2->x_ix86_fpmath)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "ix86_fpmath",
             ptr1->x_ix86_fpmath,
             ptr2->x_ix86_fpmath);

  if (ptr1->x_ix86_move_max != ptr2->x_ix86_move_max)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "ix86_move_max",
             ptr1->x_ix86_move_max,
             ptr2->x_ix86_move_max);

  if (ptr1->x_prefer_vector_width_type != ptr2->x_prefer_vector_width_type)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "prefer_vector_width_type",
             ptr1->x_prefer_vector_width_type,
             ptr2->x_prefer_vector_width_type);

  if (ptr1->x_ix86_store_max != ptr2->x_ix86_store_max)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "ix86_store_max",
             ptr1->x_ix86_store_max,
             ptr2->x_ix86_store_max);

  if (ptr1->x_flag_fentry != ptr2->x_flag_fentry)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "flag_fentry",
             ptr1->x_flag_fentry,
             ptr2->x_flag_fentry);

  if (ptr1->x_ix86_needed != ptr2->x_ix86_needed)
    fprintf (file, "%*s%s (%#x/%#x)\n",
             indent, "",
             "ix86_needed",
             ptr1->x_ix86_needed,
             ptr2->x_ix86_needed);

  if (ptr1->x_ix86_stack_protector_guard_offset_str != ptr2->x_ix86_stack_protector_guard_offset_str
      && (!ptr1->x_ix86_stack_protector_guard_offset_str || !ptr2->x_ix86_stack_protector_guard_offset_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_offset_str, ptr2->x_ix86_stack_protector_guard_offset_str)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent, "",
             "ix86_stack_protector_guard_offset_str",
             ptr1->x_ix86_stack_protector_guard_offset_str ? ptr1->x_ix86_stack_protector_guard_offset_str : "(null)",
             ptr2->x_ix86_stack_protector_guard_offset_str ? ptr1->x_ix86_stack_protector_guard_offset_str : "(null)");

  if (ptr1->x_ix86_stack_protector_guard_reg_str != ptr2->x_ix86_stack_protector_guard_reg_str
      && (!ptr1->x_ix86_stack_protector_guard_reg_str || !ptr2->x_ix86_stack_protector_guard_reg_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_reg_str, ptr2->x_ix86_stack_protector_guard_reg_str)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent, "",
             "ix86_stack_protector_guard_reg_str",
             ptr1->x_ix86_stack_protector_guard_reg_str ? ptr1->x_ix86_stack_protector_guard_reg_str : "(null)",
             ptr2->x_ix86_stack_protector_guard_reg_str ? ptr1->x_ix86_stack_protector_guard_reg_str : "(null)");

  if (ptr1->x_ix86_stack_protector_guard_symbol_str != ptr2->x_ix86_stack_protector_guard_symbol_str
      && (!ptr1->x_ix86_stack_protector_guard_symbol_str || !ptr2->x_ix86_stack_protector_guard_symbol_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_symbol_str, ptr2->x_ix86_stack_protector_guard_symbol_str)))
    fprintf (file, "%*s%s (%s/%s)\n",
             indent, "",
             "ix86_stack_protector_guard_symbol_str",
             ptr1->x_ix86_stack_protector_guard_symbol_str ? ptr1->x_ix86_stack_protector_guard_symbol_str : "(null)",
             ptr2->x_ix86_stack_protector_guard_symbol_str ? ptr1->x_ix86_stack_protector_guard_symbol_str : "(null)");

}

/* Compare two target options  */
bool
cl_target_option_eq (struct cl_target_option const *ptr1 ATTRIBUTE_UNUSED,
                     struct cl_target_option const *ptr2 ATTRIBUTE_UNUSED)
{
  if (ptr1->x_ix86_arch_string != ptr2->x_ix86_arch_string
      && (!ptr1->x_ix86_arch_string || !ptr2->x_ix86_arch_string
          || strcmp (ptr1->x_ix86_arch_string, ptr2->x_ix86_arch_string)))
    return false;
  if (ptr1->x_ix86_recip_name != ptr2->x_ix86_recip_name
      && (!ptr1->x_ix86_recip_name || !ptr2->x_ix86_recip_name
          || strcmp (ptr1->x_ix86_recip_name, ptr2->x_ix86_recip_name)))
    return false;
  if (ptr1->x_ix86_tune_ctrl_string != ptr2->x_ix86_tune_ctrl_string
      && (!ptr1->x_ix86_tune_ctrl_string || !ptr2->x_ix86_tune_ctrl_string
          || strcmp (ptr1->x_ix86_tune_ctrl_string, ptr2->x_ix86_tune_ctrl_string)))
    return false;
  if (ptr1->x_ix86_tune_memcpy_strategy != ptr2->x_ix86_tune_memcpy_strategy
      && (!ptr1->x_ix86_tune_memcpy_strategy || !ptr2->x_ix86_tune_memcpy_strategy
          || strcmp (ptr1->x_ix86_tune_memcpy_strategy, ptr2->x_ix86_tune_memcpy_strategy)))
    return false;
  if (ptr1->x_ix86_tune_memset_strategy != ptr2->x_ix86_tune_memset_strategy
      && (!ptr1->x_ix86_tune_memset_strategy || !ptr2->x_ix86_tune_memset_strategy
          || strcmp (ptr1->x_ix86_tune_memset_strategy, ptr2->x_ix86_tune_memset_strategy)))
    return false;
  if (ptr1->x_ix86_tune_string != ptr2->x_ix86_tune_string
      && (!ptr1->x_ix86_tune_string || !ptr2->x_ix86_tune_string
          || strcmp (ptr1->x_ix86_tune_string, ptr2->x_ix86_tune_string)))
    return false;
  if (ptr1->x_ix86_stack_protector_guard_offset_str != ptr2->x_ix86_stack_protector_guard_offset_str
      && (!ptr1->x_ix86_stack_protector_guard_offset_str || !ptr2->x_ix86_stack_protector_guard_offset_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_offset_str, ptr2->x_ix86_stack_protector_guard_offset_str)))
    return false;
  if (ptr1->x_ix86_stack_protector_guard_reg_str != ptr2->x_ix86_stack_protector_guard_reg_str
      && (!ptr1->x_ix86_stack_protector_guard_reg_str || !ptr2->x_ix86_stack_protector_guard_reg_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_reg_str, ptr2->x_ix86_stack_protector_guard_reg_str)))
    return false;
  if (ptr1->x_ix86_stack_protector_guard_symbol_str != ptr2->x_ix86_stack_protector_guard_symbol_str
      && (!ptr1->x_ix86_stack_protector_guard_symbol_str || !ptr2->x_ix86_stack_protector_guard_symbol_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_symbol_str, ptr2->x_ix86_stack_protector_guard_symbol_str)))
    return false;
  if (ptr1->x_ix86_isa_flags2_explicit != ptr2->x_ix86_isa_flags2_explicit)
    return false;
  if (ptr1->x_ix86_isa_flags_explicit != ptr2->x_ix86_isa_flags_explicit)
    return false;
  if (ptr1->x_ix86_asm_dialect != ptr2->x_ix86_asm_dialect)
    return false;
  if (ptr1->x_ix86_abi != ptr2->x_ix86_abi)
    return false;
  if (ptr1->x_ix86_stack_protector_guard != ptr2->x_ix86_stack_protector_guard)
    return false;
  if (ptr1->x_ix86_stringop_alg != ptr2->x_ix86_stringop_alg)
    return false;
  if (ptr1->x_ix86_tls_dialect != ptr2->x_ix86_tls_dialect)
    return false;
  if (ptr1->x_ix86_branch_cost != ptr2->x_ix86_branch_cost)
    return false;
  if (ptr1->x_ix86_dump_tunes != ptr2->x_ix86_dump_tunes)
    return false;
  if (ptr1->x_ix86_force_align_arg_pointer != ptr2->x_ix86_force_align_arg_pointer)
    return false;
  if (ptr1->x_ix86_force_drap != ptr2->x_ix86_force_drap)
    return false;
  if (ptr1->x_ix86_section_threshold != ptr2->x_ix86_section_threshold)
    return false;
  if (ptr1->x_ix86_sse2avx != ptr2->x_ix86_sse2avx)
    return false;
  if (ptr1->x_ix86_tune_no_default != ptr2->x_ix86_tune_no_default)
    return false;
  if (ptr1->x_recip_mask_explicit != ptr2->x_recip_mask_explicit)
    return false;
  if (ptr1->arch != ptr2->arch)
    return false;
  if (ptr1->arch_specified != ptr2->arch_specified)
    return false;
  if (ptr1->branch_cost != ptr2->branch_cost)
    return false;
  if (ptr1->prefetch_sse != ptr2->prefetch_sse)
    return false;
  if (ptr1->schedule != ptr2->schedule)
    return false;
  if (ptr1->tune != ptr2->tune)
    return false;
  if (ptr1->tune_defaulted != ptr2->tune_defaulted)
    return false;
  if (ptr1->x_ix86_stack_protector_guard_offset != ptr2->x_ix86_stack_protector_guard_offset)
    return false;
  if (ptr1->x_ix86_stack_protector_guard_reg != ptr2->x_ix86_stack_protector_guard_reg)
    return false;
  if (ptr1->x_ix86_unsafe_math_optimizations != ptr2->x_ix86_unsafe_math_optimizations)
    return false;
  if (ptr1->x_ix86_cmodel != ptr2->x_ix86_cmodel)
    return false;
  if (ptr1->x_ix86_excess_precision != ptr2->x_ix86_excess_precision)
    return false;
  if (ptr1->x_ix86_veclibabi_type != ptr2->x_ix86_veclibabi_type)
    return false;
  if (ptr1->x_ix86_pmode != ptr2->x_ix86_pmode)
    return false;
  if (ptr1->x_ix86_incoming_stack_boundary_arg != ptr2->x_ix86_incoming_stack_boundary_arg)
    return false;
  if (ptr1->x_ix86_preferred_stack_boundary_arg != ptr2->x_ix86_preferred_stack_boundary_arg)
    return false;
  if (ptr1->x_ix86_regparm != ptr2->x_ix86_regparm)
    return false;
  if (ptr1->x_recip_mask != ptr2->x_recip_mask)
    return false;
  if (ptr1->x_target_flags != ptr2->x_target_flags)
    return false;
  if (ptr1->x_ix86_isa_flags != ptr2->x_ix86_isa_flags)
    return false;
  if (ptr1->x_ix86_isa_flags2 != ptr2->x_ix86_isa_flags2)
    return false;
  if (ptr1->x_flag_fentry != ptr2->x_flag_fentry)
    return false;
  if (ptr1->x_ix86_fpmath != ptr2->x_ix86_fpmath)
    return false;
  if (ptr1->x_ix86_target_flags != ptr2->x_ix86_target_flags)
    return false;
  if (ptr1->x_ix86_move_max != ptr2->x_ix86_move_max)
    return false;
  if (ptr1->x_ix86_needed != ptr2->x_ix86_needed)
    return false;
  if (ptr1->x_prefer_vector_width_type != ptr2->x_prefer_vector_width_type)
    return false;
  if (ptr1->x_ix86_store_max != ptr2->x_ix86_store_max)
    return false;
  for (size_t i = 0; i < ARRAY_SIZE (ptr1->explicit_mask); i++)
    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])
      return false;
  if (ptr1->explicit_mask_target_flags != ptr2->explicit_mask_target_flags)
    return false;
  if (ptr1->explicit_mask_ix86_isa_flags != ptr2->explicit_mask_ix86_isa_flags)
    return false;
  if (ptr1->explicit_mask_ix86_isa_flags2 != ptr2->explicit_mask_ix86_isa_flags2)
    return false;
  if (ptr1->explicit_mask_ix86_target_flags != ptr2->explicit_mask_ix86_target_flags)
    return false;
  return true;
}

/* Hash target options  */
hashval_t
cl_target_option_hash (struct cl_target_option const *ptr ATTRIBUTE_UNUSED)
{
  inchash::hash hstate;
  if (ptr->x_ix86_arch_string)
    hstate.add (ptr->x_ix86_arch_string, strlen (ptr->x_ix86_arch_string));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_recip_name)
    hstate.add (ptr->x_ix86_recip_name, strlen (ptr->x_ix86_recip_name));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_tune_ctrl_string)
    hstate.add (ptr->x_ix86_tune_ctrl_string, strlen (ptr->x_ix86_tune_ctrl_string));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_tune_memcpy_strategy)
    hstate.add (ptr->x_ix86_tune_memcpy_strategy, strlen (ptr->x_ix86_tune_memcpy_strategy));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_tune_memset_strategy)
    hstate.add (ptr->x_ix86_tune_memset_strategy, strlen (ptr->x_ix86_tune_memset_strategy));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_tune_string)
    hstate.add (ptr->x_ix86_tune_string, strlen (ptr->x_ix86_tune_string));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_stack_protector_guard_offset_str)
    hstate.add (ptr->x_ix86_stack_protector_guard_offset_str, strlen (ptr->x_ix86_stack_protector_guard_offset_str));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_stack_protector_guard_reg_str)
    hstate.add (ptr->x_ix86_stack_protector_guard_reg_str, strlen (ptr->x_ix86_stack_protector_guard_reg_str));
  else
    hstate.add_int (0);
  if (ptr->x_ix86_stack_protector_guard_symbol_str)
    hstate.add (ptr->x_ix86_stack_protector_guard_symbol_str, strlen (ptr->x_ix86_stack_protector_guard_symbol_str));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_ix86_isa_flags2_explicit);
  hstate.add_hwi (ptr->x_ix86_isa_flags_explicit);
  hstate.add_hwi (ptr->x_ix86_asm_dialect);
  hstate.add_hwi (ptr->x_ix86_abi);
  hstate.add_hwi (ptr->x_ix86_stack_protector_guard);
  hstate.add_hwi (ptr->x_ix86_stringop_alg);
  hstate.add_hwi (ptr->x_ix86_tls_dialect);
  hstate.add_hwi (ptr->x_ix86_branch_cost);
  hstate.add_hwi (ptr->x_ix86_dump_tunes);
  hstate.add_hwi (ptr->x_ix86_force_align_arg_pointer);
  hstate.add_hwi (ptr->x_ix86_force_drap);
  hstate.add_hwi (ptr->x_ix86_section_threshold);
  hstate.add_hwi (ptr->x_ix86_sse2avx);
  hstate.add_hwi (ptr->x_ix86_tune_no_default);
  hstate.add_hwi (ptr->x_recip_mask_explicit);
  hstate.add_hwi (ptr->arch);
  hstate.add_hwi (ptr->arch_specified);
  hstate.add_hwi (ptr->branch_cost);
  hstate.add_hwi (ptr->prefetch_sse);
  hstate.add_hwi (ptr->schedule);
  hstate.add_hwi (ptr->tune);
  hstate.add_hwi (ptr->tune_defaulted);
  hstate.add_hwi (ptr->x_ix86_stack_protector_guard_offset);
  hstate.add_hwi (ptr->x_ix86_stack_protector_guard_reg);
  hstate.add_hwi (ptr->x_ix86_unsafe_math_optimizations);
  hstate.add_hwi (ptr->x_ix86_cmodel);
  hstate.add_hwi (ptr->x_ix86_excess_precision);
  hstate.add_hwi (ptr->x_ix86_veclibabi_type);
  hstate.add_hwi (ptr->x_ix86_pmode);
  hstate.add_hwi (ptr->x_ix86_incoming_stack_boundary_arg);
  hstate.add_hwi (ptr->x_ix86_preferred_stack_boundary_arg);
  hstate.add_hwi (ptr->x_ix86_regparm);
  hstate.add_hwi (ptr->x_recip_mask);
  hstate.add_hwi (ptr->x_target_flags);
  hstate.add_hwi (ptr->x_ix86_isa_flags);
  hstate.add_hwi (ptr->x_ix86_isa_flags2);
  hstate.add_hwi (ptr->x_flag_fentry);
  hstate.add_hwi (ptr->x_ix86_fpmath);
  hstate.add_hwi (ptr->x_ix86_target_flags);
  hstate.add_hwi (ptr->x_ix86_move_max);
  hstate.add_hwi (ptr->x_ix86_needed);
  hstate.add_hwi (ptr->x_prefer_vector_width_type);
  hstate.add_hwi (ptr->x_ix86_store_max);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    hstate.add_hwi (ptr->explicit_mask[i]);
  hstate.add_hwi (ptr->explicit_mask_target_flags);
  hstate.add_hwi (ptr->explicit_mask_ix86_isa_flags);
  hstate.add_hwi (ptr->explicit_mask_ix86_isa_flags2);
  hstate.add_hwi (ptr->explicit_mask_ix86_target_flags);
  return hstate.end ();
}

/* Stream out target options  */
void
cl_target_option_stream_out (struct output_block *ob ATTRIBUTE_UNUSED,
                             struct bitpack_d *bp ATTRIBUTE_UNUSED,
                             struct cl_target_option *ptr ATTRIBUTE_UNUSED)
{
  bp_pack_string (ob, bp, ptr->x_ix86_arch_string, true);
  bp_pack_string (ob, bp, ptr->x_ix86_recip_name, true);
  bp_pack_string (ob, bp, ptr->x_ix86_tune_ctrl_string, true);
  bp_pack_string (ob, bp, ptr->x_ix86_tune_memcpy_strategy, true);
  bp_pack_string (ob, bp, ptr->x_ix86_tune_memset_strategy, true);
  bp_pack_string (ob, bp, ptr->x_ix86_tune_string, true);
  bp_pack_string (ob, bp, ptr->x_ix86_stack_protector_guard_offset_str, true);
  bp_pack_string (ob, bp, ptr->x_ix86_stack_protector_guard_reg_str, true);
  bp_pack_string (ob, bp, ptr->x_ix86_stack_protector_guard_symbol_str, true);
  bp_pack_value (bp, ptr->x_ix86_isa_flags2_explicit, 64);
  bp_pack_value (bp, ptr->x_ix86_isa_flags_explicit, 64);
  bp_pack_value (bp, ptr->x_ix86_asm_dialect, 64);
  bp_pack_value (bp, ptr->x_ix86_abi, 64);
  bp_pack_value (bp, ptr->x_ix86_stack_protector_guard, 64);
  bp_pack_value (bp, ptr->x_ix86_stringop_alg, 64);
  bp_pack_value (bp, ptr->x_ix86_tls_dialect, 64);
  bp_pack_value (bp, ptr->x_ix86_branch_cost, 64);
  bp_pack_value (bp, ptr->x_ix86_dump_tunes, 64);
  bp_pack_value (bp, ptr->x_ix86_force_align_arg_pointer, 64);
  bp_pack_value (bp, ptr->x_ix86_force_drap, 64);
  bp_pack_value (bp, ptr->x_ix86_section_threshold, 64);
  bp_pack_value (bp, ptr->x_ix86_sse2avx, 64);
  bp_pack_value (bp, ptr->x_ix86_tune_no_default, 64);
  bp_pack_value (bp, ptr->x_recip_mask_explicit, 64);
  bp_pack_value (bp, ptr->arch, 64);
  bp_pack_value (bp, ptr->arch_specified, 64);
  bp_pack_value (bp, ptr->branch_cost, 64);
  bp_pack_value (bp, ptr->prefetch_sse, 64);
  bp_pack_value (bp, ptr->schedule, 64);
  bp_pack_value (bp, ptr->tune, 64);
  bp_pack_value (bp, ptr->tune_defaulted, 64);
  bp_pack_value (bp, ptr->x_ix86_stack_protector_guard_offset, 64);
  bp_pack_value (bp, ptr->x_ix86_stack_protector_guard_reg, 64);
  bp_pack_value (bp, ptr->x_ix86_unsafe_math_optimizations, 64);
  bp_pack_value (bp, ptr->x_ix86_cmodel, 64);
  bp_pack_value (bp, ptr->x_ix86_excess_precision, 64);
  bp_pack_value (bp, ptr->x_ix86_veclibabi_type, 64);
  bp_pack_value (bp, ptr->x_ix86_pmode, 64);
  bp_pack_value (bp, ptr->x_ix86_incoming_stack_boundary_arg, 64);
  bp_pack_value (bp, ptr->x_ix86_preferred_stack_boundary_arg, 64);
  bp_pack_value (bp, ptr->x_ix86_regparm, 64);
  bp_pack_value (bp, ptr->x_recip_mask, 64);
  bp_pack_value (bp, ptr->x_target_flags, 64);
  bp_pack_value (bp, ptr->x_ix86_isa_flags, 64);
  bp_pack_value (bp, ptr->x_ix86_isa_flags2, 64);
  bp_pack_value (bp, ptr->x_flag_fentry, 64);
  bp_pack_value (bp, ptr->x_ix86_fpmath, 64);
  bp_pack_value (bp, ptr->x_ix86_target_flags, 64);
  bp_pack_value (bp, ptr->x_ix86_move_max, 64);
  bp_pack_value (bp, ptr->x_ix86_needed, 64);
  bp_pack_value (bp, ptr->x_prefer_vector_width_type, 64);
  bp_pack_value (bp, ptr->x_ix86_store_max, 64);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    bp_pack_value (bp, ptr->explicit_mask[i], 64);
  bp_pack_value (bp, ptr->explicit_mask_target_flags, 64);
  bp_pack_value (bp, ptr->explicit_mask_ix86_isa_flags, 64);
  bp_pack_value (bp, ptr->explicit_mask_ix86_isa_flags2, 64);
  bp_pack_value (bp, ptr->explicit_mask_ix86_target_flags, 64);
}

/* Stream in target options  */
void
cl_target_option_stream_in (struct data_in *data_in ATTRIBUTE_UNUSED,
                            struct bitpack_d *bp ATTRIBUTE_UNUSED,
                            struct cl_target_option *ptr ATTRIBUTE_UNUSED)
{
  ptr->x_ix86_arch_string = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_arch_string)
    ptr->x_ix86_arch_string = xstrdup (ptr->x_ix86_arch_string);
  ptr->x_ix86_recip_name = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_recip_name)
    ptr->x_ix86_recip_name = xstrdup (ptr->x_ix86_recip_name);
  ptr->x_ix86_tune_ctrl_string = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_tune_ctrl_string)
    ptr->x_ix86_tune_ctrl_string = xstrdup (ptr->x_ix86_tune_ctrl_string);
  ptr->x_ix86_tune_memcpy_strategy = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_tune_memcpy_strategy)
    ptr->x_ix86_tune_memcpy_strategy = xstrdup (ptr->x_ix86_tune_memcpy_strategy);
  ptr->x_ix86_tune_memset_strategy = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_tune_memset_strategy)
    ptr->x_ix86_tune_memset_strategy = xstrdup (ptr->x_ix86_tune_memset_strategy);
  ptr->x_ix86_tune_string = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_tune_string)
    ptr->x_ix86_tune_string = xstrdup (ptr->x_ix86_tune_string);
  ptr->x_ix86_stack_protector_guard_offset_str = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_stack_protector_guard_offset_str)
    ptr->x_ix86_stack_protector_guard_offset_str = xstrdup (ptr->x_ix86_stack_protector_guard_offset_str);
  ptr->x_ix86_stack_protector_guard_reg_str = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_stack_protector_guard_reg_str)
    ptr->x_ix86_stack_protector_guard_reg_str = xstrdup (ptr->x_ix86_stack_protector_guard_reg_str);
  ptr->x_ix86_stack_protector_guard_symbol_str = bp_unpack_string (data_in, bp);
  if (ptr->x_ix86_stack_protector_guard_symbol_str)
    ptr->x_ix86_stack_protector_guard_symbol_str = xstrdup (ptr->x_ix86_stack_protector_guard_symbol_str);
  ptr->x_ix86_isa_flags2_explicit = (HOST_WIDE_INT) bp_unpack_value (bp, 64);
  ptr->x_ix86_isa_flags_explicit = (HOST_WIDE_INT) bp_unpack_value (bp, 64);
  ptr->x_ix86_asm_dialect = (enum asm_dialect) bp_unpack_value (bp, 64);
  ptr->x_ix86_abi = (enum calling_abi) bp_unpack_value (bp, 64);
  ptr->x_ix86_stack_protector_guard = (enum stack_protector_guard) bp_unpack_value (bp, 64);
  ptr->x_ix86_stringop_alg = (enum stringop_alg) bp_unpack_value (bp, 64);
  ptr->x_ix86_tls_dialect = (enum tls_dialect) bp_unpack_value (bp, 64);
  ptr->x_ix86_branch_cost = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_dump_tunes = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_force_align_arg_pointer = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_force_drap = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_section_threshold = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_sse2avx = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_tune_no_default = (int) bp_unpack_value (bp, 64);
  ptr->x_recip_mask_explicit = (int) bp_unpack_value (bp, 64);
  ptr->arch = (unsigned char) bp_unpack_value (bp, 64);
  ptr->arch_specified = (unsigned char) bp_unpack_value (bp, 64);
  ptr->branch_cost = (unsigned char) bp_unpack_value (bp, 64);
  ptr->prefetch_sse = (unsigned char) bp_unpack_value (bp, 64);
  ptr->schedule = (unsigned char) bp_unpack_value (bp, 64);
  ptr->tune = (unsigned char) bp_unpack_value (bp, 64);
  ptr->tune_defaulted = (unsigned char) bp_unpack_value (bp, 64);
  ptr->x_ix86_stack_protector_guard_offset = (HOST_WIDE_INT) bp_unpack_value (bp, 64);
  ptr->x_ix86_stack_protector_guard_reg = (addr_space_t) bp_unpack_value (bp, 64);
  ptr->x_ix86_unsafe_math_optimizations = (bool) bp_unpack_value (bp, 64);
  ptr->x_ix86_cmodel = (enum cmodel) bp_unpack_value (bp, 64);
  ptr->x_ix86_excess_precision = (enum excess_precision) bp_unpack_value (bp, 64);
  ptr->x_ix86_veclibabi_type = (enum ix86_veclibabi) bp_unpack_value (bp, 64);
  ptr->x_ix86_pmode = (enum pmode) bp_unpack_value (bp, 64);
  ptr->x_ix86_incoming_stack_boundary_arg = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_preferred_stack_boundary_arg = (int) bp_unpack_value (bp, 64);
  ptr->x_ix86_regparm = (int) bp_unpack_value (bp, 64);
  ptr->x_recip_mask = (int) bp_unpack_value (bp, 64);
  ptr->x_target_flags = (/* - */ int ) bp_unpack_value (bp, 64);
  ptr->x_ix86_isa_flags = (HOST_WIDE_INT ) bp_unpack_value (bp, 64);
  ptr->x_ix86_isa_flags2 = (HOST_WIDE_INT ) bp_unpack_value (bp, 64);
  ptr->x_flag_fentry = (signed char ) bp_unpack_value (bp, 64);
  ptr->x_ix86_fpmath = (enum fpmath_unit ) bp_unpack_value (bp, 64);
  ptr->x_ix86_target_flags = (/* - */ int ) bp_unpack_value (bp, 64);
  ptr->x_ix86_move_max = (enum prefer_vector_width ) bp_unpack_value (bp, 64);
  ptr->x_ix86_needed = (signed char ) bp_unpack_value (bp, 64);
  ptr->x_prefer_vector_width_type = (enum prefer_vector_width ) bp_unpack_value (bp, 64);
  ptr->x_ix86_store_max = (enum prefer_vector_width ) bp_unpack_value (bp, 64);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);
  ptr->explicit_mask_target_flags = bp_unpack_value (bp, 64);
  ptr->explicit_mask_ix86_isa_flags = bp_unpack_value (bp, 64);
  ptr->explicit_mask_ix86_isa_flags2 = bp_unpack_value (bp, 64);
  ptr->explicit_mask_ix86_target_flags = bp_unpack_value (bp, 64);
}
/* free heap memory used by target options  */
void
cl_target_option_free (struct cl_target_option *ptr ATTRIBUTE_UNUSED)
{
  if (ptr->x_ix86_arch_string)
    free (const_cast <char *>(ptr->x_ix86_arch_string));
  if (ptr->x_ix86_recip_name)
    free (const_cast <char *>(ptr->x_ix86_recip_name));
  if (ptr->x_ix86_tune_ctrl_string)
    free (const_cast <char *>(ptr->x_ix86_tune_ctrl_string));
  if (ptr->x_ix86_tune_memcpy_strategy)
    free (const_cast <char *>(ptr->x_ix86_tune_memcpy_strategy));
  if (ptr->x_ix86_tune_memset_strategy)
    free (const_cast <char *>(ptr->x_ix86_tune_memset_strategy));
  if (ptr->x_ix86_tune_string)
    free (const_cast <char *>(ptr->x_ix86_tune_string));
  if (ptr->x_ix86_stack_protector_guard_offset_str)
    free (const_cast <char *>(ptr->x_ix86_stack_protector_guard_offset_str));
  if (ptr->x_ix86_stack_protector_guard_reg_str)
    free (const_cast <char *>(ptr->x_ix86_stack_protector_guard_reg_str));
  if (ptr->x_ix86_stack_protector_guard_symbol_str)
    free (const_cast <char *>(ptr->x_ix86_stack_protector_guard_symbol_str));
}

/* Hash optimization options  */
hashval_t
cl_optimization_hash (struct cl_optimization const *ptr ATTRIBUTE_UNUSED)
{
  inchash::hash hstate;
  hstate.add_hwi (ptr->x_optimize);
  hstate.add_hwi (ptr->x_optimize_size);
  hstate.add_hwi (ptr->x_optimize_debug);
  hstate.add_hwi (ptr->x_optimize_fast);
  hstate.add_hwi (ptr->x_param_align_loop_iterations);
  hstate.add_hwi (ptr->x_param_align_threshold);
  hstate.add_hwi (ptr->x_param_asan_protect_allocas);
  hstate.add_hwi (ptr->x_param_asan_instrument_reads);
  hstate.add_hwi (ptr->x_param_asan_instrument_writes);
  hstate.add_hwi (ptr->x_param_asan_instrumentation_with_call_threshold);
  hstate.add_hwi (ptr->x_param_asan_memintrin);
  hstate.add_hwi (ptr->x_param_asan_stack);
  hstate.add_hwi (ptr->x_param_asan_use_after_return);
  hstate.add_hwi (ptr->x_param_avg_loop_niter);
  hstate.add_hwi (ptr->x_param_avoid_fma_max_bits);
  hstate.add_hwi (ptr->x_param_builtin_expect_probability);
  hstate.add_hwi (ptr->x_param_builtin_string_cmp_inline_length);
  hstate.add_hwi (ptr->x_param_case_values_threshold);
  hstate.add_hwi (ptr->x_param_comdat_sharing_probability);
  hstate.add_hwi (ptr->x_param_construct_interfere_size);
  hstate.add_hwi (ptr->x_param_destruct_interfere_size);
  hstate.add_hwi (ptr->x_param_dse_max_alias_queries_per_store);
  hstate.add_hwi (ptr->x_param_dse_max_object_size);
  hstate.add_hwi (ptr->x_param_early_inlining_insns);
  hstate.add_hwi (ptr->x_param_evrp_mode);
  hstate.add_hwi (ptr->x_param_evrp_sparse_threshold);
  hstate.add_hwi (ptr->x_param_evrp_switch_limit);
  hstate.add_hwi (ptr->x_param_fsm_scale_path_blocks);
  hstate.add_hwi (ptr->x_param_fsm_scale_path_stmts);
  hstate.add_hwi (ptr->x_param_gcse_after_reload_critical_fraction);
  hstate.add_hwi (ptr->x_param_gcse_after_reload_partial_fraction);
  hstate.add_hwi (ptr->x_param_gcse_cost_distance_ratio);
  hstate.add_hwi (ptr->x_param_gcse_unrestricted_cost);
  hstate.add_hwi (ptr->x_param_graphite_max_arrays_per_scop);
  hstate.add_hwi (ptr->x_param_graphite_max_nb_scop_params);
  hstate.add_hwi (ptr->x_param_hwasan_instrument_allocas);
  hstate.add_hwi (ptr->x_param_hwasan_instrument_mem_intrinsics);
  hstate.add_hwi (ptr->x_param_hwasan_instrument_reads);
  hstate.add_hwi (ptr->x_param_hwasan_instrument_stack);
  hstate.add_hwi (ptr->x_param_hwasan_instrument_writes);
  hstate.add_hwi (ptr->x_param_hwasan_random_frame_tag);
  hstate.add_hwi (ptr->x_param_inline_heuristics_hint_percent);
  hstate.add_hwi (ptr->x_param_inline_min_speedup);
  hstate.add_hwi (ptr->x_param_inline_unit_growth);
  hstate.add_hwi (ptr->x_param_ipa_cp_eval_threshold);
  hstate.add_hwi (ptr->x_param_ipa_cp_large_unit_insns);
  hstate.add_hwi (ptr->x_param_ipa_cp_loop_hint_bonus);
  hstate.add_hwi (ptr->x_param_ipa_cp_max_recursive_depth);
  hstate.add_hwi (ptr->x_param_ipa_cp_min_recursive_probability);
  hstate.add_hwi (ptr->x_param_ipa_cp_profile_count_base);
  hstate.add_hwi (ptr->x_param_ipa_cp_recursion_penalty);
  hstate.add_hwi (ptr->x_param_ipa_cp_recursive_freq_factor);
  hstate.add_hwi (ptr->x_param_ipa_cp_single_call_penalty);
  hstate.add_hwi (ptr->x_param_ipa_cp_unit_growth);
  hstate.add_hwi (ptr->x_param_ipa_cp_value_list_size);
  hstate.add_hwi (ptr->x_param_ipa_jump_function_lookups);
  hstate.add_hwi (ptr->x_param_ipa_max_aa_steps);
  hstate.add_hwi (ptr->x_param_ipa_max_agg_items);
  hstate.add_hwi (ptr->x_param_ipa_max_loop_predicates);
  hstate.add_hwi (ptr->x_param_ipa_max_param_expr_ops);
  hstate.add_hwi (ptr->x_param_ipa_max_switch_predicate_bounds);
  hstate.add_hwi (ptr->x_param_ipa_sra_max_replacements);
  hstate.add_hwi (ptr->x_param_ipa_sra_ptr_growth_factor);
  hstate.add_hwi (ptr->x_param_ira_consider_dup_in_all_alts);
  hstate.add_hwi (ptr->x_param_ira_loop_reserved_regs);
  hstate.add_hwi (ptr->x_param_ira_max_conflict_table_size);
  hstate.add_hwi (ptr->x_param_ira_max_loops_num);
  hstate.add_hwi (ptr->x_param_iv_always_prune_cand_set_bound);
  hstate.add_hwi (ptr->x_param_iv_consider_all_candidates_bound);
  hstate.add_hwi (ptr->x_param_iv_max_considered_uses);
  hstate.add_hwi (ptr->x_param_jump_table_max_growth_ratio_for_size);
  hstate.add_hwi (ptr->x_param_jump_table_max_growth_ratio_for_speed);
  hstate.add_hwi (ptr->x_param_l1_cache_line_size);
  hstate.add_hwi (ptr->x_param_l1_cache_size);
  hstate.add_hwi (ptr->x_param_l2_cache_size);
  hstate.add_hwi (ptr->x_param_large_function_growth);
  hstate.add_hwi (ptr->x_param_large_function_insns);
  hstate.add_hwi (ptr->x_param_stack_frame_growth);
  hstate.add_hwi (ptr->x_param_large_stack_frame);
  hstate.add_hwi (ptr->x_param_large_unit_insns);
  hstate.add_hwi (ptr->x_param_lim_expensive);
  hstate.add_hwi (ptr->x_param_loop_block_tile_size);
  hstate.add_hwi (ptr->x_param_loop_interchange_max_num_stmts);
  hstate.add_hwi (ptr->x_param_loop_interchange_stride_ratio);
  hstate.add_hwi (ptr->x_param_loop_invariant_max_bbs_in_loop);
  hstate.add_hwi (ptr->x_param_loop_max_datarefs_for_datadeps);
  hstate.add_hwi (ptr->x_param_loop_versioning_max_inner_insns);
  hstate.add_hwi (ptr->x_param_loop_versioning_max_outer_insns);
  hstate.add_hwi (ptr->x_param_lra_inheritance_ebb_probability_cutoff);
  hstate.add_hwi (ptr->x_param_lra_max_considered_reload_pseudos);
  hstate.add_hwi (ptr->x_param_max_average_unrolled_insns);
  hstate.add_hwi (ptr->x_param_max_combine_insns);
  hstate.add_hwi (ptr->x_param_max_unroll_iterations);
  hstate.add_hwi (ptr->x_param_max_completely_peel_times);
  hstate.add_hwi (ptr->x_param_max_completely_peeled_insns);
  hstate.add_hwi (ptr->x_param_max_crossjump_edges);
  hstate.add_hwi (ptr->x_param_max_cse_insns);
  hstate.add_hwi (ptr->x_param_max_cse_path_length);
  hstate.add_hwi (ptr->x_param_max_cselib_memory_locations);
  hstate.add_hwi (ptr->x_param_max_debug_marker_count);
  hstate.add_hwi (ptr->x_param_max_delay_slot_insn_search);
  hstate.add_hwi (ptr->x_param_max_delay_slot_live_search);
  hstate.add_hwi (ptr->x_param_max_dse_active_local_stores);
  hstate.add_hwi (ptr->x_param_early_inliner_max_iterations);
  hstate.add_hwi (ptr->x_param_max_find_base_term_values);
  hstate.add_hwi (ptr->x_param_max_fsm_thread_length);
  hstate.add_hwi (ptr->x_param_max_fsm_thread_path_insns);
  hstate.add_hwi (ptr->x_param_max_gcse_insertion_ratio);
  hstate.add_hwi (ptr->x_param_max_gcse_memory);
  hstate.add_hwi (ptr->x_param_max_goto_duplication_insns);
  hstate.add_hwi (ptr->x_param_max_grow_copy_bb_insns);
  hstate.add_hwi (ptr->x_param_max_hoist_depth);
  hstate.add_hwi (ptr->x_param_inline_functions_called_once_insns);
  hstate.add_hwi (ptr->x_param_inline_functions_called_once_loop_depth);
  hstate.add_hwi (ptr->x_param_max_inline_insns_auto);
  hstate.add_hwi (ptr->x_param_max_inline_insns_recursive_auto);
  hstate.add_hwi (ptr->x_param_max_inline_insns_recursive);
  hstate.add_hwi (ptr->x_param_max_inline_insns_single);
  hstate.add_hwi (ptr->x_param_max_inline_insns_size);
  hstate.add_hwi (ptr->x_param_max_inline_insns_small);
  hstate.add_hwi (ptr->x_param_max_inline_recursive_depth_auto);
  hstate.add_hwi (ptr->x_param_max_inline_recursive_depth);
  hstate.add_hwi (ptr->x_param_max_isl_operations);
  hstate.add_hwi (ptr->x_param_max_iterations_computation_cost);
  hstate.add_hwi (ptr->x_param_max_iterations_to_track);
  hstate.add_hwi (ptr->x_param_max_jump_thread_duplication_stmts);
  hstate.add_hwi (ptr->x_param_max_last_value_rtl);
  hstate.add_hwi (ptr->x_param_max_loop_header_insns);
  hstate.add_hwi (ptr->x_param_max_modulo_backtrack_attempts);
  hstate.add_hwi (ptr->x_param_max_partial_antic_length);
  hstate.add_hwi (ptr->x_param_max_peel_branches);
  hstate.add_hwi (ptr->x_param_max_peel_times);
  hstate.add_hwi (ptr->x_param_max_peeled_insns);
  hstate.add_hwi (ptr->x_param_max_pending_list_length);
  hstate.add_hwi (ptr->x_param_max_pipeline_region_blocks);
  hstate.add_hwi (ptr->x_param_max_pipeline_region_insns);
  hstate.add_hwi (ptr->x_param_max_pow_sqrt_depth);
  hstate.add_hwi (ptr->x_param_max_predicted_iterations);
  hstate.add_hwi (ptr->x_param_max_reload_search_insns);
  hstate.add_hwi (ptr->x_param_max_rtl_if_conversion_insns);
  hstate.add_hwi (ptr->x_param_max_rtl_if_conversion_predictable_cost);
  hstate.add_hwi (ptr->x_param_max_rtl_if_conversion_unpredictable_cost);
  hstate.add_hwi (ptr->x_param_max_sched_extend_regions_iters);
  hstate.add_hwi (ptr->x_param_max_sched_insn_conflict_delay);
  hstate.add_hwi (ptr->x_param_max_sched_ready_insns);
  hstate.add_hwi (ptr->x_param_max_sched_region_blocks);
  hstate.add_hwi (ptr->x_param_max_sched_region_insns);
  hstate.add_hwi (ptr->x_param_max_slsr_candidate_scan);
  hstate.add_hwi (ptr->x_param_max_speculative_devirt_maydefs);
  hstate.add_hwi (ptr->x_param_max_stores_to_merge);
  hstate.add_hwi (ptr->x_param_max_stores_to_sink);
  hstate.add_hwi (ptr->x_param_max_tail_merge_comparisons);
  hstate.add_hwi (ptr->x_param_max_tail_merge_iterations);
  hstate.add_hwi (ptr->x_param_max_tracked_strlens);
  hstate.add_hwi (ptr->x_param_max_tree_if_conversion_phi_args);
  hstate.add_hwi (ptr->x_param_max_unroll_times);
  hstate.add_hwi (ptr->x_param_max_unrolled_insns);
  hstate.add_hwi (ptr->x_param_max_unswitch_insns);
  hstate.add_hwi (ptr->x_param_max_variable_expansions);
  hstate.add_hwi (ptr->x_param_max_vartrack_expr_depth);
  hstate.add_hwi (ptr->x_param_max_vartrack_reverse_op_size);
  hstate.add_hwi (ptr->x_param_max_vartrack_size);
  hstate.add_hwi (ptr->x_param_max_vrp_switch_assertions);
  hstate.add_hwi (ptr->x_param_min_crossjump_insns);
  hstate.add_hwi (ptr->x_param_min_inline_recursive_probability);
  hstate.add_hwi (ptr->x_param_min_insn_to_prefetch_ratio);
  hstate.add_hwi (ptr->x_param_min_loop_cond_split_prob);
  hstate.add_hwi (ptr->x_param_min_pagesize);
  hstate.add_hwi (ptr->x_param_min_size_for_stack_sharing);
  hstate.add_hwi (ptr->x_param_min_spec_prob);
  hstate.add_hwi (ptr->x_param_min_vect_loop_bound);
  hstate.add_hwi (ptr->x_param_modref_max_accesses);
  hstate.add_hwi (ptr->x_param_modref_max_adjustments);
  hstate.add_hwi (ptr->x_param_modref_max_bases);
  hstate.add_hwi (ptr->x_param_modref_max_depth);
  hstate.add_hwi (ptr->x_param_modref_max_escape_points);
  hstate.add_hwi (ptr->x_param_modref_max_refs);
  hstate.add_hwi (ptr->x_param_modref_max_tests);
  hstate.add_hwi (ptr->x_param_parloops_chunk_size);
  hstate.add_hwi (ptr->x_param_parloops_min_per_thread);
  hstate.add_hwi (ptr->x_param_parloops_schedule);
  hstate.add_hwi (ptr->x_param_partial_inlining_entry_probability);
  hstate.add_hwi (ptr->x_param_predictable_branch_outcome);
  hstate.add_hwi (ptr->x_param_prefetch_dynamic_strides);
  hstate.add_hwi (ptr->x_param_prefetch_latency);
  hstate.add_hwi (ptr->x_param_prefetch_min_insn_to_mem_ratio);
  hstate.add_hwi (ptr->x_param_prefetch_minimum_stride);
  hstate.add_hwi (ptr->x_param_ranger_debug);
  hstate.add_hwi (ptr->x_param_ranger_logical_depth);
  hstate.add_hwi (ptr->x_param_relation_block_limit);
  hstate.add_hwi (ptr->x_param_rpo_vn_max_loop_depth);
  hstate.add_hwi (ptr->x_param_sccvn_max_alias_queries_per_access);
  hstate.add_hwi (ptr->x_param_scev_max_expr_complexity);
  hstate.add_hwi (ptr->x_param_scev_max_expr_size);
  hstate.add_hwi (ptr->x_param_sched_autopref_queue_depth);
  hstate.add_hwi (ptr->x_param_sched_mem_true_dep_cost);
  hstate.add_hwi (ptr->x_param_sched_pressure_algorithm);
  hstate.add_hwi (ptr->x_param_sched_spec_prob_cutoff);
  hstate.add_hwi (ptr->x_param_sched_state_edge_prob_cutoff);
  hstate.add_hwi (ptr->x_param_selsched_insns_to_rename);
  hstate.add_hwi (ptr->x_param_selsched_max_lookahead);
  hstate.add_hwi (ptr->x_param_selsched_max_sched_times);
  hstate.add_hwi (ptr->x_param_simultaneous_prefetches);
  hstate.add_hwi (ptr->x_param_sink_frequency_threshold);
  hstate.add_hwi (ptr->x_param_sms_dfa_history);
  hstate.add_hwi (ptr->x_param_sms_loop_average_count_threshold);
  hstate.add_hwi (ptr->x_param_sms_max_ii_factor);
  hstate.add_hwi (ptr->x_param_sms_min_sc);
  hstate.add_hwi (ptr->x_param_sra_max_propagations);
  hstate.add_hwi (ptr->x_param_sra_max_scalarization_size_size);
  hstate.add_hwi (ptr->x_param_sra_max_scalarization_size_speed);
  hstate.add_hwi (ptr->x_param_ssa_name_def_chain_limit);
  hstate.add_hwi (ptr->x_param_ssp_buffer_size);
  hstate.add_hwi (ptr->x_param_stack_clash_protection_guard_size);
  hstate.add_hwi (ptr->x_param_stack_clash_protection_probe_interval);
  hstate.add_hwi (ptr->x_param_store_merging_allow_unaligned);
  hstate.add_hwi (ptr->x_param_store_merging_max_size);
  hstate.add_hwi (ptr->x_param_switch_conversion_branch_ratio);
  hstate.add_hwi (ptr->x_param_threader_debug);
  hstate.add_hwi (ptr->x_param_tm_max_aggregate_size);
  hstate.add_hwi (ptr->x_param_tracer_dynamic_coverage_feedback);
  hstate.add_hwi (ptr->x_param_tracer_dynamic_coverage);
  hstate.add_hwi (ptr->x_param_tracer_max_code_growth);
  hstate.add_hwi (ptr->x_param_tracer_min_branch_probability_feedback);
  hstate.add_hwi (ptr->x_param_tracer_min_branch_probability);
  hstate.add_hwi (ptr->x_param_tracer_min_branch_ratio);
  hstate.add_hwi (ptr->x_param_tree_reassoc_width);
  hstate.add_hwi (ptr->x_param_uninit_control_dep_attempts);
  hstate.add_hwi (ptr->x_param_uninlined_function_insns);
  hstate.add_hwi (ptr->x_param_uninlined_function_time);
  hstate.add_hwi (ptr->x_param_uninlined_function_thunk_insns);
  hstate.add_hwi (ptr->x_param_uninlined_function_thunk_time);
  hstate.add_hwi (ptr->x_param_unlikely_bb_count_fraction);
  hstate.add_hwi (ptr->x_param_unroll_jam_max_unroll);
  hstate.add_hwi (ptr->x_param_unroll_jam_min_percent);
  hstate.add_hwi (ptr->x_param_use_after_scope_direct_emission_threshold);
  hstate.add_hwi (ptr->x_param_vect_epilogues_nomask);
  hstate.add_hwi (ptr->x_param_vect_induction_float);
  hstate.add_hwi (ptr->x_param_vect_inner_loop_cost_factor);
  hstate.add_hwi (ptr->x_param_vect_max_peeling_for_alignment);
  hstate.add_hwi (ptr->x_param_vect_max_version_for_alias_checks);
  hstate.add_hwi (ptr->x_param_vect_max_version_for_alignment_checks);
  hstate.add_hwi (ptr->x_param_vect_partial_vector_usage);
  hstate.add_hwi (ptr->x_param_vrp1_mode);
  hstate.add_hwi (ptr->x_param_vrp2_mode);
  hstate.add_hwi (ptr->x_warn_inline);
  hstate.add_hwi (ptr->x_flag_aggressive_loop_optimizations);
  hstate.add_hwi (ptr->x_flag_align_functions);
  if (ptr->x_str_align_functions)
    hstate.add (ptr->x_str_align_functions, strlen (ptr->x_str_align_functions));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_flag_align_jumps);
  if (ptr->x_str_align_jumps)
    hstate.add (ptr->x_str_align_jumps, strlen (ptr->x_str_align_jumps));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_flag_align_labels);
  if (ptr->x_str_align_labels)
    hstate.add (ptr->x_str_align_labels, strlen (ptr->x_str_align_labels));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_flag_align_loops);
  if (ptr->x_str_align_loops)
    hstate.add (ptr->x_str_align_loops, strlen (ptr->x_str_align_loops));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_flag_allocation_dce);
  hstate.add_hwi (ptr->x_flag_store_data_races);
  hstate.add_hwi (ptr->x_flag_associative_math);
  hstate.add_hwi (ptr->x_flag_asynchronous_unwind_tables);
  hstate.add_hwi (ptr->x_flag_auto_inc_dec);
  hstate.add_hwi (ptr->x_flag_bit_tests);
  hstate.add_hwi (ptr->x_flag_branch_on_count_reg);
  hstate.add_hwi (ptr->x_flag_branch_probabilities);
  hstate.add_hwi (ptr->x_flag_caller_saves);
  hstate.add_hwi (ptr->x_flag_code_hoisting);
  hstate.add_hwi (ptr->x_flag_combine_stack_adjustments);
  hstate.add_hwi (ptr->x_flag_compare_elim_after_reload);
  hstate.add_hwi (ptr->x_flag_conserve_stack);
  hstate.add_hwi (ptr->x_flag_cprop_registers);
  hstate.add_hwi (ptr->x_flag_crossjumping);
  hstate.add_hwi (ptr->x_flag_cse_follow_jumps);
  hstate.add_hwi (ptr->x_flag_cx_fortran_rules);
  hstate.add_hwi (ptr->x_flag_cx_limited_range);
  hstate.add_hwi (ptr->x_flag_dce);
  hstate.add_hwi (ptr->x_flag_defer_pop);
  hstate.add_hwi (ptr->x_flag_delayed_branch);
  hstate.add_hwi (ptr->x_flag_delete_dead_exceptions);
  hstate.add_hwi (ptr->x_flag_delete_null_pointer_checks);
  hstate.add_hwi (ptr->x_flag_devirtualize);
  hstate.add_hwi (ptr->x_flag_devirtualize_speculatively);
  hstate.add_hwi (ptr->x_flag_dse);
  hstate.add_hwi (ptr->x_flag_early_inlining);
  hstate.add_hwi (ptr->x_flag_exceptions);
  hstate.add_hwi (ptr->x_flag_excess_precision);
  hstate.add_hwi (ptr->x_flag_expensive_optimizations);
  hstate.add_hwi (ptr->x_flag_finite_loops);
  hstate.add_hwi (ptr->x_flag_finite_math_only);
  hstate.add_hwi (ptr->x_flag_float_store);
  hstate.add_hwi (ptr->x_flag_fold_simple_inlines);
  hstate.add_hwi (ptr->x_flag_forward_propagate);
  hstate.add_hwi (ptr->x_flag_fp_contract_mode);
  hstate.add_hwi (ptr->x_flag_fp_int_builtin_inexact);
  hstate.add_hwi (ptr->x_flag_no_function_cse);
  hstate.add_hwi (ptr->x_flag_gcse);
  hstate.add_hwi (ptr->x_flag_gcse_after_reload);
  hstate.add_hwi (ptr->x_flag_gcse_las);
  hstate.add_hwi (ptr->x_flag_gcse_lm);
  hstate.add_hwi (ptr->x_flag_gcse_sm);
  hstate.add_hwi (ptr->x_flag_graphite);
  hstate.add_hwi (ptr->x_flag_graphite_identity);
  hstate.add_hwi (ptr->x_flag_guess_branch_prob);
  hstate.add_hwi (ptr->x_flag_harden_compares);
  hstate.add_hwi (ptr->x_flag_harden_conditional_branches);
  hstate.add_hwi (ptr->x_flag_hoist_adjacent_loads);
  hstate.add_hwi (ptr->x_flag_if_conversion);
  hstate.add_hwi (ptr->x_flag_if_conversion2);
  hstate.add_hwi (ptr->x_flag_indirect_inlining);
  hstate.add_hwi (ptr->x_flag_no_inline);
  hstate.add_hwi (ptr->x_flag_inline_atomics);
  hstate.add_hwi (ptr->x_flag_inline_functions);
  hstate.add_hwi (ptr->x_flag_inline_functions_called_once);
  hstate.add_hwi (ptr->x_flag_inline_small_functions);
  hstate.add_hwi (ptr->x_flag_ipa_bit_cp);
  hstate.add_hwi (ptr->x_flag_ipa_cp);
  hstate.add_hwi (ptr->x_flag_ipa_cp_clone);
  hstate.add_hwi (ptr->x_flag_ipa_icf);
  hstate.add_hwi (ptr->x_flag_ipa_icf_functions);
  hstate.add_hwi (ptr->x_flag_ipa_icf_variables);
  hstate.add_hwi (ptr->x_flag_ipa_modref);
  hstate.add_hwi (ptr->x_flag_ipa_profile);
  hstate.add_hwi (ptr->x_flag_ipa_pta);
  hstate.add_hwi (ptr->x_flag_ipa_pure_const);
  hstate.add_hwi (ptr->x_flag_ipa_ra);
  hstate.add_hwi (ptr->x_flag_ipa_reference);
  hstate.add_hwi (ptr->x_flag_ipa_reference_addressable);
  hstate.add_hwi (ptr->x_flag_ipa_sra);
  hstate.add_hwi (ptr->x_flag_ipa_stack_alignment);
  hstate.add_hwi (ptr->x_flag_ipa_strict_aliasing);
  hstate.add_hwi (ptr->x_flag_ipa_vrp);
  hstate.add_hwi (ptr->x_flag_ira_algorithm);
  hstate.add_hwi (ptr->x_flag_ira_hoist_pressure);
  hstate.add_hwi (ptr->x_flag_ira_loop_pressure);
  hstate.add_hwi (ptr->x_flag_ira_region);
  hstate.add_hwi (ptr->x_flag_ira_share_save_slots);
  hstate.add_hwi (ptr->x_flag_ira_share_spill_slots);
  hstate.add_hwi (ptr->x_flag_isolate_erroneous_paths_attribute);
  hstate.add_hwi (ptr->x_flag_isolate_erroneous_paths_dereference);
  hstate.add_hwi (ptr->x_flag_ivopts);
  hstate.add_hwi (ptr->x_flag_jump_tables);
  hstate.add_hwi (ptr->x_flag_keep_gc_roots_live);
  hstate.add_hwi (ptr->x_flag_lifetime_dse);
  hstate.add_hwi (ptr->x_flag_limit_function_alignment);
  hstate.add_hwi (ptr->x_flag_live_patching);
  hstate.add_hwi (ptr->x_flag_live_range_shrinkage);
  hstate.add_hwi (ptr->x_flag_loop_interchange);
  hstate.add_hwi (ptr->x_flag_loop_nest_optimize);
  hstate.add_hwi (ptr->x_flag_loop_parallelize_all);
  hstate.add_hwi (ptr->x_flag_unroll_jam);
  hstate.add_hwi (ptr->x_flag_lra_remat);
  hstate.add_hwi (ptr->x_flag_errno_math);
  hstate.add_hwi (ptr->x_flag_modulo_sched);
  hstate.add_hwi (ptr->x_flag_modulo_sched_allow_regmoves);
  hstate.add_hwi (ptr->x_flag_move_loop_invariants);
  hstate.add_hwi (ptr->x_flag_move_loop_stores);
  hstate.add_hwi (ptr->x_flag_non_call_exceptions);
  hstate.add_hwi (ptr->x_flag_nothrow_opt);
  hstate.add_hwi (ptr->x_flag_omit_frame_pointer);
  hstate.add_hwi (ptr->x_flag_opt_info);
  hstate.add_hwi (ptr->x_flag_optimize_sibling_calls);
  hstate.add_hwi (ptr->x_flag_optimize_strlen);
  hstate.add_hwi (ptr->x_flag_pack_struct);
  hstate.add_hwi (ptr->x_flag_partial_inlining);
  if (ptr->x_flag_patchable_function_entry)
    hstate.add (ptr->x_flag_patchable_function_entry, strlen (ptr->x_flag_patchable_function_entry));
  else
    hstate.add_int (0);
  hstate.add_hwi (ptr->x_flag_peel_loops);
  hstate.add_hwi (ptr->x_flag_no_peephole);
  hstate.add_hwi (ptr->x_flag_peephole2);
  hstate.add_hwi (ptr->x_flag_plt);
  hstate.add_hwi (ptr->x_flag_predictive_commoning);
  hstate.add_hwi (ptr->x_flag_prefetch_loop_arrays);
  hstate.add_hwi (ptr->x_flag_printf_return_value);
  hstate.add_hwi (ptr->x_flag_profile_partial_training);
  hstate.add_hwi (ptr->x_flag_profile_reorder_functions);
  hstate.add_hwi (ptr->x_flag_reciprocal_math);
  hstate.add_hwi (ptr->x_flag_ree);
  hstate.add_hwi (ptr->x_flag_pcc_struct_return);
  hstate.add_hwi (ptr->x_flag_rename_registers);
  hstate.add_hwi (ptr->x_flag_reorder_blocks);
  hstate.add_hwi (ptr->x_flag_reorder_blocks_algorithm);
  hstate.add_hwi (ptr->x_flag_reorder_blocks_and_partition);
  hstate.add_hwi (ptr->x_flag_reorder_functions);
  hstate.add_hwi (ptr->x_flag_rerun_cse_after_loop);
  hstate.add_hwi (ptr->x_flag_resched_modulo_sched);
  hstate.add_hwi (ptr->x_flag_rounding_math);
  hstate.add_hwi (ptr->x_flag_rtti);
  hstate.add_hwi (ptr->x_flag_save_optimization_record);
  hstate.add_hwi (ptr->x_flag_sched_critical_path_heuristic);
  hstate.add_hwi (ptr->x_flag_sched_dep_count_heuristic);
  hstate.add_hwi (ptr->x_flag_sched_group_heuristic);
  hstate.add_hwi (ptr->x_flag_schedule_interblock);
  hstate.add_hwi (ptr->x_flag_sched_last_insn_heuristic);
  hstate.add_hwi (ptr->x_flag_sched_pressure);
  hstate.add_hwi (ptr->x_flag_sched_rank_heuristic);
  hstate.add_hwi (ptr->x_flag_schedule_speculative);
  hstate.add_hwi (ptr->x_flag_sched_spec_insn_heuristic);
  hstate.add_hwi (ptr->x_flag_schedule_speculative_load);
  hstate.add_hwi (ptr->x_flag_schedule_speculative_load_dangerous);
  hstate.add_hwi (ptr->x_flag_sched_stalled_insns);
  hstate.add_hwi (ptr->x_flag_sched_stalled_insns_dep);
  hstate.add_hwi (ptr->x_flag_sched2_use_superblocks);
  hstate.add_hwi (ptr->x_flag_schedule_fusion);
  hstate.add_hwi (ptr->x_flag_schedule_insns);
  hstate.add_hwi (ptr->x_flag_schedule_insns_after_reload);
  hstate.add_hwi (ptr->x_flag_section_anchors);
  hstate.add_hwi (ptr->x_flag_sel_sched_pipelining);
  hstate.add_hwi (ptr->x_flag_sel_sched_pipelining_outer_loops);
  hstate.add_hwi (ptr->x_flag_sel_sched_reschedule_pipelined);
  hstate.add_hwi (ptr->x_flag_selective_scheduling);
  hstate.add_hwi (ptr->x_flag_selective_scheduling2);
  hstate.add_hwi (ptr->x_flag_semantic_interposition);
  hstate.add_hwi (ptr->x_flag_short_enums);
  hstate.add_hwi (ptr->x_flag_short_wchar);
  hstate.add_hwi (ptr->x_flag_shrink_wrap);
  hstate.add_hwi (ptr->x_flag_shrink_wrap_separate);
  hstate.add_hwi (ptr->x_flag_signaling_nans);
  hstate.add_hwi (ptr->x_flag_signed_zeros);
  hstate.add_hwi (ptr->x_flag_simd_cost_model);
  hstate.add_hwi (ptr->x_flag_single_precision_constant);
  hstate.add_hwi (ptr->x_flag_split_ivs_in_unroller);
  hstate.add_hwi (ptr->x_flag_split_loops);
  hstate.add_hwi (ptr->x_flag_split_paths);
  hstate.add_hwi (ptr->x_flag_split_wide_types);
  hstate.add_hwi (ptr->x_flag_split_wide_types_early);
  hstate.add_hwi (ptr->x_flag_ssa_backprop);
  hstate.add_hwi (ptr->x_flag_ssa_phiopt);
  hstate.add_hwi (ptr->x_flag_stack_clash_protection);
  hstate.add_hwi (ptr->x_flag_stack_protect);
  hstate.add_hwi (ptr->x_flag_stack_reuse);
  hstate.add_hwi (ptr->x_flag_stdarg_opt);
  hstate.add_hwi (ptr->x_flag_store_merging);
  hstate.add_hwi (ptr->x_flag_strict_aliasing);
  hstate.add_hwi (ptr->x_flag_strict_enums);
  hstate.add_hwi (ptr->x_flag_strict_volatile_bitfields);
  hstate.add_hwi (ptr->x_flag_thread_jumps);
  hstate.add_hwi (ptr->x_flag_threadsafe_statics);
  hstate.add_hwi (ptr->x_flag_toplevel_reorder);
  hstate.add_hwi (ptr->x_flag_tracer);
  hstate.add_hwi (ptr->x_flag_trapping_math);
  hstate.add_hwi (ptr->x_flag_trapv);
  hstate.add_hwi (ptr->x_flag_tree_bit_ccp);
  hstate.add_hwi (ptr->x_flag_tree_builtin_call_dce);
  hstate.add_hwi (ptr->x_flag_tree_ccp);
  hstate.add_hwi (ptr->x_flag_tree_ch);
  hstate.add_hwi (ptr->x_flag_tree_coalesce_vars);
  hstate.add_hwi (ptr->x_flag_tree_copy_prop);
  hstate.add_hwi (ptr->x_flag_tree_cselim);
  hstate.add_hwi (ptr->x_flag_tree_dce);
  hstate.add_hwi (ptr->x_flag_tree_dom);
  hstate.add_hwi (ptr->x_flag_tree_dse);
  hstate.add_hwi (ptr->x_flag_tree_forwprop);
  hstate.add_hwi (ptr->x_flag_tree_fre);
  hstate.add_hwi (ptr->x_flag_tree_loop_distribute_patterns);
  hstate.add_hwi (ptr->x_flag_tree_loop_distribution);
  hstate.add_hwi (ptr->x_flag_tree_loop_if_convert);
  hstate.add_hwi (ptr->x_flag_tree_loop_im);
  hstate.add_hwi (ptr->x_flag_tree_loop_ivcanon);
  hstate.add_hwi (ptr->x_flag_tree_loop_optimize);
  hstate.add_hwi (ptr->x_flag_tree_loop_vectorize);
  hstate.add_hwi (ptr->x_flag_tree_live_range_split);
  hstate.add_hwi (ptr->x_flag_tree_parallelize_loops);
  hstate.add_hwi (ptr->x_flag_tree_partial_pre);
  hstate.add_hwi (ptr->x_flag_tree_phiprop);
  hstate.add_hwi (ptr->x_flag_tree_pre);
  hstate.add_hwi (ptr->x_flag_tree_pta);
  hstate.add_hwi (ptr->x_flag_tree_reassoc);
  hstate.add_hwi (ptr->x_flag_tree_scev_cprop);
  hstate.add_hwi (ptr->x_flag_tree_sink);
  hstate.add_hwi (ptr->x_flag_tree_slp_vectorize);
  hstate.add_hwi (ptr->x_flag_tree_slsr);
  hstate.add_hwi (ptr->x_flag_tree_sra);
  hstate.add_hwi (ptr->x_flag_tree_switch_conversion);
  hstate.add_hwi (ptr->x_flag_tree_tail_merge);
  hstate.add_hwi (ptr->x_flag_tree_ter);
  hstate.add_hwi (ptr->x_flag_tree_vectorize);
  hstate.add_hwi (ptr->x_flag_tree_vrp);
  hstate.add_hwi (ptr->x_flag_auto_var_init);
  hstate.add_hwi (ptr->x_flag_unconstrained_commons);
  hstate.add_hwi (ptr->x_flag_unroll_all_loops);
  hstate.add_hwi (ptr->x_flag_cunroll_grow_size);
  hstate.add_hwi (ptr->x_flag_unroll_loops);
  hstate.add_hwi (ptr->x_flag_unsafe_math_optimizations);
  hstate.add_hwi (ptr->x_flag_unswitch_loops);
  hstate.add_hwi (ptr->x_flag_unwind_tables);
  hstate.add_hwi (ptr->x_flag_variable_expansion_in_unroller);
  hstate.add_hwi (ptr->x_flag_vect_cost_model);
  hstate.add_hwi (ptr->x_flag_version_loops_for_strides);
  hstate.add_hwi (ptr->x_flag_value_profile_transformations);
  hstate.add_hwi (ptr->x_flag_web);
  hstate.add_hwi (ptr->x_flag_wrapv);
  hstate.add_hwi (ptr->x_flag_wrapv_pointer);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    hstate.add_hwi (ptr->explicit_mask[i]);
  return hstate.end ();
}

/* Compare two optimization options  */
bool
cl_optimization_option_eq (cl_optimization const *ptr1,
                           cl_optimization const *ptr2)
{
  if (ptr1->x_optimize != ptr2->x_optimize)
    return false;
  if (ptr1->x_optimize_size != ptr2->x_optimize_size)
    return false;
  if (ptr1->x_optimize_debug != ptr2->x_optimize_debug)
    return false;
  if (ptr1->x_optimize_fast != ptr2->x_optimize_fast)
    return false;
  if (ptr1->x_param_align_loop_iterations != ptr2->x_param_align_loop_iterations)
    return false;
  if (ptr1->x_param_align_threshold != ptr2->x_param_align_threshold)
    return false;
  if (ptr1->x_param_asan_protect_allocas != ptr2->x_param_asan_protect_allocas)
    return false;
  if (ptr1->x_param_asan_instrument_reads != ptr2->x_param_asan_instrument_reads)
    return false;
  if (ptr1->x_param_asan_instrument_writes != ptr2->x_param_asan_instrument_writes)
    return false;
  if (ptr1->x_param_asan_instrumentation_with_call_threshold != ptr2->x_param_asan_instrumentation_with_call_threshold)
    return false;
  if (ptr1->x_param_asan_memintrin != ptr2->x_param_asan_memintrin)
    return false;
  if (ptr1->x_param_asan_stack != ptr2->x_param_asan_stack)
    return false;
  if (ptr1->x_param_asan_use_after_return != ptr2->x_param_asan_use_after_return)
    return false;
  if (ptr1->x_param_avg_loop_niter != ptr2->x_param_avg_loop_niter)
    return false;
  if (ptr1->x_param_avoid_fma_max_bits != ptr2->x_param_avoid_fma_max_bits)
    return false;
  if (ptr1->x_param_builtin_expect_probability != ptr2->x_param_builtin_expect_probability)
    return false;
  if (ptr1->x_param_builtin_string_cmp_inline_length != ptr2->x_param_builtin_string_cmp_inline_length)
    return false;
  if (ptr1->x_param_case_values_threshold != ptr2->x_param_case_values_threshold)
    return false;
  if (ptr1->x_param_comdat_sharing_probability != ptr2->x_param_comdat_sharing_probability)
    return false;
  if (ptr1->x_param_construct_interfere_size != ptr2->x_param_construct_interfere_size)
    return false;
  if (ptr1->x_param_destruct_interfere_size != ptr2->x_param_destruct_interfere_size)
    return false;
  if (ptr1->x_param_dse_max_alias_queries_per_store != ptr2->x_param_dse_max_alias_queries_per_store)
    return false;
  if (ptr1->x_param_dse_max_object_size != ptr2->x_param_dse_max_object_size)
    return false;
  if (ptr1->x_param_early_inlining_insns != ptr2->x_param_early_inlining_insns)
    return false;
  if (ptr1->x_param_evrp_mode != ptr2->x_param_evrp_mode)
    return false;
  if (ptr1->x_param_evrp_sparse_threshold != ptr2->x_param_evrp_sparse_threshold)
    return false;
  if (ptr1->x_param_evrp_switch_limit != ptr2->x_param_evrp_switch_limit)
    return false;
  if (ptr1->x_param_fsm_scale_path_blocks != ptr2->x_param_fsm_scale_path_blocks)
    return false;
  if (ptr1->x_param_fsm_scale_path_stmts != ptr2->x_param_fsm_scale_path_stmts)
    return false;
  if (ptr1->x_param_gcse_after_reload_critical_fraction != ptr2->x_param_gcse_after_reload_critical_fraction)
    return false;
  if (ptr1->x_param_gcse_after_reload_partial_fraction != ptr2->x_param_gcse_after_reload_partial_fraction)
    return false;
  if (ptr1->x_param_gcse_cost_distance_ratio != ptr2->x_param_gcse_cost_distance_ratio)
    return false;
  if (ptr1->x_param_gcse_unrestricted_cost != ptr2->x_param_gcse_unrestricted_cost)
    return false;
  if (ptr1->x_param_graphite_max_arrays_per_scop != ptr2->x_param_graphite_max_arrays_per_scop)
    return false;
  if (ptr1->x_param_graphite_max_nb_scop_params != ptr2->x_param_graphite_max_nb_scop_params)
    return false;
  if (ptr1->x_param_hwasan_instrument_allocas != ptr2->x_param_hwasan_instrument_allocas)
    return false;
  if (ptr1->x_param_hwasan_instrument_mem_intrinsics != ptr2->x_param_hwasan_instrument_mem_intrinsics)
    return false;
  if (ptr1->x_param_hwasan_instrument_reads != ptr2->x_param_hwasan_instrument_reads)
    return false;
  if (ptr1->x_param_hwasan_instrument_stack != ptr2->x_param_hwasan_instrument_stack)
    return false;
  if (ptr1->x_param_hwasan_instrument_writes != ptr2->x_param_hwasan_instrument_writes)
    return false;
  if (ptr1->x_param_hwasan_random_frame_tag != ptr2->x_param_hwasan_random_frame_tag)
    return false;
  if (ptr1->x_param_inline_heuristics_hint_percent != ptr2->x_param_inline_heuristics_hint_percent)
    return false;
  if (ptr1->x_param_inline_min_speedup != ptr2->x_param_inline_min_speedup)
    return false;
  if (ptr1->x_param_inline_unit_growth != ptr2->x_param_inline_unit_growth)
    return false;
  if (ptr1->x_param_ipa_cp_eval_threshold != ptr2->x_param_ipa_cp_eval_threshold)
    return false;
  if (ptr1->x_param_ipa_cp_large_unit_insns != ptr2->x_param_ipa_cp_large_unit_insns)
    return false;
  if (ptr1->x_param_ipa_cp_loop_hint_bonus != ptr2->x_param_ipa_cp_loop_hint_bonus)
    return false;
  if (ptr1->x_param_ipa_cp_max_recursive_depth != ptr2->x_param_ipa_cp_max_recursive_depth)
    return false;
  if (ptr1->x_param_ipa_cp_min_recursive_probability != ptr2->x_param_ipa_cp_min_recursive_probability)
    return false;
  if (ptr1->x_param_ipa_cp_profile_count_base != ptr2->x_param_ipa_cp_profile_count_base)
    return false;
  if (ptr1->x_param_ipa_cp_recursion_penalty != ptr2->x_param_ipa_cp_recursion_penalty)
    return false;
  if (ptr1->x_param_ipa_cp_recursive_freq_factor != ptr2->x_param_ipa_cp_recursive_freq_factor)
    return false;
  if (ptr1->x_param_ipa_cp_single_call_penalty != ptr2->x_param_ipa_cp_single_call_penalty)
    return false;
  if (ptr1->x_param_ipa_cp_unit_growth != ptr2->x_param_ipa_cp_unit_growth)
    return false;
  if (ptr1->x_param_ipa_cp_value_list_size != ptr2->x_param_ipa_cp_value_list_size)
    return false;
  if (ptr1->x_param_ipa_jump_function_lookups != ptr2->x_param_ipa_jump_function_lookups)
    return false;
  if (ptr1->x_param_ipa_max_aa_steps != ptr2->x_param_ipa_max_aa_steps)
    return false;
  if (ptr1->x_param_ipa_max_agg_items != ptr2->x_param_ipa_max_agg_items)
    return false;
  if (ptr1->x_param_ipa_max_loop_predicates != ptr2->x_param_ipa_max_loop_predicates)
    return false;
  if (ptr1->x_param_ipa_max_param_expr_ops != ptr2->x_param_ipa_max_param_expr_ops)
    return false;
  if (ptr1->x_param_ipa_max_switch_predicate_bounds != ptr2->x_param_ipa_max_switch_predicate_bounds)
    return false;
  if (ptr1->x_param_ipa_sra_max_replacements != ptr2->x_param_ipa_sra_max_replacements)
    return false;
  if (ptr1->x_param_ipa_sra_ptr_growth_factor != ptr2->x_param_ipa_sra_ptr_growth_factor)
    return false;
  if (ptr1->x_param_ira_consider_dup_in_all_alts != ptr2->x_param_ira_consider_dup_in_all_alts)
    return false;
  if (ptr1->x_param_ira_loop_reserved_regs != ptr2->x_param_ira_loop_reserved_regs)
    return false;
  if (ptr1->x_param_ira_max_conflict_table_size != ptr2->x_param_ira_max_conflict_table_size)
    return false;
  if (ptr1->x_param_ira_max_loops_num != ptr2->x_param_ira_max_loops_num)
    return false;
  if (ptr1->x_param_iv_always_prune_cand_set_bound != ptr2->x_param_iv_always_prune_cand_set_bound)
    return false;
  if (ptr1->x_param_iv_consider_all_candidates_bound != ptr2->x_param_iv_consider_all_candidates_bound)
    return false;
  if (ptr1->x_param_iv_max_considered_uses != ptr2->x_param_iv_max_considered_uses)
    return false;
  if (ptr1->x_param_jump_table_max_growth_ratio_for_size != ptr2->x_param_jump_table_max_growth_ratio_for_size)
    return false;
  if (ptr1->x_param_jump_table_max_growth_ratio_for_speed != ptr2->x_param_jump_table_max_growth_ratio_for_speed)
    return false;
  if (ptr1->x_param_l1_cache_line_size != ptr2->x_param_l1_cache_line_size)
    return false;
  if (ptr1->x_param_l1_cache_size != ptr2->x_param_l1_cache_size)
    return false;
  if (ptr1->x_param_l2_cache_size != ptr2->x_param_l2_cache_size)
    return false;
  if (ptr1->x_param_large_function_growth != ptr2->x_param_large_function_growth)
    return false;
  if (ptr1->x_param_large_function_insns != ptr2->x_param_large_function_insns)
    return false;
  if (ptr1->x_param_stack_frame_growth != ptr2->x_param_stack_frame_growth)
    return false;
  if (ptr1->x_param_large_stack_frame != ptr2->x_param_large_stack_frame)
    return false;
  if (ptr1->x_param_large_unit_insns != ptr2->x_param_large_unit_insns)
    return false;
  if (ptr1->x_param_lim_expensive != ptr2->x_param_lim_expensive)
    return false;
  if (ptr1->x_param_loop_block_tile_size != ptr2->x_param_loop_block_tile_size)
    return false;
  if (ptr1->x_param_loop_interchange_max_num_stmts != ptr2->x_param_loop_interchange_max_num_stmts)
    return false;
  if (ptr1->x_param_loop_interchange_stride_ratio != ptr2->x_param_loop_interchange_stride_ratio)
    return false;
  if (ptr1->x_param_loop_invariant_max_bbs_in_loop != ptr2->x_param_loop_invariant_max_bbs_in_loop)
    return false;
  if (ptr1->x_param_loop_max_datarefs_for_datadeps != ptr2->x_param_loop_max_datarefs_for_datadeps)
    return false;
  if (ptr1->x_param_loop_versioning_max_inner_insns != ptr2->x_param_loop_versioning_max_inner_insns)
    return false;
  if (ptr1->x_param_loop_versioning_max_outer_insns != ptr2->x_param_loop_versioning_max_outer_insns)
    return false;
  if (ptr1->x_param_lra_inheritance_ebb_probability_cutoff != ptr2->x_param_lra_inheritance_ebb_probability_cutoff)
    return false;
  if (ptr1->x_param_lra_max_considered_reload_pseudos != ptr2->x_param_lra_max_considered_reload_pseudos)
    return false;
  if (ptr1->x_param_max_average_unrolled_insns != ptr2->x_param_max_average_unrolled_insns)
    return false;
  if (ptr1->x_param_max_combine_insns != ptr2->x_param_max_combine_insns)
    return false;
  if (ptr1->x_param_max_unroll_iterations != ptr2->x_param_max_unroll_iterations)
    return false;
  if (ptr1->x_param_max_completely_peel_times != ptr2->x_param_max_completely_peel_times)
    return false;
  if (ptr1->x_param_max_completely_peeled_insns != ptr2->x_param_max_completely_peeled_insns)
    return false;
  if (ptr1->x_param_max_crossjump_edges != ptr2->x_param_max_crossjump_edges)
    return false;
  if (ptr1->x_param_max_cse_insns != ptr2->x_param_max_cse_insns)
    return false;
  if (ptr1->x_param_max_cse_path_length != ptr2->x_param_max_cse_path_length)
    return false;
  if (ptr1->x_param_max_cselib_memory_locations != ptr2->x_param_max_cselib_memory_locations)
    return false;
  if (ptr1->x_param_max_debug_marker_count != ptr2->x_param_max_debug_marker_count)
    return false;
  if (ptr1->x_param_max_delay_slot_insn_search != ptr2->x_param_max_delay_slot_insn_search)
    return false;
  if (ptr1->x_param_max_delay_slot_live_search != ptr2->x_param_max_delay_slot_live_search)
    return false;
  if (ptr1->x_param_max_dse_active_local_stores != ptr2->x_param_max_dse_active_local_stores)
    return false;
  if (ptr1->x_param_early_inliner_max_iterations != ptr2->x_param_early_inliner_max_iterations)
    return false;
  if (ptr1->x_param_max_find_base_term_values != ptr2->x_param_max_find_base_term_values)
    return false;
  if (ptr1->x_param_max_fsm_thread_length != ptr2->x_param_max_fsm_thread_length)
    return false;
  if (ptr1->x_param_max_fsm_thread_path_insns != ptr2->x_param_max_fsm_thread_path_insns)
    return false;
  if (ptr1->x_param_max_gcse_insertion_ratio != ptr2->x_param_max_gcse_insertion_ratio)
    return false;
  if (ptr1->x_param_max_gcse_memory != ptr2->x_param_max_gcse_memory)
    return false;
  if (ptr1->x_param_max_goto_duplication_insns != ptr2->x_param_max_goto_duplication_insns)
    return false;
  if (ptr1->x_param_max_grow_copy_bb_insns != ptr2->x_param_max_grow_copy_bb_insns)
    return false;
  if (ptr1->x_param_max_hoist_depth != ptr2->x_param_max_hoist_depth)
    return false;
  if (ptr1->x_param_inline_functions_called_once_insns != ptr2->x_param_inline_functions_called_once_insns)
    return false;
  if (ptr1->x_param_inline_functions_called_once_loop_depth != ptr2->x_param_inline_functions_called_once_loop_depth)
    return false;
  if (ptr1->x_param_max_inline_insns_auto != ptr2->x_param_max_inline_insns_auto)
    return false;
  if (ptr1->x_param_max_inline_insns_recursive_auto != ptr2->x_param_max_inline_insns_recursive_auto)
    return false;
  if (ptr1->x_param_max_inline_insns_recursive != ptr2->x_param_max_inline_insns_recursive)
    return false;
  if (ptr1->x_param_max_inline_insns_single != ptr2->x_param_max_inline_insns_single)
    return false;
  if (ptr1->x_param_max_inline_insns_size != ptr2->x_param_max_inline_insns_size)
    return false;
  if (ptr1->x_param_max_inline_insns_small != ptr2->x_param_max_inline_insns_small)
    return false;
  if (ptr1->x_param_max_inline_recursive_depth_auto != ptr2->x_param_max_inline_recursive_depth_auto)
    return false;
  if (ptr1->x_param_max_inline_recursive_depth != ptr2->x_param_max_inline_recursive_depth)
    return false;
  if (ptr1->x_param_max_isl_operations != ptr2->x_param_max_isl_operations)
    return false;
  if (ptr1->x_param_max_iterations_computation_cost != ptr2->x_param_max_iterations_computation_cost)
    return false;
  if (ptr1->x_param_max_iterations_to_track != ptr2->x_param_max_iterations_to_track)
    return false;
  if (ptr1->x_param_max_jump_thread_duplication_stmts != ptr2->x_param_max_jump_thread_duplication_stmts)
    return false;
  if (ptr1->x_param_max_last_value_rtl != ptr2->x_param_max_last_value_rtl)
    return false;
  if (ptr1->x_param_max_loop_header_insns != ptr2->x_param_max_loop_header_insns)
    return false;
  if (ptr1->x_param_max_modulo_backtrack_attempts != ptr2->x_param_max_modulo_backtrack_attempts)
    return false;
  if (ptr1->x_param_max_partial_antic_length != ptr2->x_param_max_partial_antic_length)
    return false;
  if (ptr1->x_param_max_peel_branches != ptr2->x_param_max_peel_branches)
    return false;
  if (ptr1->x_param_max_peel_times != ptr2->x_param_max_peel_times)
    return false;
  if (ptr1->x_param_max_peeled_insns != ptr2->x_param_max_peeled_insns)
    return false;
  if (ptr1->x_param_max_pending_list_length != ptr2->x_param_max_pending_list_length)
    return false;
  if (ptr1->x_param_max_pipeline_region_blocks != ptr2->x_param_max_pipeline_region_blocks)
    return false;
  if (ptr1->x_param_max_pipeline_region_insns != ptr2->x_param_max_pipeline_region_insns)
    return false;
  if (ptr1->x_param_max_pow_sqrt_depth != ptr2->x_param_max_pow_sqrt_depth)
    return false;
  if (ptr1->x_param_max_predicted_iterations != ptr2->x_param_max_predicted_iterations)
    return false;
  if (ptr1->x_param_max_reload_search_insns != ptr2->x_param_max_reload_search_insns)
    return false;
  if (ptr1->x_param_max_rtl_if_conversion_insns != ptr2->x_param_max_rtl_if_conversion_insns)
    return false;
  if (ptr1->x_param_max_rtl_if_conversion_predictable_cost != ptr2->x_param_max_rtl_if_conversion_predictable_cost)
    return false;
  if (ptr1->x_param_max_rtl_if_conversion_unpredictable_cost != ptr2->x_param_max_rtl_if_conversion_unpredictable_cost)
    return false;
  if (ptr1->x_param_max_sched_extend_regions_iters != ptr2->x_param_max_sched_extend_regions_iters)
    return false;
  if (ptr1->x_param_max_sched_insn_conflict_delay != ptr2->x_param_max_sched_insn_conflict_delay)
    return false;
  if (ptr1->x_param_max_sched_ready_insns != ptr2->x_param_max_sched_ready_insns)
    return false;
  if (ptr1->x_param_max_sched_region_blocks != ptr2->x_param_max_sched_region_blocks)
    return false;
  if (ptr1->x_param_max_sched_region_insns != ptr2->x_param_max_sched_region_insns)
    return false;
  if (ptr1->x_param_max_slsr_candidate_scan != ptr2->x_param_max_slsr_candidate_scan)
    return false;
  if (ptr1->x_param_max_speculative_devirt_maydefs != ptr2->x_param_max_speculative_devirt_maydefs)
    return false;
  if (ptr1->x_param_max_stores_to_merge != ptr2->x_param_max_stores_to_merge)
    return false;
  if (ptr1->x_param_max_stores_to_sink != ptr2->x_param_max_stores_to_sink)
    return false;
  if (ptr1->x_param_max_tail_merge_comparisons != ptr2->x_param_max_tail_merge_comparisons)
    return false;
  if (ptr1->x_param_max_tail_merge_iterations != ptr2->x_param_max_tail_merge_iterations)
    return false;
  if (ptr1->x_param_max_tracked_strlens != ptr2->x_param_max_tracked_strlens)
    return false;
  if (ptr1->x_param_max_tree_if_conversion_phi_args != ptr2->x_param_max_tree_if_conversion_phi_args)
    return false;
  if (ptr1->x_param_max_unroll_times != ptr2->x_param_max_unroll_times)
    return false;
  if (ptr1->x_param_max_unrolled_insns != ptr2->x_param_max_unrolled_insns)
    return false;
  if (ptr1->x_param_max_unswitch_insns != ptr2->x_param_max_unswitch_insns)
    return false;
  if (ptr1->x_param_max_variable_expansions != ptr2->x_param_max_variable_expansions)
    return false;
  if (ptr1->x_param_max_vartrack_expr_depth != ptr2->x_param_max_vartrack_expr_depth)
    return false;
  if (ptr1->x_param_max_vartrack_reverse_op_size != ptr2->x_param_max_vartrack_reverse_op_size)
    return false;
  if (ptr1->x_param_max_vartrack_size != ptr2->x_param_max_vartrack_size)
    return false;
  if (ptr1->x_param_max_vrp_switch_assertions != ptr2->x_param_max_vrp_switch_assertions)
    return false;
  if (ptr1->x_param_min_crossjump_insns != ptr2->x_param_min_crossjump_insns)
    return false;
  if (ptr1->x_param_min_inline_recursive_probability != ptr2->x_param_min_inline_recursive_probability)
    return false;
  if (ptr1->x_param_min_insn_to_prefetch_ratio != ptr2->x_param_min_insn_to_prefetch_ratio)
    return false;
  if (ptr1->x_param_min_loop_cond_split_prob != ptr2->x_param_min_loop_cond_split_prob)
    return false;
  if (ptr1->x_param_min_pagesize != ptr2->x_param_min_pagesize)
    return false;
  if (ptr1->x_param_min_size_for_stack_sharing != ptr2->x_param_min_size_for_stack_sharing)
    return false;
  if (ptr1->x_param_min_spec_prob != ptr2->x_param_min_spec_prob)
    return false;
  if (ptr1->x_param_min_vect_loop_bound != ptr2->x_param_min_vect_loop_bound)
    return false;
  if (ptr1->x_param_modref_max_accesses != ptr2->x_param_modref_max_accesses)
    return false;
  if (ptr1->x_param_modref_max_adjustments != ptr2->x_param_modref_max_adjustments)
    return false;
  if (ptr1->x_param_modref_max_bases != ptr2->x_param_modref_max_bases)
    return false;
  if (ptr1->x_param_modref_max_depth != ptr2->x_param_modref_max_depth)
    return false;
  if (ptr1->x_param_modref_max_escape_points != ptr2->x_param_modref_max_escape_points)
    return false;
  if (ptr1->x_param_modref_max_refs != ptr2->x_param_modref_max_refs)
    return false;
  if (ptr1->x_param_modref_max_tests != ptr2->x_param_modref_max_tests)
    return false;
  if (ptr1->x_param_parloops_chunk_size != ptr2->x_param_parloops_chunk_size)
    return false;
  if (ptr1->x_param_parloops_min_per_thread != ptr2->x_param_parloops_min_per_thread)
    return false;
  if (ptr1->x_param_parloops_schedule != ptr2->x_param_parloops_schedule)
    return false;
  if (ptr1->x_param_partial_inlining_entry_probability != ptr2->x_param_partial_inlining_entry_probability)
    return false;
  if (ptr1->x_param_predictable_branch_outcome != ptr2->x_param_predictable_branch_outcome)
    return false;
  if (ptr1->x_param_prefetch_dynamic_strides != ptr2->x_param_prefetch_dynamic_strides)
    return false;
  if (ptr1->x_param_prefetch_latency != ptr2->x_param_prefetch_latency)
    return false;
  if (ptr1->x_param_prefetch_min_insn_to_mem_ratio != ptr2->x_param_prefetch_min_insn_to_mem_ratio)
    return false;
  if (ptr1->x_param_prefetch_minimum_stride != ptr2->x_param_prefetch_minimum_stride)
    return false;
  if (ptr1->x_param_ranger_debug != ptr2->x_param_ranger_debug)
    return false;
  if (ptr1->x_param_ranger_logical_depth != ptr2->x_param_ranger_logical_depth)
    return false;
  if (ptr1->x_param_relation_block_limit != ptr2->x_param_relation_block_limit)
    return false;
  if (ptr1->x_param_rpo_vn_max_loop_depth != ptr2->x_param_rpo_vn_max_loop_depth)
    return false;
  if (ptr1->x_param_sccvn_max_alias_queries_per_access != ptr2->x_param_sccvn_max_alias_queries_per_access)
    return false;
  if (ptr1->x_param_scev_max_expr_complexity != ptr2->x_param_scev_max_expr_complexity)
    return false;
  if (ptr1->x_param_scev_max_expr_size != ptr2->x_param_scev_max_expr_size)
    return false;
  if (ptr1->x_param_sched_autopref_queue_depth != ptr2->x_param_sched_autopref_queue_depth)
    return false;
  if (ptr1->x_param_sched_mem_true_dep_cost != ptr2->x_param_sched_mem_true_dep_cost)
    return false;
  if (ptr1->x_param_sched_pressure_algorithm != ptr2->x_param_sched_pressure_algorithm)
    return false;
  if (ptr1->x_param_sched_spec_prob_cutoff != ptr2->x_param_sched_spec_prob_cutoff)
    return false;
  if (ptr1->x_param_sched_state_edge_prob_cutoff != ptr2->x_param_sched_state_edge_prob_cutoff)
    return false;
  if (ptr1->x_param_selsched_insns_to_rename != ptr2->x_param_selsched_insns_to_rename)
    return false;
  if (ptr1->x_param_selsched_max_lookahead != ptr2->x_param_selsched_max_lookahead)
    return false;
  if (ptr1->x_param_selsched_max_sched_times != ptr2->x_param_selsched_max_sched_times)
    return false;
  if (ptr1->x_param_simultaneous_prefetches != ptr2->x_param_simultaneous_prefetches)
    return false;
  if (ptr1->x_param_sink_frequency_threshold != ptr2->x_param_sink_frequency_threshold)
    return false;
  if (ptr1->x_param_sms_dfa_history != ptr2->x_param_sms_dfa_history)
    return false;
  if (ptr1->x_param_sms_loop_average_count_threshold != ptr2->x_param_sms_loop_average_count_threshold)
    return false;
  if (ptr1->x_param_sms_max_ii_factor != ptr2->x_param_sms_max_ii_factor)
    return false;
  if (ptr1->x_param_sms_min_sc != ptr2->x_param_sms_min_sc)
    return false;
  if (ptr1->x_param_sra_max_propagations != ptr2->x_param_sra_max_propagations)
    return false;
  if (ptr1->x_param_sra_max_scalarization_size_size != ptr2->x_param_sra_max_scalarization_size_size)
    return false;
  if (ptr1->x_param_sra_max_scalarization_size_speed != ptr2->x_param_sra_max_scalarization_size_speed)
    return false;
  if (ptr1->x_param_ssa_name_def_chain_limit != ptr2->x_param_ssa_name_def_chain_limit)
    return false;
  if (ptr1->x_param_ssp_buffer_size != ptr2->x_param_ssp_buffer_size)
    return false;
  if (ptr1->x_param_stack_clash_protection_guard_size != ptr2->x_param_stack_clash_protection_guard_size)
    return false;
  if (ptr1->x_param_stack_clash_protection_probe_interval != ptr2->x_param_stack_clash_protection_probe_interval)
    return false;
  if (ptr1->x_param_store_merging_allow_unaligned != ptr2->x_param_store_merging_allow_unaligned)
    return false;
  if (ptr1->x_param_store_merging_max_size != ptr2->x_param_store_merging_max_size)
    return false;
  if (ptr1->x_param_switch_conversion_branch_ratio != ptr2->x_param_switch_conversion_branch_ratio)
    return false;
  if (ptr1->x_param_threader_debug != ptr2->x_param_threader_debug)
    return false;
  if (ptr1->x_param_tm_max_aggregate_size != ptr2->x_param_tm_max_aggregate_size)
    return false;
  if (ptr1->x_param_tracer_dynamic_coverage_feedback != ptr2->x_param_tracer_dynamic_coverage_feedback)
    return false;
  if (ptr1->x_param_tracer_dynamic_coverage != ptr2->x_param_tracer_dynamic_coverage)
    return false;
  if (ptr1->x_param_tracer_max_code_growth != ptr2->x_param_tracer_max_code_growth)
    return false;
  if (ptr1->x_param_tracer_min_branch_probability_feedback != ptr2->x_param_tracer_min_branch_probability_feedback)
    return false;
  if (ptr1->x_param_tracer_min_branch_probability != ptr2->x_param_tracer_min_branch_probability)
    return false;
  if (ptr1->x_param_tracer_min_branch_ratio != ptr2->x_param_tracer_min_branch_ratio)
    return false;
  if (ptr1->x_param_tree_reassoc_width != ptr2->x_param_tree_reassoc_width)
    return false;
  if (ptr1->x_param_uninit_control_dep_attempts != ptr2->x_param_uninit_control_dep_attempts)
    return false;
  if (ptr1->x_param_uninlined_function_insns != ptr2->x_param_uninlined_function_insns)
    return false;
  if (ptr1->x_param_uninlined_function_time != ptr2->x_param_uninlined_function_time)
    return false;
  if (ptr1->x_param_uninlined_function_thunk_insns != ptr2->x_param_uninlined_function_thunk_insns)
    return false;
  if (ptr1->x_param_uninlined_function_thunk_time != ptr2->x_param_uninlined_function_thunk_time)
    return false;
  if (ptr1->x_param_unlikely_bb_count_fraction != ptr2->x_param_unlikely_bb_count_fraction)
    return false;
  if (ptr1->x_param_unroll_jam_max_unroll != ptr2->x_param_unroll_jam_max_unroll)
    return false;
  if (ptr1->x_param_unroll_jam_min_percent != ptr2->x_param_unroll_jam_min_percent)
    return false;
  if (ptr1->x_param_use_after_scope_direct_emission_threshold != ptr2->x_param_use_after_scope_direct_emission_threshold)
    return false;
  if (ptr1->x_param_vect_epilogues_nomask != ptr2->x_param_vect_epilogues_nomask)
    return false;
  if (ptr1->x_param_vect_induction_float != ptr2->x_param_vect_induction_float)
    return false;
  if (ptr1->x_param_vect_inner_loop_cost_factor != ptr2->x_param_vect_inner_loop_cost_factor)
    return false;
  if (ptr1->x_param_vect_max_peeling_for_alignment != ptr2->x_param_vect_max_peeling_for_alignment)
    return false;
  if (ptr1->x_param_vect_max_version_for_alias_checks != ptr2->x_param_vect_max_version_for_alias_checks)
    return false;
  if (ptr1->x_param_vect_max_version_for_alignment_checks != ptr2->x_param_vect_max_version_for_alignment_checks)
    return false;
  if (ptr1->x_param_vect_partial_vector_usage != ptr2->x_param_vect_partial_vector_usage)
    return false;
  if (ptr1->x_param_vrp1_mode != ptr2->x_param_vrp1_mode)
    return false;
  if (ptr1->x_param_vrp2_mode != ptr2->x_param_vrp2_mode)
    return false;
  if (ptr1->x_warn_inline != ptr2->x_warn_inline)
    return false;
  if (ptr1->x_flag_aggressive_loop_optimizations != ptr2->x_flag_aggressive_loop_optimizations)
    return false;
  if (ptr1->x_flag_align_functions != ptr2->x_flag_align_functions)
    return false;
  if (ptr1->x_str_align_functions != ptr2->x_str_align_functions
      && (!ptr1->x_str_align_functions || !ptr2->x_str_align_functions
          || strcmp (ptr1->x_str_align_functions, ptr2->x_str_align_functions)))
    return false;
  if (ptr1->x_flag_align_jumps != ptr2->x_flag_align_jumps)
    return false;
  if (ptr1->x_str_align_jumps != ptr2->x_str_align_jumps
      && (!ptr1->x_str_align_jumps || !ptr2->x_str_align_jumps
          || strcmp (ptr1->x_str_align_jumps, ptr2->x_str_align_jumps)))
    return false;
  if (ptr1->x_flag_align_labels != ptr2->x_flag_align_labels)
    return false;
  if (ptr1->x_str_align_labels != ptr2->x_str_align_labels
      && (!ptr1->x_str_align_labels || !ptr2->x_str_align_labels
          || strcmp (ptr1->x_str_align_labels, ptr2->x_str_align_labels)))
    return false;
  if (ptr1->x_flag_align_loops != ptr2->x_flag_align_loops)
    return false;
  if (ptr1->x_str_align_loops != ptr2->x_str_align_loops
      && (!ptr1->x_str_align_loops || !ptr2->x_str_align_loops
          || strcmp (ptr1->x_str_align_loops, ptr2->x_str_align_loops)))
    return false;
  if (ptr1->x_flag_allocation_dce != ptr2->x_flag_allocation_dce)
    return false;
  if (ptr1->x_flag_store_data_races != ptr2->x_flag_store_data_races)
    return false;
  if (ptr1->x_flag_associative_math != ptr2->x_flag_associative_math)
    return false;
  if (ptr1->x_flag_asynchronous_unwind_tables != ptr2->x_flag_asynchronous_unwind_tables)
    return false;
  if (ptr1->x_flag_auto_inc_dec != ptr2->x_flag_auto_inc_dec)
    return false;
  if (ptr1->x_flag_bit_tests != ptr2->x_flag_bit_tests)
    return false;
  if (ptr1->x_flag_branch_on_count_reg != ptr2->x_flag_branch_on_count_reg)
    return false;
  if (ptr1->x_flag_branch_probabilities != ptr2->x_flag_branch_probabilities)
    return false;
  if (ptr1->x_flag_caller_saves != ptr2->x_flag_caller_saves)
    return false;
  if (ptr1->x_flag_code_hoisting != ptr2->x_flag_code_hoisting)
    return false;
  if (ptr1->x_flag_combine_stack_adjustments != ptr2->x_flag_combine_stack_adjustments)
    return false;
  if (ptr1->x_flag_compare_elim_after_reload != ptr2->x_flag_compare_elim_after_reload)
    return false;
  if (ptr1->x_flag_conserve_stack != ptr2->x_flag_conserve_stack)
    return false;
  if (ptr1->x_flag_cprop_registers != ptr2->x_flag_cprop_registers)
    return false;
  if (ptr1->x_flag_crossjumping != ptr2->x_flag_crossjumping)
    return false;
  if (ptr1->x_flag_cse_follow_jumps != ptr2->x_flag_cse_follow_jumps)
    return false;
  if (ptr1->x_flag_cx_fortran_rules != ptr2->x_flag_cx_fortran_rules)
    return false;
  if (ptr1->x_flag_cx_limited_range != ptr2->x_flag_cx_limited_range)
    return false;
  if (ptr1->x_flag_dce != ptr2->x_flag_dce)
    return false;
  if (ptr1->x_flag_defer_pop != ptr2->x_flag_defer_pop)
    return false;
  if (ptr1->x_flag_delayed_branch != ptr2->x_flag_delayed_branch)
    return false;
  if (ptr1->x_flag_delete_dead_exceptions != ptr2->x_flag_delete_dead_exceptions)
    return false;
  if (ptr1->x_flag_delete_null_pointer_checks != ptr2->x_flag_delete_null_pointer_checks)
    return false;
  if (ptr1->x_flag_devirtualize != ptr2->x_flag_devirtualize)
    return false;
  if (ptr1->x_flag_devirtualize_speculatively != ptr2->x_flag_devirtualize_speculatively)
    return false;
  if (ptr1->x_flag_dse != ptr2->x_flag_dse)
    return false;
  if (ptr1->x_flag_early_inlining != ptr2->x_flag_early_inlining)
    return false;
  if (ptr1->x_flag_exceptions != ptr2->x_flag_exceptions)
    return false;
  if (ptr1->x_flag_excess_precision != ptr2->x_flag_excess_precision)
    return false;
  if (ptr1->x_flag_expensive_optimizations != ptr2->x_flag_expensive_optimizations)
    return false;
  if (ptr1->x_flag_finite_loops != ptr2->x_flag_finite_loops)
    return false;
  if (ptr1->x_flag_finite_math_only != ptr2->x_flag_finite_math_only)
    return false;
  if (ptr1->x_flag_float_store != ptr2->x_flag_float_store)
    return false;
  if (ptr1->x_flag_fold_simple_inlines != ptr2->x_flag_fold_simple_inlines)
    return false;
  if (ptr1->x_flag_forward_propagate != ptr2->x_flag_forward_propagate)
    return false;
  if (ptr1->x_flag_fp_contract_mode != ptr2->x_flag_fp_contract_mode)
    return false;
  if (ptr1->x_flag_fp_int_builtin_inexact != ptr2->x_flag_fp_int_builtin_inexact)
    return false;
  if (ptr1->x_flag_no_function_cse != ptr2->x_flag_no_function_cse)
    return false;
  if (ptr1->x_flag_gcse != ptr2->x_flag_gcse)
    return false;
  if (ptr1->x_flag_gcse_after_reload != ptr2->x_flag_gcse_after_reload)
    return false;
  if (ptr1->x_flag_gcse_las != ptr2->x_flag_gcse_las)
    return false;
  if (ptr1->x_flag_gcse_lm != ptr2->x_flag_gcse_lm)
    return false;
  if (ptr1->x_flag_gcse_sm != ptr2->x_flag_gcse_sm)
    return false;
  if (ptr1->x_flag_graphite != ptr2->x_flag_graphite)
    return false;
  if (ptr1->x_flag_graphite_identity != ptr2->x_flag_graphite_identity)
    return false;
  if (ptr1->x_flag_guess_branch_prob != ptr2->x_flag_guess_branch_prob)
    return false;
  if (ptr1->x_flag_harden_compares != ptr2->x_flag_harden_compares)
    return false;
  if (ptr1->x_flag_harden_conditional_branches != ptr2->x_flag_harden_conditional_branches)
    return false;
  if (ptr1->x_flag_hoist_adjacent_loads != ptr2->x_flag_hoist_adjacent_loads)
    return false;
  if (ptr1->x_flag_if_conversion != ptr2->x_flag_if_conversion)
    return false;
  if (ptr1->x_flag_if_conversion2 != ptr2->x_flag_if_conversion2)
    return false;
  if (ptr1->x_flag_indirect_inlining != ptr2->x_flag_indirect_inlining)
    return false;
  if (ptr1->x_flag_no_inline != ptr2->x_flag_no_inline)
    return false;
  if (ptr1->x_flag_inline_atomics != ptr2->x_flag_inline_atomics)
    return false;
  if (ptr1->x_flag_inline_functions != ptr2->x_flag_inline_functions)
    return false;
  if (ptr1->x_flag_inline_functions_called_once != ptr2->x_flag_inline_functions_called_once)
    return false;
  if (ptr1->x_flag_inline_small_functions != ptr2->x_flag_inline_small_functions)
    return false;
  if (ptr1->x_flag_ipa_bit_cp != ptr2->x_flag_ipa_bit_cp)
    return false;
  if (ptr1->x_flag_ipa_cp != ptr2->x_flag_ipa_cp)
    return false;
  if (ptr1->x_flag_ipa_cp_clone != ptr2->x_flag_ipa_cp_clone)
    return false;
  if (ptr1->x_flag_ipa_icf != ptr2->x_flag_ipa_icf)
    return false;
  if (ptr1->x_flag_ipa_icf_functions != ptr2->x_flag_ipa_icf_functions)
    return false;
  if (ptr1->x_flag_ipa_icf_variables != ptr2->x_flag_ipa_icf_variables)
    return false;
  if (ptr1->x_flag_ipa_modref != ptr2->x_flag_ipa_modref)
    return false;
  if (ptr1->x_flag_ipa_profile != ptr2->x_flag_ipa_profile)
    return false;
  if (ptr1->x_flag_ipa_pta != ptr2->x_flag_ipa_pta)
    return false;
  if (ptr1->x_flag_ipa_pure_const != ptr2->x_flag_ipa_pure_const)
    return false;
  if (ptr1->x_flag_ipa_ra != ptr2->x_flag_ipa_ra)
    return false;
  if (ptr1->x_flag_ipa_reference != ptr2->x_flag_ipa_reference)
    return false;
  if (ptr1->x_flag_ipa_reference_addressable != ptr2->x_flag_ipa_reference_addressable)
    return false;
  if (ptr1->x_flag_ipa_sra != ptr2->x_flag_ipa_sra)
    return false;
  if (ptr1->x_flag_ipa_stack_alignment != ptr2->x_flag_ipa_stack_alignment)
    return false;
  if (ptr1->x_flag_ipa_strict_aliasing != ptr2->x_flag_ipa_strict_aliasing)
    return false;
  if (ptr1->x_flag_ipa_vrp != ptr2->x_flag_ipa_vrp)
    return false;
  if (ptr1->x_flag_ira_algorithm != ptr2->x_flag_ira_algorithm)
    return false;
  if (ptr1->x_flag_ira_hoist_pressure != ptr2->x_flag_ira_hoist_pressure)
    return false;
  if (ptr1->x_flag_ira_loop_pressure != ptr2->x_flag_ira_loop_pressure)
    return false;
  if (ptr1->x_flag_ira_region != ptr2->x_flag_ira_region)
    return false;
  if (ptr1->x_flag_ira_share_save_slots != ptr2->x_flag_ira_share_save_slots)
    return false;
  if (ptr1->x_flag_ira_share_spill_slots != ptr2->x_flag_ira_share_spill_slots)
    return false;
  if (ptr1->x_flag_isolate_erroneous_paths_attribute != ptr2->x_flag_isolate_erroneous_paths_attribute)
    return false;
  if (ptr1->x_flag_isolate_erroneous_paths_dereference != ptr2->x_flag_isolate_erroneous_paths_dereference)
    return false;
  if (ptr1->x_flag_ivopts != ptr2->x_flag_ivopts)
    return false;
  if (ptr1->x_flag_jump_tables != ptr2->x_flag_jump_tables)
    return false;
  if (ptr1->x_flag_keep_gc_roots_live != ptr2->x_flag_keep_gc_roots_live)
    return false;
  if (ptr1->x_flag_lifetime_dse != ptr2->x_flag_lifetime_dse)
    return false;
  if (ptr1->x_flag_limit_function_alignment != ptr2->x_flag_limit_function_alignment)
    return false;
  if (ptr1->x_flag_live_patching != ptr2->x_flag_live_patching)
    return false;
  if (ptr1->x_flag_live_range_shrinkage != ptr2->x_flag_live_range_shrinkage)
    return false;
  if (ptr1->x_flag_loop_interchange != ptr2->x_flag_loop_interchange)
    return false;
  if (ptr1->x_flag_loop_nest_optimize != ptr2->x_flag_loop_nest_optimize)
    return false;
  if (ptr1->x_flag_loop_parallelize_all != ptr2->x_flag_loop_parallelize_all)
    return false;
  if (ptr1->x_flag_unroll_jam != ptr2->x_flag_unroll_jam)
    return false;
  if (ptr1->x_flag_lra_remat != ptr2->x_flag_lra_remat)
    return false;
  if (ptr1->x_flag_errno_math != ptr2->x_flag_errno_math)
    return false;
  if (ptr1->x_flag_modulo_sched != ptr2->x_flag_modulo_sched)
    return false;
  if (ptr1->x_flag_modulo_sched_allow_regmoves != ptr2->x_flag_modulo_sched_allow_regmoves)
    return false;
  if (ptr1->x_flag_move_loop_invariants != ptr2->x_flag_move_loop_invariants)
    return false;
  if (ptr1->x_flag_move_loop_stores != ptr2->x_flag_move_loop_stores)
    return false;
  if (ptr1->x_flag_non_call_exceptions != ptr2->x_flag_non_call_exceptions)
    return false;
  if (ptr1->x_flag_nothrow_opt != ptr2->x_flag_nothrow_opt)
    return false;
  if (ptr1->x_flag_omit_frame_pointer != ptr2->x_flag_omit_frame_pointer)
    return false;
  if (ptr1->x_flag_opt_info != ptr2->x_flag_opt_info)
    return false;
  if (ptr1->x_flag_optimize_sibling_calls != ptr2->x_flag_optimize_sibling_calls)
    return false;
  if (ptr1->x_flag_optimize_strlen != ptr2->x_flag_optimize_strlen)
    return false;
  if (ptr1->x_flag_pack_struct != ptr2->x_flag_pack_struct)
    return false;
  if (ptr1->x_flag_partial_inlining != ptr2->x_flag_partial_inlining)
    return false;
  if (ptr1->x_flag_patchable_function_entry != ptr2->x_flag_patchable_function_entry
      && (!ptr1->x_flag_patchable_function_entry || !ptr2->x_flag_patchable_function_entry
          || strcmp (ptr1->x_flag_patchable_function_entry, ptr2->x_flag_patchable_function_entry)))
    return false;
  if (ptr1->x_flag_peel_loops != ptr2->x_flag_peel_loops)
    return false;
  if (ptr1->x_flag_no_peephole != ptr2->x_flag_no_peephole)
    return false;
  if (ptr1->x_flag_peephole2 != ptr2->x_flag_peephole2)
    return false;
  if (ptr1->x_flag_plt != ptr2->x_flag_plt)
    return false;
  if (ptr1->x_flag_predictive_commoning != ptr2->x_flag_predictive_commoning)
    return false;
  if (ptr1->x_flag_prefetch_loop_arrays != ptr2->x_flag_prefetch_loop_arrays)
    return false;
  if (ptr1->x_flag_printf_return_value != ptr2->x_flag_printf_return_value)
    return false;
  if (ptr1->x_flag_profile_partial_training != ptr2->x_flag_profile_partial_training)
    return false;
  if (ptr1->x_flag_profile_reorder_functions != ptr2->x_flag_profile_reorder_functions)
    return false;
  if (ptr1->x_flag_reciprocal_math != ptr2->x_flag_reciprocal_math)
    return false;
  if (ptr1->x_flag_ree != ptr2->x_flag_ree)
    return false;
  if (ptr1->x_flag_pcc_struct_return != ptr2->x_flag_pcc_struct_return)
    return false;
  if (ptr1->x_flag_rename_registers != ptr2->x_flag_rename_registers)
    return false;
  if (ptr1->x_flag_reorder_blocks != ptr2->x_flag_reorder_blocks)
    return false;
  if (ptr1->x_flag_reorder_blocks_algorithm != ptr2->x_flag_reorder_blocks_algorithm)
    return false;
  if (ptr1->x_flag_reorder_blocks_and_partition != ptr2->x_flag_reorder_blocks_and_partition)
    return false;
  if (ptr1->x_flag_reorder_functions != ptr2->x_flag_reorder_functions)
    return false;
  if (ptr1->x_flag_rerun_cse_after_loop != ptr2->x_flag_rerun_cse_after_loop)
    return false;
  if (ptr1->x_flag_resched_modulo_sched != ptr2->x_flag_resched_modulo_sched)
    return false;
  if (ptr1->x_flag_rounding_math != ptr2->x_flag_rounding_math)
    return false;
  if (ptr1->x_flag_rtti != ptr2->x_flag_rtti)
    return false;
  if (ptr1->x_flag_save_optimization_record != ptr2->x_flag_save_optimization_record)
    return false;
  if (ptr1->x_flag_sched_critical_path_heuristic != ptr2->x_flag_sched_critical_path_heuristic)
    return false;
  if (ptr1->x_flag_sched_dep_count_heuristic != ptr2->x_flag_sched_dep_count_heuristic)
    return false;
  if (ptr1->x_flag_sched_group_heuristic != ptr2->x_flag_sched_group_heuristic)
    return false;
  if (ptr1->x_flag_schedule_interblock != ptr2->x_flag_schedule_interblock)
    return false;
  if (ptr1->x_flag_sched_last_insn_heuristic != ptr2->x_flag_sched_last_insn_heuristic)
    return false;
  if (ptr1->x_flag_sched_pressure != ptr2->x_flag_sched_pressure)
    return false;
  if (ptr1->x_flag_sched_rank_heuristic != ptr2->x_flag_sched_rank_heuristic)
    return false;
  if (ptr1->x_flag_schedule_speculative != ptr2->x_flag_schedule_speculative)
    return false;
  if (ptr1->x_flag_sched_spec_insn_heuristic != ptr2->x_flag_sched_spec_insn_heuristic)
    return false;
  if (ptr1->x_flag_schedule_speculative_load != ptr2->x_flag_schedule_speculative_load)
    return false;
  if (ptr1->x_flag_schedule_speculative_load_dangerous != ptr2->x_flag_schedule_speculative_load_dangerous)
    return false;
  if (ptr1->x_flag_sched_stalled_insns != ptr2->x_flag_sched_stalled_insns)
    return false;
  if (ptr1->x_flag_sched_stalled_insns_dep != ptr2->x_flag_sched_stalled_insns_dep)
    return false;
  if (ptr1->x_flag_sched2_use_superblocks != ptr2->x_flag_sched2_use_superblocks)
    return false;
  if (ptr1->x_flag_schedule_fusion != ptr2->x_flag_schedule_fusion)
    return false;
  if (ptr1->x_flag_schedule_insns != ptr2->x_flag_schedule_insns)
    return false;
  if (ptr1->x_flag_schedule_insns_after_reload != ptr2->x_flag_schedule_insns_after_reload)
    return false;
  if (ptr1->x_flag_section_anchors != ptr2->x_flag_section_anchors)
    return false;
  if (ptr1->x_flag_sel_sched_pipelining != ptr2->x_flag_sel_sched_pipelining)
    return false;
  if (ptr1->x_flag_sel_sched_pipelining_outer_loops != ptr2->x_flag_sel_sched_pipelining_outer_loops)
    return false;
  if (ptr1->x_flag_sel_sched_reschedule_pipelined != ptr2->x_flag_sel_sched_reschedule_pipelined)
    return false;
  if (ptr1->x_flag_selective_scheduling != ptr2->x_flag_selective_scheduling)
    return false;
  if (ptr1->x_flag_selective_scheduling2 != ptr2->x_flag_selective_scheduling2)
    return false;
  if (ptr1->x_flag_semantic_interposition != ptr2->x_flag_semantic_interposition)
    return false;
  if (ptr1->x_flag_short_enums != ptr2->x_flag_short_enums)
    return false;
  if (ptr1->x_flag_short_wchar != ptr2->x_flag_short_wchar)
    return false;
  if (ptr1->x_flag_shrink_wrap != ptr2->x_flag_shrink_wrap)
    return false;
  if (ptr1->x_flag_shrink_wrap_separate != ptr2->x_flag_shrink_wrap_separate)
    return false;
  if (ptr1->x_flag_signaling_nans != ptr2->x_flag_signaling_nans)
    return false;
  if (ptr1->x_flag_signed_zeros != ptr2->x_flag_signed_zeros)
    return false;
  if (ptr1->x_flag_simd_cost_model != ptr2->x_flag_simd_cost_model)
    return false;
  if (ptr1->x_flag_single_precision_constant != ptr2->x_flag_single_precision_constant)
    return false;
  if (ptr1->x_flag_split_ivs_in_unroller != ptr2->x_flag_split_ivs_in_unroller)
    return false;
  if (ptr1->x_flag_split_loops != ptr2->x_flag_split_loops)
    return false;
  if (ptr1->x_flag_split_paths != ptr2->x_flag_split_paths)
    return false;
  if (ptr1->x_flag_split_wide_types != ptr2->x_flag_split_wide_types)
    return false;
  if (ptr1->x_flag_split_wide_types_early != ptr2->x_flag_split_wide_types_early)
    return false;
  if (ptr1->x_flag_ssa_backprop != ptr2->x_flag_ssa_backprop)
    return false;
  if (ptr1->x_flag_ssa_phiopt != ptr2->x_flag_ssa_phiopt)
    return false;
  if (ptr1->x_flag_stack_clash_protection != ptr2->x_flag_stack_clash_protection)
    return false;
  if (ptr1->x_flag_stack_protect != ptr2->x_flag_stack_protect)
    return false;
  if (ptr1->x_flag_stack_reuse != ptr2->x_flag_stack_reuse)
    return false;
  if (ptr1->x_flag_stdarg_opt != ptr2->x_flag_stdarg_opt)
    return false;
  if (ptr1->x_flag_store_merging != ptr2->x_flag_store_merging)
    return false;
  if (ptr1->x_flag_strict_aliasing != ptr2->x_flag_strict_aliasing)
    return false;
  if (ptr1->x_flag_strict_enums != ptr2->x_flag_strict_enums)
    return false;
  if (ptr1->x_flag_strict_volatile_bitfields != ptr2->x_flag_strict_volatile_bitfields)
    return false;
  if (ptr1->x_flag_thread_jumps != ptr2->x_flag_thread_jumps)
    return false;
  if (ptr1->x_flag_threadsafe_statics != ptr2->x_flag_threadsafe_statics)
    return false;
  if (ptr1->x_flag_toplevel_reorder != ptr2->x_flag_toplevel_reorder)
    return false;
  if (ptr1->x_flag_tracer != ptr2->x_flag_tracer)
    return false;
  if (ptr1->x_flag_trapping_math != ptr2->x_flag_trapping_math)
    return false;
  if (ptr1->x_flag_trapv != ptr2->x_flag_trapv)
    return false;
  if (ptr1->x_flag_tree_bit_ccp != ptr2->x_flag_tree_bit_ccp)
    return false;
  if (ptr1->x_flag_tree_builtin_call_dce != ptr2->x_flag_tree_builtin_call_dce)
    return false;
  if (ptr1->x_flag_tree_ccp != ptr2->x_flag_tree_ccp)
    return false;
  if (ptr1->x_flag_tree_ch != ptr2->x_flag_tree_ch)
    return false;
  if (ptr1->x_flag_tree_coalesce_vars != ptr2->x_flag_tree_coalesce_vars)
    return false;
  if (ptr1->x_flag_tree_copy_prop != ptr2->x_flag_tree_copy_prop)
    return false;
  if (ptr1->x_flag_tree_cselim != ptr2->x_flag_tree_cselim)
    return false;
  if (ptr1->x_flag_tree_dce != ptr2->x_flag_tree_dce)
    return false;
  if (ptr1->x_flag_tree_dom != ptr2->x_flag_tree_dom)
    return false;
  if (ptr1->x_flag_tree_dse != ptr2->x_flag_tree_dse)
    return false;
  if (ptr1->x_flag_tree_forwprop != ptr2->x_flag_tree_forwprop)
    return false;
  if (ptr1->x_flag_tree_fre != ptr2->x_flag_tree_fre)
    return false;
  if (ptr1->x_flag_tree_loop_distribute_patterns != ptr2->x_flag_tree_loop_distribute_patterns)
    return false;
  if (ptr1->x_flag_tree_loop_distribution != ptr2->x_flag_tree_loop_distribution)
    return false;
  if (ptr1->x_flag_tree_loop_if_convert != ptr2->x_flag_tree_loop_if_convert)
    return false;
  if (ptr1->x_flag_tree_loop_im != ptr2->x_flag_tree_loop_im)
    return false;
  if (ptr1->x_flag_tree_loop_ivcanon != ptr2->x_flag_tree_loop_ivcanon)
    return false;
  if (ptr1->x_flag_tree_loop_optimize != ptr2->x_flag_tree_loop_optimize)
    return false;
  if (ptr1->x_flag_tree_loop_vectorize != ptr2->x_flag_tree_loop_vectorize)
    return false;
  if (ptr1->x_flag_tree_live_range_split != ptr2->x_flag_tree_live_range_split)
    return false;
  if (ptr1->x_flag_tree_parallelize_loops != ptr2->x_flag_tree_parallelize_loops)
    return false;
  if (ptr1->x_flag_tree_partial_pre != ptr2->x_flag_tree_partial_pre)
    return false;
  if (ptr1->x_flag_tree_phiprop != ptr2->x_flag_tree_phiprop)
    return false;
  if (ptr1->x_flag_tree_pre != ptr2->x_flag_tree_pre)
    return false;
  if (ptr1->x_flag_tree_pta != ptr2->x_flag_tree_pta)
    return false;
  if (ptr1->x_flag_tree_reassoc != ptr2->x_flag_tree_reassoc)
    return false;
  if (ptr1->x_flag_tree_scev_cprop != ptr2->x_flag_tree_scev_cprop)
    return false;
  if (ptr1->x_flag_tree_sink != ptr2->x_flag_tree_sink)
    return false;
  if (ptr1->x_flag_tree_slp_vectorize != ptr2->x_flag_tree_slp_vectorize)
    return false;
  if (ptr1->x_flag_tree_slsr != ptr2->x_flag_tree_slsr)
    return false;
  if (ptr1->x_flag_tree_sra != ptr2->x_flag_tree_sra)
    return false;
  if (ptr1->x_flag_tree_switch_conversion != ptr2->x_flag_tree_switch_conversion)
    return false;
  if (ptr1->x_flag_tree_tail_merge != ptr2->x_flag_tree_tail_merge)
    return false;
  if (ptr1->x_flag_tree_ter != ptr2->x_flag_tree_ter)
    return false;
  if (ptr1->x_flag_tree_vectorize != ptr2->x_flag_tree_vectorize)
    return false;
  if (ptr1->x_flag_tree_vrp != ptr2->x_flag_tree_vrp)
    return false;
  if (ptr1->x_flag_auto_var_init != ptr2->x_flag_auto_var_init)
    return false;
  if (ptr1->x_flag_unconstrained_commons != ptr2->x_flag_unconstrained_commons)
    return false;
  if (ptr1->x_flag_unroll_all_loops != ptr2->x_flag_unroll_all_loops)
    return false;
  if (ptr1->x_flag_cunroll_grow_size != ptr2->x_flag_cunroll_grow_size)
    return false;
  if (ptr1->x_flag_unroll_loops != ptr2->x_flag_unroll_loops)
    return false;
  if (ptr1->x_flag_unsafe_math_optimizations != ptr2->x_flag_unsafe_math_optimizations)
    return false;
  if (ptr1->x_flag_unswitch_loops != ptr2->x_flag_unswitch_loops)
    return false;
  if (ptr1->x_flag_unwind_tables != ptr2->x_flag_unwind_tables)
    return false;
  if (ptr1->x_flag_variable_expansion_in_unroller != ptr2->x_flag_variable_expansion_in_unroller)
    return false;
  if (ptr1->x_flag_vect_cost_model != ptr2->x_flag_vect_cost_model)
    return false;
  if (ptr1->x_flag_version_loops_for_strides != ptr2->x_flag_version_loops_for_strides)
    return false;
  if (ptr1->x_flag_value_profile_transformations != ptr2->x_flag_value_profile_transformations)
    return false;
  if (ptr1->x_flag_web != ptr2->x_flag_web)
    return false;
  if (ptr1->x_flag_wrapv != ptr2->x_flag_wrapv)
    return false;
  if (ptr1->x_flag_wrapv_pointer != ptr2->x_flag_wrapv_pointer)
    return false;
  for (size_t i = 0; i < ARRAY_SIZE (ptr1->explicit_mask); i++)
    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])
      return false;
  return true;
}

/* Stream out optimization options  */
void
cl_optimization_stream_out (struct output_block *ob,
                            struct bitpack_d *bp,
                            struct cl_optimization *ptr)
{
  bp_pack_var_len_int (bp, ptr->x_optimize);
  bp_pack_var_len_int (bp, ptr->x_optimize_size);
  bp_pack_var_len_int (bp, ptr->x_optimize_debug);
  bp_pack_var_len_int (bp, ptr->x_optimize_fast);
  if (4 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_align_loop_iterations ^ 4);
  else
    bp_pack_var_len_int (bp, ptr->x_param_align_loop_iterations);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_align_threshold ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_align_threshold);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_protect_allocas ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_protect_allocas);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrument_reads ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrument_reads);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrument_writes ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrument_writes);
  if (7000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrumentation_with_call_threshold ^ 7000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_instrumentation_with_call_threshold);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_memintrin ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_memintrin);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_stack ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_stack);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_asan_use_after_return ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_asan_use_after_return);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_avg_loop_niter ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_avg_loop_niter);
  bp_pack_var_len_int (bp, ptr->x_param_avoid_fma_max_bits);
  if (90 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_builtin_expect_probability ^ 90);
  else
    bp_pack_var_len_int (bp, ptr->x_param_builtin_expect_probability);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_builtin_string_cmp_inline_length ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_builtin_string_cmp_inline_length);
  bp_pack_var_len_int (bp, ptr->x_param_case_values_threshold);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_comdat_sharing_probability ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_comdat_sharing_probability);
  if (0 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_construct_interfere_size ^ 0);
  else
    bp_pack_var_len_int (bp, ptr->x_param_construct_interfere_size);
  if (0 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_destruct_interfere_size ^ 0);
  else
    bp_pack_var_len_int (bp, ptr->x_param_destruct_interfere_size);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_dse_max_alias_queries_per_store ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_dse_max_alias_queries_per_store);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_dse_max_object_size ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_dse_max_object_size);
  if (6 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_early_inlining_insns ^ 6);
  else
    bp_pack_var_len_int (bp, ptr->x_param_early_inlining_insns);
  bp_pack_var_len_int (bp, ptr->x_param_evrp_mode);
  if (800 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_evrp_sparse_threshold ^ 800);
  else
    bp_pack_var_len_int (bp, ptr->x_param_evrp_sparse_threshold);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_evrp_switch_limit ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_evrp_switch_limit);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_fsm_scale_path_blocks ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_fsm_scale_path_blocks);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_fsm_scale_path_stmts ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_fsm_scale_path_stmts);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_gcse_after_reload_critical_fraction ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_gcse_after_reload_critical_fraction);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_gcse_after_reload_partial_fraction ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_gcse_after_reload_partial_fraction);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_gcse_cost_distance_ratio ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_gcse_cost_distance_ratio);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_gcse_unrestricted_cost ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_gcse_unrestricted_cost);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_graphite_max_arrays_per_scop ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_graphite_max_arrays_per_scop);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_graphite_max_nb_scop_params ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_graphite_max_nb_scop_params);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_allocas ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_allocas);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_mem_intrinsics ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_mem_intrinsics);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_reads ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_reads);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_stack ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_stack);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_writes ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_instrument_writes);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_random_frame_tag ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_hwasan_random_frame_tag);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_inline_heuristics_hint_percent ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_inline_heuristics_hint_percent);
  if (30 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_inline_min_speedup ^ 30);
  else
    bp_pack_var_len_int (bp, ptr->x_param_inline_min_speedup);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_inline_unit_growth ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_inline_unit_growth);
  if (500 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_eval_threshold ^ 500);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_eval_threshold);
  if (16000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_large_unit_insns ^ 16000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_large_unit_insns);
  if (64 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_loop_hint_bonus ^ 64);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_loop_hint_bonus);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_max_recursive_depth ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_max_recursive_depth);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_min_recursive_probability ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_min_recursive_probability);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_profile_count_base ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_profile_count_base);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_recursion_penalty ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_recursion_penalty);
  if (6 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_recursive_freq_factor ^ 6);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_recursive_freq_factor);
  if (15 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_single_call_penalty ^ 15);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_single_call_penalty);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_unit_growth ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_unit_growth);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_value_list_size ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_cp_value_list_size);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_jump_function_lookups ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_jump_function_lookups);
  if (25000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_aa_steps ^ 25000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_aa_steps);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_agg_items ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_agg_items);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_loop_predicates ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_loop_predicates);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_param_expr_ops ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_param_expr_ops);
  if (5 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_switch_predicate_bounds ^ 5);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_max_switch_predicate_bounds);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_sra_max_replacements ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_sra_max_replacements);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ipa_sra_ptr_growth_factor ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ipa_sra_ptr_growth_factor);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ira_consider_dup_in_all_alts ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ira_consider_dup_in_all_alts);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ira_loop_reserved_regs ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ira_loop_reserved_regs);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ira_max_conflict_table_size ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ira_max_conflict_table_size);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ira_max_loops_num ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ira_max_loops_num);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_iv_always_prune_cand_set_bound ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_iv_always_prune_cand_set_bound);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_iv_consider_all_candidates_bound ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_iv_consider_all_candidates_bound);
  if (250 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_iv_max_considered_uses ^ 250);
  else
    bp_pack_var_len_int (bp, ptr->x_param_iv_max_considered_uses);
  if (300 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_jump_table_max_growth_ratio_for_size ^ 300);
  else
    bp_pack_var_len_int (bp, ptr->x_param_jump_table_max_growth_ratio_for_size);
  if (800 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_jump_table_max_growth_ratio_for_speed ^ 800);
  else
    bp_pack_var_len_int (bp, ptr->x_param_jump_table_max_growth_ratio_for_speed);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_l1_cache_line_size ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_l1_cache_line_size);
  if (64 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_l1_cache_size ^ 64);
  else
    bp_pack_var_len_int (bp, ptr->x_param_l1_cache_size);
  if (512 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_l2_cache_size ^ 512);
  else
    bp_pack_var_len_int (bp, ptr->x_param_l2_cache_size);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_large_function_growth ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_large_function_growth);
  if (2700 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_large_function_insns ^ 2700);
  else
    bp_pack_var_len_int (bp, ptr->x_param_large_function_insns);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_stack_frame_growth ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_stack_frame_growth);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_large_stack_frame ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_large_stack_frame);
  if (10000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_large_unit_insns ^ 10000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_large_unit_insns);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_lim_expensive ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_lim_expensive);
  if (51 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_block_tile_size ^ 51);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_block_tile_size);
  if (64 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_interchange_max_num_stmts ^ 64);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_interchange_max_num_stmts);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_interchange_stride_ratio ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_interchange_stride_ratio);
  if (10000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_invariant_max_bbs_in_loop ^ 10000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_invariant_max_bbs_in_loop);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_max_datarefs_for_datadeps ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_max_datarefs_for_datadeps);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_versioning_max_inner_insns ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_versioning_max_inner_insns);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_loop_versioning_max_outer_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_loop_versioning_max_outer_insns);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_lra_inheritance_ebb_probability_cutoff ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_lra_inheritance_ebb_probability_cutoff);
  if (500 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_lra_max_considered_reload_pseudos ^ 500);
  else
    bp_pack_var_len_int (bp, ptr->x_param_lra_max_considered_reload_pseudos);
  if (80 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_average_unrolled_insns ^ 80);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_average_unrolled_insns);
  if (4 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_combine_insns ^ 4);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_combine_insns);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_unroll_iterations ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_unroll_iterations);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_completely_peel_times ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_completely_peel_times);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_completely_peeled_insns ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_completely_peeled_insns);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_crossjump_edges ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_crossjump_edges);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_cse_insns ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_cse_insns);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_cse_path_length ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_cse_path_length);
  if (500 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_cselib_memory_locations ^ 500);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_cselib_memory_locations);
  if (100000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_debug_marker_count ^ 100000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_debug_marker_count);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_delay_slot_insn_search ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_delay_slot_insn_search);
  if (333 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_delay_slot_live_search ^ 333);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_delay_slot_live_search);
  if (5000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_dse_active_local_stores ^ 5000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_dse_active_local_stores);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_early_inliner_max_iterations ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_early_inliner_max_iterations);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_find_base_term_values ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_find_base_term_values);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_fsm_thread_length ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_fsm_thread_length);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_fsm_thread_path_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_fsm_thread_path_insns);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_gcse_insertion_ratio ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_gcse_insertion_ratio);
  if (131072 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_gcse_memory ^ 131072);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_gcse_memory);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_goto_duplication_insns ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_goto_duplication_insns);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_grow_copy_bb_insns ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_grow_copy_bb_insns);
  if (30 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_hoist_depth ^ 30);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_hoist_depth);
  if (4000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_inline_functions_called_once_insns ^ 4000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_inline_functions_called_once_insns);
  if (6 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_inline_functions_called_once_loop_depth ^ 6);
  else
    bp_pack_var_len_int (bp, ptr->x_param_inline_functions_called_once_loop_depth);
  if (15 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_auto ^ 15);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_auto);
  if (450 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_recursive_auto ^ 450);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_recursive_auto);
  if (450 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_recursive ^ 450);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_recursive);
  if (70 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_single ^ 70);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_single);
  bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_size);
  bp_pack_var_len_int (bp, ptr->x_param_max_inline_insns_small);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_recursive_depth_auto ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_recursive_depth_auto);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_recursive_depth ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_inline_recursive_depth);
  if (350000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_isl_operations ^ 350000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_isl_operations);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_iterations_computation_cost ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_iterations_computation_cost);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_iterations_to_track ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_iterations_to_track);
  if (15 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_jump_thread_duplication_stmts ^ 15);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_jump_thread_duplication_stmts);
  if (10000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_last_value_rtl ^ 10000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_last_value_rtl);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_loop_header_insns ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_loop_header_insns);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_modulo_backtrack_attempts ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_modulo_backtrack_attempts);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_partial_antic_length ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_partial_antic_length);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_peel_branches ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_peel_branches);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_peel_times ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_peel_times);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_peeled_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_peeled_insns);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_pending_list_length ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_pending_list_length);
  if (15 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_pipeline_region_blocks ^ 15);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_pipeline_region_blocks);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_pipeline_region_insns ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_pipeline_region_insns);
  if (5 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_pow_sqrt_depth ^ 5);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_pow_sqrt_depth);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_predicted_iterations ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_predicted_iterations);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_reload_search_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_reload_search_insns);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_insns ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_insns);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_predictable_cost ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_predictable_cost);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_unpredictable_cost ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_rtl_if_conversion_unpredictable_cost);
  bp_pack_var_len_int (bp, ptr->x_param_max_sched_extend_regions_iters);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_insn_conflict_delay ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_insn_conflict_delay);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_ready_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_ready_insns);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_region_blocks ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_region_blocks);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_region_insns ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_sched_region_insns);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_slsr_candidate_scan ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_slsr_candidate_scan);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_speculative_devirt_maydefs ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_speculative_devirt_maydefs);
  if (64 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_stores_to_merge ^ 64);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_stores_to_merge);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_stores_to_sink ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_stores_to_sink);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_tail_merge_comparisons ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_tail_merge_comparisons);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_tail_merge_iterations ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_tail_merge_iterations);
  if (10000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_tracked_strlens ^ 10000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_tracked_strlens);
  if (4 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_tree_if_conversion_phi_args ^ 4);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_tree_if_conversion_phi_args);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_unroll_times ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_unroll_times);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_unrolled_insns ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_unrolled_insns);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_unswitch_insns ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_unswitch_insns);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_variable_expansions ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_variable_expansions);
  if (12 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_expr_depth ^ 12);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_expr_depth);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_reverse_op_size ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_reverse_op_size);
  if (50000000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_size ^ 50000000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_vartrack_size);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_max_vrp_switch_assertions ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_max_vrp_switch_assertions);
  if (5 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_crossjump_insns ^ 5);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_crossjump_insns);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_inline_recursive_probability ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_inline_recursive_probability);
  if (9 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_insn_to_prefetch_ratio ^ 9);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_insn_to_prefetch_ratio);
  if (30 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_loop_cond_split_prob ^ 30);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_loop_cond_split_prob);
  if (4096 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_pagesize ^ 4096);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_pagesize);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_size_for_stack_sharing ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_size_for_stack_sharing);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_min_spec_prob ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_min_spec_prob);
  bp_pack_var_len_int (bp, ptr->x_param_min_vect_loop_bound);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_accesses ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_accesses);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_adjustments ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_adjustments);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_bases ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_bases);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_depth ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_depth);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_escape_points ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_escape_points);
  if (16 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_refs ^ 16);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_refs);
  if (64 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_tests ^ 64);
  else
    bp_pack_var_len_int (bp, ptr->x_param_modref_max_tests);
  bp_pack_var_len_int (bp, ptr->x_param_parloops_chunk_size);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_parloops_min_per_thread ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_parloops_min_per_thread);
  bp_pack_var_len_int (bp, ptr->x_param_parloops_schedule);
  if (70 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_partial_inlining_entry_probability ^ 70);
  else
    bp_pack_var_len_int (bp, ptr->x_param_partial_inlining_entry_probability);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_predictable_branch_outcome ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_predictable_branch_outcome);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_dynamic_strides ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_dynamic_strides);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_latency ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_latency);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_min_insn_to_mem_ratio ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_min_insn_to_mem_ratio);
  if (-1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_minimum_stride ^ -1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_prefetch_minimum_stride);
  bp_pack_var_len_int (bp, ptr->x_param_ranger_debug);
  if (6 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ranger_logical_depth ^ 6);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ranger_logical_depth);
  if (200 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_relation_block_limit ^ 200);
  else
    bp_pack_var_len_int (bp, ptr->x_param_relation_block_limit);
  if (7 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_rpo_vn_max_loop_depth ^ 7);
  else
    bp_pack_var_len_int (bp, ptr->x_param_rpo_vn_max_loop_depth);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sccvn_max_alias_queries_per_access ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sccvn_max_alias_queries_per_access);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_scev_max_expr_complexity ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_scev_max_expr_complexity);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_scev_max_expr_size ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_scev_max_expr_size);
  if (-1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sched_autopref_queue_depth ^ -1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sched_autopref_queue_depth);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sched_mem_true_dep_cost ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sched_mem_true_dep_cost);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sched_pressure_algorithm ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sched_pressure_algorithm);
  if (40 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sched_spec_prob_cutoff ^ 40);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sched_spec_prob_cutoff);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sched_state_edge_prob_cutoff ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sched_state_edge_prob_cutoff);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_selsched_insns_to_rename ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_selsched_insns_to_rename);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_selsched_max_lookahead ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_selsched_max_lookahead);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_selsched_max_sched_times ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_selsched_max_sched_times);
  if (3 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_simultaneous_prefetches ^ 3);
  else
    bp_pack_var_len_int (bp, ptr->x_param_simultaneous_prefetches);
  if (75 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sink_frequency_threshold ^ 75);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sink_frequency_threshold);
  bp_pack_var_len_int (bp, ptr->x_param_sms_dfa_history);
  bp_pack_var_len_int (bp, ptr->x_param_sms_loop_average_count_threshold);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sms_max_ii_factor ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sms_max_ii_factor);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sms_min_sc ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sms_min_sc);
  if (32 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_sra_max_propagations ^ 32);
  else
    bp_pack_var_len_int (bp, ptr->x_param_sra_max_propagations);
  bp_pack_var_len_int (bp, ptr->x_param_sra_max_scalarization_size_size);
  bp_pack_var_len_int (bp, ptr->x_param_sra_max_scalarization_size_speed);
  if (512 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ssa_name_def_chain_limit ^ 512);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ssa_name_def_chain_limit);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_ssp_buffer_size ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_ssp_buffer_size);
  if (12 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_stack_clash_protection_guard_size ^ 12);
  else
    bp_pack_var_len_int (bp, ptr->x_param_stack_clash_protection_guard_size);
  if (12 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_stack_clash_protection_probe_interval ^ 12);
  else
    bp_pack_var_len_int (bp, ptr->x_param_stack_clash_protection_probe_interval);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_store_merging_allow_unaligned ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_store_merging_allow_unaligned);
  if (65536 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_store_merging_max_size ^ 65536);
  else
    bp_pack_var_len_int (bp, ptr->x_param_store_merging_max_size);
  if (8 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_switch_conversion_branch_ratio ^ 8);
  else
    bp_pack_var_len_int (bp, ptr->x_param_switch_conversion_branch_ratio);
  bp_pack_var_len_int (bp, ptr->x_param_threader_debug);
  if (9 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tm_max_aggregate_size ^ 9);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tm_max_aggregate_size);
  if (95 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_dynamic_coverage_feedback ^ 95);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_dynamic_coverage_feedback);
  if (75 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_dynamic_coverage ^ 75);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_dynamic_coverage);
  if (100 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_max_code_growth ^ 100);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_max_code_growth);
  if (80 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_probability_feedback ^ 80);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_probability_feedback);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_probability ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_probability);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_ratio ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_tracer_min_branch_ratio);
  bp_pack_var_len_int (bp, ptr->x_param_tree_reassoc_width);
  if (1000 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_uninit_control_dep_attempts ^ 1000);
  else
    bp_pack_var_len_int (bp, ptr->x_param_uninit_control_dep_attempts);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_insns ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_insns);
  bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_time);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_thunk_insns ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_thunk_insns);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_thunk_time ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_uninlined_function_thunk_time);
  if (20 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_unlikely_bb_count_fraction ^ 20);
  else
    bp_pack_var_len_int (bp, ptr->x_param_unlikely_bb_count_fraction);
  if (4 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_unroll_jam_max_unroll ^ 4);
  else
    bp_pack_var_len_int (bp, ptr->x_param_unroll_jam_max_unroll);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_unroll_jam_min_percent ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_unroll_jam_min_percent);
  if (256 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_use_after_scope_direct_emission_threshold ^ 256);
  else
    bp_pack_var_len_int (bp, ptr->x_param_use_after_scope_direct_emission_threshold);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_epilogues_nomask ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_epilogues_nomask);
  if (1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_induction_float ^ 1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_induction_float);
  if (50 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_inner_loop_cost_factor ^ 50);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_inner_loop_cost_factor);
  if (-1 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_peeling_for_alignment ^ -1);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_peeling_for_alignment);
  if (10 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_version_for_alias_checks ^ 10);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_version_for_alias_checks);
  if (6 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_version_for_alignment_checks ^ 6);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_max_version_for_alignment_checks);
  if (2 > (int ) 10)
    bp_pack_var_len_int (bp, ptr->x_param_vect_partial_vector_usage ^ 2);
  else
    bp_pack_var_len_int (bp, ptr->x_param_vect_partial_vector_usage);
  bp_pack_var_len_int (bp, ptr->x_param_vrp1_mode);
  bp_pack_var_len_int (bp, ptr->x_param_vrp2_mode);
  bp_pack_var_len_int (bp, ptr->x_warn_inline);
  bp_pack_var_len_int (bp, ptr->x_flag_aggressive_loop_optimizations);
  bp_pack_var_len_int (bp, ptr->x_flag_align_functions);
  bp_pack_string (ob, bp, ptr->x_str_align_functions, true);
  bp_pack_var_len_int (bp, ptr->x_flag_align_jumps);
  bp_pack_string (ob, bp, ptr->x_str_align_jumps, true);
  bp_pack_var_len_int (bp, ptr->x_flag_align_labels);
  bp_pack_string (ob, bp, ptr->x_str_align_labels, true);
  bp_pack_var_len_int (bp, ptr->x_flag_align_loops);
  bp_pack_string (ob, bp, ptr->x_str_align_loops, true);
  bp_pack_var_len_int (bp, ptr->x_flag_allocation_dce);
  bp_pack_var_len_int (bp, ptr->x_flag_store_data_races);
  bp_pack_var_len_int (bp, ptr->x_flag_associative_math);
  bp_pack_var_len_int (bp, ptr->x_flag_asynchronous_unwind_tables);
  bp_pack_var_len_int (bp, ptr->x_flag_auto_inc_dec);
  bp_pack_var_len_int (bp, ptr->x_flag_bit_tests);
  bp_pack_var_len_int (bp, ptr->x_flag_branch_on_count_reg);
  bp_pack_var_len_int (bp, ptr->x_flag_branch_probabilities);
  bp_pack_var_len_int (bp, ptr->x_flag_caller_saves);
  bp_pack_var_len_int (bp, ptr->x_flag_code_hoisting);
  bp_pack_var_len_int (bp, ptr->x_flag_combine_stack_adjustments);
  bp_pack_var_len_int (bp, ptr->x_flag_compare_elim_after_reload);
  bp_pack_var_len_int (bp, ptr->x_flag_conserve_stack);
  bp_pack_var_len_int (bp, ptr->x_flag_cprop_registers);
  bp_pack_var_len_int (bp, ptr->x_flag_crossjumping);
  bp_pack_var_len_int (bp, ptr->x_flag_cse_follow_jumps);
  bp_pack_var_len_int (bp, ptr->x_flag_cx_fortran_rules);
  bp_pack_var_len_int (bp, ptr->x_flag_cx_limited_range);
  bp_pack_var_len_int (bp, ptr->x_flag_dce);
  bp_pack_var_len_int (bp, ptr->x_flag_defer_pop);
  bp_pack_var_len_int (bp, ptr->x_flag_delayed_branch);
  bp_pack_var_len_int (bp, ptr->x_flag_delete_dead_exceptions);
  bp_pack_var_len_int (bp, ptr->x_flag_delete_null_pointer_checks);
  bp_pack_var_len_int (bp, ptr->x_flag_devirtualize);
  bp_pack_var_len_int (bp, ptr->x_flag_devirtualize_speculatively);
  bp_pack_var_len_int (bp, ptr->x_flag_dse);
  bp_pack_var_len_int (bp, ptr->x_flag_early_inlining);
  bp_pack_var_len_int (bp, ptr->x_flag_exceptions);
  bp_pack_var_len_int (bp, ptr->x_flag_excess_precision);
  bp_pack_var_len_int (bp, ptr->x_flag_expensive_optimizations);
  bp_pack_var_len_int (bp, ptr->x_flag_finite_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_finite_math_only);
  bp_pack_var_len_int (bp, ptr->x_flag_float_store);
  bp_pack_var_len_int (bp, ptr->x_flag_fold_simple_inlines);
  bp_pack_var_len_int (bp, ptr->x_flag_forward_propagate);
  bp_pack_var_len_int (bp, ptr->x_flag_fp_contract_mode);
  bp_pack_var_len_int (bp, ptr->x_flag_fp_int_builtin_inexact);
  bp_pack_var_len_int (bp, ptr->x_flag_no_function_cse);
  bp_pack_var_len_int (bp, ptr->x_flag_gcse);
  bp_pack_var_len_int (bp, ptr->x_flag_gcse_after_reload);
  bp_pack_var_len_int (bp, ptr->x_flag_gcse_las);
  bp_pack_var_len_int (bp, ptr->x_flag_gcse_lm);
  bp_pack_var_len_int (bp, ptr->x_flag_gcse_sm);
  bp_pack_var_len_int (bp, ptr->x_flag_graphite);
  bp_pack_var_len_int (bp, ptr->x_flag_graphite_identity);
  bp_pack_var_len_int (bp, ptr->x_flag_guess_branch_prob);
  bp_pack_var_len_int (bp, ptr->x_flag_harden_compares);
  bp_pack_var_len_int (bp, ptr->x_flag_harden_conditional_branches);
  bp_pack_var_len_int (bp, ptr->x_flag_hoist_adjacent_loads);
  bp_pack_var_len_int (bp, ptr->x_flag_if_conversion);
  bp_pack_var_len_int (bp, ptr->x_flag_if_conversion2);
  bp_pack_var_len_int (bp, ptr->x_flag_indirect_inlining);
  bp_pack_var_len_int (bp, ptr->x_flag_no_inline);
  bp_pack_var_len_int (bp, ptr->x_flag_inline_atomics);
  bp_pack_var_len_int (bp, ptr->x_flag_inline_functions);
  bp_pack_var_len_int (bp, ptr->x_flag_inline_functions_called_once);
  bp_pack_var_len_int (bp, ptr->x_flag_inline_small_functions);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_bit_cp);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_cp);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_cp_clone);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_icf);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_icf_functions);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_icf_variables);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_modref);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_profile);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_pta);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_pure_const);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_ra);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_reference);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_reference_addressable);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_sra);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_stack_alignment);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_strict_aliasing);
  bp_pack_var_len_int (bp, ptr->x_flag_ipa_vrp);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_algorithm);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_hoist_pressure);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_loop_pressure);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_region);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_share_save_slots);
  bp_pack_var_len_int (bp, ptr->x_flag_ira_share_spill_slots);
  bp_pack_var_len_int (bp, ptr->x_flag_isolate_erroneous_paths_attribute);
  bp_pack_var_len_int (bp, ptr->x_flag_isolate_erroneous_paths_dereference);
  bp_pack_var_len_int (bp, ptr->x_flag_ivopts);
  bp_pack_var_len_int (bp, ptr->x_flag_jump_tables);
  bp_pack_var_len_int (bp, ptr->x_flag_keep_gc_roots_live);
  bp_pack_var_len_int (bp, ptr->x_flag_lifetime_dse);
  bp_pack_var_len_int (bp, ptr->x_flag_limit_function_alignment);
  bp_pack_var_len_int (bp, ptr->x_flag_live_patching);
  bp_pack_var_len_int (bp, ptr->x_flag_live_range_shrinkage);
  bp_pack_var_len_int (bp, ptr->x_flag_loop_interchange);
  bp_pack_var_len_int (bp, ptr->x_flag_loop_nest_optimize);
  bp_pack_var_len_int (bp, ptr->x_flag_loop_parallelize_all);
  bp_pack_var_len_int (bp, ptr->x_flag_unroll_jam);
  bp_pack_var_len_int (bp, ptr->x_flag_lra_remat);
  bp_pack_var_len_int (bp, ptr->x_flag_errno_math);
  bp_pack_var_len_int (bp, ptr->x_flag_modulo_sched);
  bp_pack_var_len_int (bp, ptr->x_flag_modulo_sched_allow_regmoves);
  bp_pack_var_len_int (bp, ptr->x_flag_move_loop_invariants);
  bp_pack_var_len_int (bp, ptr->x_flag_move_loop_stores);
  bp_pack_var_len_int (bp, ptr->x_flag_non_call_exceptions);
  bp_pack_var_len_int (bp, ptr->x_flag_nothrow_opt);
  bp_pack_var_len_int (bp, ptr->x_flag_omit_frame_pointer);
  bp_pack_var_len_int (bp, ptr->x_flag_opt_info);
  bp_pack_var_len_int (bp, ptr->x_flag_optimize_sibling_calls);
  bp_pack_var_len_int (bp, ptr->x_flag_optimize_strlen);
  bp_pack_var_len_int (bp, ptr->x_flag_pack_struct);
  bp_pack_var_len_int (bp, ptr->x_flag_partial_inlining);
  bp_pack_string (ob, bp, ptr->x_flag_patchable_function_entry, true);
  bp_pack_var_len_int (bp, ptr->x_flag_peel_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_no_peephole);
  bp_pack_var_len_int (bp, ptr->x_flag_peephole2);
  bp_pack_var_len_int (bp, ptr->x_flag_plt);
  bp_pack_var_len_int (bp, ptr->x_flag_predictive_commoning);
  bp_pack_var_len_int (bp, ptr->x_flag_prefetch_loop_arrays);
  bp_pack_var_len_int (bp, ptr->x_flag_printf_return_value);
  bp_pack_var_len_int (bp, ptr->x_flag_profile_partial_training);
  bp_pack_var_len_int (bp, ptr->x_flag_profile_reorder_functions);
  bp_pack_var_len_int (bp, ptr->x_flag_reciprocal_math);
  bp_pack_var_len_int (bp, ptr->x_flag_ree);
  bp_pack_var_len_int (bp, ptr->x_flag_pcc_struct_return);
  bp_pack_var_len_int (bp, ptr->x_flag_rename_registers);
  bp_pack_var_len_int (bp, ptr->x_flag_reorder_blocks);
  bp_pack_var_len_int (bp, ptr->x_flag_reorder_blocks_algorithm);
  bp_pack_var_len_int (bp, ptr->x_flag_reorder_blocks_and_partition);
  bp_pack_var_len_int (bp, ptr->x_flag_reorder_functions);
  bp_pack_var_len_int (bp, ptr->x_flag_rerun_cse_after_loop);
  bp_pack_var_len_int (bp, ptr->x_flag_resched_modulo_sched);
  bp_pack_var_len_int (bp, ptr->x_flag_rounding_math);
  bp_pack_var_len_int (bp, ptr->x_flag_rtti);
  bp_pack_var_len_int (bp, ptr->x_flag_save_optimization_record);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_critical_path_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_dep_count_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_group_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_interblock);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_last_insn_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_pressure);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_rank_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_speculative);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_spec_insn_heuristic);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_speculative_load);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_speculative_load_dangerous);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_stalled_insns);
  bp_pack_var_len_int (bp, ptr->x_flag_sched_stalled_insns_dep);
  bp_pack_var_len_int (bp, ptr->x_flag_sched2_use_superblocks);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_fusion);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_insns);
  bp_pack_var_len_int (bp, ptr->x_flag_schedule_insns_after_reload);
  bp_pack_var_len_int (bp, ptr->x_flag_section_anchors);
  bp_pack_var_len_int (bp, ptr->x_flag_sel_sched_pipelining);
  bp_pack_var_len_int (bp, ptr->x_flag_sel_sched_pipelining_outer_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_sel_sched_reschedule_pipelined);
  bp_pack_var_len_int (bp, ptr->x_flag_selective_scheduling);
  bp_pack_var_len_int (bp, ptr->x_flag_selective_scheduling2);
  bp_pack_var_len_int (bp, ptr->x_flag_semantic_interposition);
  bp_pack_var_len_int (bp, ptr->x_flag_short_enums);
  bp_pack_var_len_int (bp, ptr->x_flag_short_wchar);
  bp_pack_var_len_int (bp, ptr->x_flag_shrink_wrap);
  bp_pack_var_len_int (bp, ptr->x_flag_shrink_wrap_separate);
  bp_pack_var_len_int (bp, ptr->x_flag_signaling_nans);
  bp_pack_var_len_int (bp, ptr->x_flag_signed_zeros);
  bp_pack_var_len_int (bp, ptr->x_flag_simd_cost_model);
  bp_pack_var_len_int (bp, ptr->x_flag_single_precision_constant);
  bp_pack_var_len_int (bp, ptr->x_flag_split_ivs_in_unroller);
  bp_pack_var_len_int (bp, ptr->x_flag_split_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_split_paths);
  bp_pack_var_len_int (bp, ptr->x_flag_split_wide_types);
  bp_pack_var_len_int (bp, ptr->x_flag_split_wide_types_early);
  bp_pack_var_len_int (bp, ptr->x_flag_ssa_backprop);
  bp_pack_var_len_int (bp, ptr->x_flag_ssa_phiopt);
  bp_pack_var_len_int (bp, ptr->x_flag_stack_clash_protection);
  bp_pack_var_len_int (bp, ptr->x_flag_stack_protect);
  bp_pack_var_len_int (bp, ptr->x_flag_stack_reuse);
  bp_pack_var_len_int (bp, ptr->x_flag_stdarg_opt);
  bp_pack_var_len_int (bp, ptr->x_flag_store_merging);
  bp_pack_var_len_int (bp, ptr->x_flag_strict_aliasing);
  bp_pack_var_len_int (bp, ptr->x_flag_strict_enums);
  bp_pack_var_len_int (bp, ptr->x_flag_strict_volatile_bitfields);
  bp_pack_var_len_int (bp, ptr->x_flag_thread_jumps);
  bp_pack_var_len_int (bp, ptr->x_flag_threadsafe_statics);
  bp_pack_var_len_int (bp, ptr->x_flag_toplevel_reorder);
  bp_pack_var_len_int (bp, ptr->x_flag_tracer);
  bp_pack_var_len_int (bp, ptr->x_flag_trapping_math);
  bp_pack_var_len_int (bp, ptr->x_flag_trapv);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_bit_ccp);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_builtin_call_dce);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_ccp);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_ch);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_coalesce_vars);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_copy_prop);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_cselim);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_dce);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_dom);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_dse);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_forwprop);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_fre);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_distribute_patterns);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_distribution);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_if_convert);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_im);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_ivcanon);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_optimize);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_loop_vectorize);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_live_range_split);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_parallelize_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_partial_pre);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_phiprop);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_pre);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_pta);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_reassoc);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_scev_cprop);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_sink);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_slp_vectorize);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_slsr);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_sra);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_switch_conversion);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_tail_merge);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_ter);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_vectorize);
  bp_pack_var_len_int (bp, ptr->x_flag_tree_vrp);
  bp_pack_var_len_int (bp, ptr->x_flag_auto_var_init);
  bp_pack_var_len_int (bp, ptr->x_flag_unconstrained_commons);
  bp_pack_var_len_int (bp, ptr->x_flag_unroll_all_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_cunroll_grow_size);
  bp_pack_var_len_int (bp, ptr->x_flag_unroll_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_unsafe_math_optimizations);
  bp_pack_var_len_int (bp, ptr->x_flag_unswitch_loops);
  bp_pack_var_len_int (bp, ptr->x_flag_unwind_tables);
  bp_pack_var_len_int (bp, ptr->x_flag_var_tracking);
  bp_pack_var_len_int (bp, ptr->x_flag_var_tracking_assignments);
  bp_pack_var_len_int (bp, ptr->x_flag_var_tracking_assignments_toggle);
  bp_pack_var_len_int (bp, ptr->x_flag_var_tracking_uninit);
  bp_pack_var_len_int (bp, ptr->x_flag_variable_expansion_in_unroller);
  bp_pack_var_len_int (bp, ptr->x_flag_vect_cost_model);
  bp_pack_var_len_int (bp, ptr->x_flag_version_loops_for_strides);
  bp_pack_var_len_int (bp, ptr->x_flag_value_profile_transformations);
  bp_pack_var_len_int (bp, ptr->x_flag_web);
  bp_pack_var_len_int (bp, ptr->x_flag_wrapv);
  bp_pack_var_len_int (bp, ptr->x_flag_wrapv_pointer);
  bp_pack_var_len_int (bp, ptr->x_debug_nonbind_markers_p);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    bp_pack_value (bp, ptr->explicit_mask[i], 64);
}

/* Stream in optimization options  */
void
cl_optimization_stream_in (struct data_in *data_in ATTRIBUTE_UNUSED,
                           struct bitpack_d *bp ATTRIBUTE_UNUSED,
                           struct cl_optimization *ptr ATTRIBUTE_UNUSED)
{
  ptr->x_optimize = (char ) bp_unpack_var_len_int (bp);
  ptr->x_optimize_size = (char ) bp_unpack_var_len_int (bp);
  ptr->x_optimize_debug = (char ) bp_unpack_var_len_int (bp);
  ptr->x_optimize_fast = (char ) bp_unpack_var_len_int (bp);
  ptr->x_param_align_loop_iterations = (int ) bp_unpack_var_len_int (bp);
  if (4 > (int ) 10)
    ptr->x_param_align_loop_iterations ^= 4;
  ptr->x_param_align_threshold = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_align_threshold ^= 100;
  ptr->x_param_asan_protect_allocas = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_protect_allocas ^= 1;
  ptr->x_param_asan_instrument_reads = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_instrument_reads ^= 1;
  ptr->x_param_asan_instrument_writes = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_instrument_writes ^= 1;
  ptr->x_param_asan_instrumentation_with_call_threshold = (int ) bp_unpack_var_len_int (bp);
  if (7000 > (int ) 10)
    ptr->x_param_asan_instrumentation_with_call_threshold ^= 7000;
  ptr->x_param_asan_memintrin = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_memintrin ^= 1;
  ptr->x_param_asan_stack = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_stack ^= 1;
  ptr->x_param_asan_use_after_return = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_asan_use_after_return ^= 1;
  ptr->x_param_avg_loop_niter = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_avg_loop_niter ^= 10;
  ptr->x_param_avoid_fma_max_bits = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_builtin_expect_probability = (int ) bp_unpack_var_len_int (bp);
  if (90 > (int ) 10)
    ptr->x_param_builtin_expect_probability ^= 90;
  ptr->x_param_builtin_string_cmp_inline_length = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_builtin_string_cmp_inline_length ^= 3;
  ptr->x_param_case_values_threshold = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_comdat_sharing_probability = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_comdat_sharing_probability ^= 20;
  ptr->x_param_construct_interfere_size = (int ) bp_unpack_var_len_int (bp);
  if (0 > (int ) 10)
    ptr->x_param_construct_interfere_size ^= 0;
  ptr->x_param_destruct_interfere_size = (int ) bp_unpack_var_len_int (bp);
  if (0 > (int ) 10)
    ptr->x_param_destruct_interfere_size ^= 0;
  ptr->x_param_dse_max_alias_queries_per_store = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_dse_max_alias_queries_per_store ^= 256;
  ptr->x_param_dse_max_object_size = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_dse_max_object_size ^= 256;
  ptr->x_param_early_inlining_insns = (int ) bp_unpack_var_len_int (bp);
  if (6 > (int ) 10)
    ptr->x_param_early_inlining_insns ^= 6;
  ptr->x_param_evrp_mode = (enum evrp_mode ) bp_unpack_var_len_int (bp);
  ptr->x_param_evrp_sparse_threshold = (int ) bp_unpack_var_len_int (bp);
  if (800 > (int ) 10)
    ptr->x_param_evrp_sparse_threshold ^= 800;
  ptr->x_param_evrp_switch_limit = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_evrp_switch_limit ^= 50;
  ptr->x_param_fsm_scale_path_blocks = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_fsm_scale_path_blocks ^= 3;
  ptr->x_param_fsm_scale_path_stmts = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_fsm_scale_path_stmts ^= 2;
  ptr->x_param_gcse_after_reload_critical_fraction = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_gcse_after_reload_critical_fraction ^= 10;
  ptr->x_param_gcse_after_reload_partial_fraction = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_gcse_after_reload_partial_fraction ^= 3;
  ptr->x_param_gcse_cost_distance_ratio = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_gcse_cost_distance_ratio ^= 10;
  ptr->x_param_gcse_unrestricted_cost = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_gcse_unrestricted_cost ^= 3;
  ptr->x_param_graphite_max_arrays_per_scop = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_graphite_max_arrays_per_scop ^= 100;
  ptr->x_param_graphite_max_nb_scop_params = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_graphite_max_nb_scop_params ^= 10;
  ptr->x_param_hwasan_instrument_allocas = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_instrument_allocas ^= 1;
  ptr->x_param_hwasan_instrument_mem_intrinsics = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_instrument_mem_intrinsics ^= 1;
  ptr->x_param_hwasan_instrument_reads = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_instrument_reads ^= 1;
  ptr->x_param_hwasan_instrument_stack = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_instrument_stack ^= 1;
  ptr->x_param_hwasan_instrument_writes = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_instrument_writes ^= 1;
  ptr->x_param_hwasan_random_frame_tag = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_hwasan_random_frame_tag ^= 1;
  ptr->x_param_inline_heuristics_hint_percent = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_inline_heuristics_hint_percent ^= 200;
  ptr->x_param_inline_min_speedup = (int ) bp_unpack_var_len_int (bp);
  if (30 > (int ) 10)
    ptr->x_param_inline_min_speedup ^= 30;
  ptr->x_param_inline_unit_growth = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_inline_unit_growth ^= 40;
  ptr->x_param_ipa_cp_eval_threshold = (int ) bp_unpack_var_len_int (bp);
  if (500 > (int ) 10)
    ptr->x_param_ipa_cp_eval_threshold ^= 500;
  ptr->x_param_ipa_cp_large_unit_insns = (int ) bp_unpack_var_len_int (bp);
  if (16000 > (int ) 10)
    ptr->x_param_ipa_cp_large_unit_insns ^= 16000;
  ptr->x_param_ipa_cp_loop_hint_bonus = (int ) bp_unpack_var_len_int (bp);
  if (64 > (int ) 10)
    ptr->x_param_ipa_cp_loop_hint_bonus ^= 64;
  ptr->x_param_ipa_cp_max_recursive_depth = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_ipa_cp_max_recursive_depth ^= 8;
  ptr->x_param_ipa_cp_min_recursive_probability = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_ipa_cp_min_recursive_probability ^= 2;
  ptr->x_param_ipa_cp_profile_count_base = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_ipa_cp_profile_count_base ^= 10;
  ptr->x_param_ipa_cp_recursion_penalty = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_ipa_cp_recursion_penalty ^= 40;
  ptr->x_param_ipa_cp_recursive_freq_factor = (int ) bp_unpack_var_len_int (bp);
  if (6 > (int ) 10)
    ptr->x_param_ipa_cp_recursive_freq_factor ^= 6;
  ptr->x_param_ipa_cp_single_call_penalty = (int ) bp_unpack_var_len_int (bp);
  if (15 > (int ) 10)
    ptr->x_param_ipa_cp_single_call_penalty ^= 15;
  ptr->x_param_ipa_cp_unit_growth = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_ipa_cp_unit_growth ^= 10;
  ptr->x_param_ipa_cp_value_list_size = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_ipa_cp_value_list_size ^= 8;
  ptr->x_param_ipa_jump_function_lookups = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_ipa_jump_function_lookups ^= 8;
  ptr->x_param_ipa_max_aa_steps = (int ) bp_unpack_var_len_int (bp);
  if (25000 > (int ) 10)
    ptr->x_param_ipa_max_aa_steps ^= 25000;
  ptr->x_param_ipa_max_agg_items = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_ipa_max_agg_items ^= 16;
  ptr->x_param_ipa_max_loop_predicates = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_ipa_max_loop_predicates ^= 16;
  ptr->x_param_ipa_max_param_expr_ops = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_ipa_max_param_expr_ops ^= 10;
  ptr->x_param_ipa_max_switch_predicate_bounds = (int ) bp_unpack_var_len_int (bp);
  if (5 > (int ) 10)
    ptr->x_param_ipa_max_switch_predicate_bounds ^= 5;
  ptr->x_param_ipa_sra_max_replacements = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_ipa_sra_max_replacements ^= 8;
  ptr->x_param_ipa_sra_ptr_growth_factor = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_ipa_sra_ptr_growth_factor ^= 2;
  ptr->x_param_ira_consider_dup_in_all_alts = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_ira_consider_dup_in_all_alts ^= 1;
  ptr->x_param_ira_loop_reserved_regs = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_ira_loop_reserved_regs ^= 2;
  ptr->x_param_ira_max_conflict_table_size = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_ira_max_conflict_table_size ^= 1000;
  ptr->x_param_ira_max_loops_num = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_ira_max_loops_num ^= 100;
  ptr->x_param_iv_always_prune_cand_set_bound = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_iv_always_prune_cand_set_bound ^= 10;
  ptr->x_param_iv_consider_all_candidates_bound = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_iv_consider_all_candidates_bound ^= 40;
  ptr->x_param_iv_max_considered_uses = (int ) bp_unpack_var_len_int (bp);
  if (250 > (int ) 10)
    ptr->x_param_iv_max_considered_uses ^= 250;
  ptr->x_param_jump_table_max_growth_ratio_for_size = (int ) bp_unpack_var_len_int (bp);
  if (300 > (int ) 10)
    ptr->x_param_jump_table_max_growth_ratio_for_size ^= 300;
  ptr->x_param_jump_table_max_growth_ratio_for_speed = (int ) bp_unpack_var_len_int (bp);
  if (800 > (int ) 10)
    ptr->x_param_jump_table_max_growth_ratio_for_speed ^= 800;
  ptr->x_param_l1_cache_line_size = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_l1_cache_line_size ^= 32;
  ptr->x_param_l1_cache_size = (int ) bp_unpack_var_len_int (bp);
  if (64 > (int ) 10)
    ptr->x_param_l1_cache_size ^= 64;
  ptr->x_param_l2_cache_size = (int ) bp_unpack_var_len_int (bp);
  if (512 > (int ) 10)
    ptr->x_param_l2_cache_size ^= 512;
  ptr->x_param_large_function_growth = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_large_function_growth ^= 100;
  ptr->x_param_large_function_insns = (int ) bp_unpack_var_len_int (bp);
  if (2700 > (int ) 10)
    ptr->x_param_large_function_insns ^= 2700;
  ptr->x_param_stack_frame_growth = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_stack_frame_growth ^= 1000;
  ptr->x_param_large_stack_frame = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_large_stack_frame ^= 256;
  ptr->x_param_large_unit_insns = (int ) bp_unpack_var_len_int (bp);
  if (10000 > (int ) 10)
    ptr->x_param_large_unit_insns ^= 10000;
  ptr->x_param_lim_expensive = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_lim_expensive ^= 20;
  ptr->x_param_loop_block_tile_size = (int ) bp_unpack_var_len_int (bp);
  if (51 > (int ) 10)
    ptr->x_param_loop_block_tile_size ^= 51;
  ptr->x_param_loop_interchange_max_num_stmts = (int ) bp_unpack_var_len_int (bp);
  if (64 > (int ) 10)
    ptr->x_param_loop_interchange_max_num_stmts ^= 64;
  ptr->x_param_loop_interchange_stride_ratio = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_loop_interchange_stride_ratio ^= 2;
  ptr->x_param_loop_invariant_max_bbs_in_loop = (int ) bp_unpack_var_len_int (bp);
  if (10000 > (int ) 10)
    ptr->x_param_loop_invariant_max_bbs_in_loop ^= 10000;
  ptr->x_param_loop_max_datarefs_for_datadeps = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_loop_max_datarefs_for_datadeps ^= 1000;
  ptr->x_param_loop_versioning_max_inner_insns = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_loop_versioning_max_inner_insns ^= 200;
  ptr->x_param_loop_versioning_max_outer_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_loop_versioning_max_outer_insns ^= 100;
  ptr->x_param_lra_inheritance_ebb_probability_cutoff = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_lra_inheritance_ebb_probability_cutoff ^= 40;
  ptr->x_param_lra_max_considered_reload_pseudos = (int ) bp_unpack_var_len_int (bp);
  if (500 > (int ) 10)
    ptr->x_param_lra_max_considered_reload_pseudos ^= 500;
  ptr->x_param_max_average_unrolled_insns = (int ) bp_unpack_var_len_int (bp);
  if (80 > (int ) 10)
    ptr->x_param_max_average_unrolled_insns ^= 80;
  ptr->x_param_max_combine_insns = (int ) bp_unpack_var_len_int (bp);
  if (4 > (int ) 10)
    ptr->x_param_max_combine_insns ^= 4;
  ptr->x_param_max_unroll_iterations = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_unroll_iterations ^= 8;
  ptr->x_param_max_completely_peel_times = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_max_completely_peel_times ^= 16;
  ptr->x_param_max_completely_peeled_insns = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_max_completely_peeled_insns ^= 200;
  ptr->x_param_max_crossjump_edges = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_crossjump_edges ^= 100;
  ptr->x_param_max_cse_insns = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_max_cse_insns ^= 1000;
  ptr->x_param_max_cse_path_length = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_cse_path_length ^= 10;
  ptr->x_param_max_cselib_memory_locations = (int ) bp_unpack_var_len_int (bp);
  if (500 > (int ) 10)
    ptr->x_param_max_cselib_memory_locations ^= 500;
  ptr->x_param_max_debug_marker_count = (int ) bp_unpack_var_len_int (bp);
  if (100000 > (int ) 10)
    ptr->x_param_max_debug_marker_count ^= 100000;
  ptr->x_param_max_delay_slot_insn_search = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_delay_slot_insn_search ^= 100;
  ptr->x_param_max_delay_slot_live_search = (int ) bp_unpack_var_len_int (bp);
  if (333 > (int ) 10)
    ptr->x_param_max_delay_slot_live_search ^= 333;
  ptr->x_param_max_dse_active_local_stores = (int ) bp_unpack_var_len_int (bp);
  if (5000 > (int ) 10)
    ptr->x_param_max_dse_active_local_stores ^= 5000;
  ptr->x_param_early_inliner_max_iterations = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_early_inliner_max_iterations ^= 1;
  ptr->x_param_max_find_base_term_values = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_max_find_base_term_values ^= 200;
  ptr->x_param_max_fsm_thread_length = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_fsm_thread_length ^= 10;
  ptr->x_param_max_fsm_thread_path_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_fsm_thread_path_insns ^= 100;
  ptr->x_param_max_gcse_insertion_ratio = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_max_gcse_insertion_ratio ^= 20;
  ptr->x_param_max_gcse_memory = (int ) bp_unpack_var_len_int (bp);
  if (131072 > (int ) 10)
    ptr->x_param_max_gcse_memory ^= 131072;
  ptr->x_param_max_goto_duplication_insns = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_goto_duplication_insns ^= 8;
  ptr->x_param_max_grow_copy_bb_insns = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_grow_copy_bb_insns ^= 8;
  ptr->x_param_max_hoist_depth = (int ) bp_unpack_var_len_int (bp);
  if (30 > (int ) 10)
    ptr->x_param_max_hoist_depth ^= 30;
  ptr->x_param_inline_functions_called_once_insns = (int ) bp_unpack_var_len_int (bp);
  if (4000 > (int ) 10)
    ptr->x_param_inline_functions_called_once_insns ^= 4000;
  ptr->x_param_inline_functions_called_once_loop_depth = (int ) bp_unpack_var_len_int (bp);
  if (6 > (int ) 10)
    ptr->x_param_inline_functions_called_once_loop_depth ^= 6;
  ptr->x_param_max_inline_insns_auto = (int ) bp_unpack_var_len_int (bp);
  if (15 > (int ) 10)
    ptr->x_param_max_inline_insns_auto ^= 15;
  ptr->x_param_max_inline_insns_recursive_auto = (int ) bp_unpack_var_len_int (bp);
  if (450 > (int ) 10)
    ptr->x_param_max_inline_insns_recursive_auto ^= 450;
  ptr->x_param_max_inline_insns_recursive = (int ) bp_unpack_var_len_int (bp);
  if (450 > (int ) 10)
    ptr->x_param_max_inline_insns_recursive ^= 450;
  ptr->x_param_max_inline_insns_single = (int ) bp_unpack_var_len_int (bp);
  if (70 > (int ) 10)
    ptr->x_param_max_inline_insns_single ^= 70;
  ptr->x_param_max_inline_insns_size = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_max_inline_insns_small = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_max_inline_recursive_depth_auto = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_inline_recursive_depth_auto ^= 8;
  ptr->x_param_max_inline_recursive_depth = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_inline_recursive_depth ^= 8;
  ptr->x_param_max_isl_operations = (int ) bp_unpack_var_len_int (bp);
  if (350000 > (int ) 10)
    ptr->x_param_max_isl_operations ^= 350000;
  ptr->x_param_max_iterations_computation_cost = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_iterations_computation_cost ^= 10;
  ptr->x_param_max_iterations_to_track = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_max_iterations_to_track ^= 1000;
  ptr->x_param_max_jump_thread_duplication_stmts = (int ) bp_unpack_var_len_int (bp);
  if (15 > (int ) 10)
    ptr->x_param_max_jump_thread_duplication_stmts ^= 15;
  ptr->x_param_max_last_value_rtl = (int ) bp_unpack_var_len_int (bp);
  if (10000 > (int ) 10)
    ptr->x_param_max_last_value_rtl ^= 10000;
  ptr->x_param_max_loop_header_insns = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_max_loop_header_insns ^= 20;
  ptr->x_param_max_modulo_backtrack_attempts = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_max_modulo_backtrack_attempts ^= 40;
  ptr->x_param_max_partial_antic_length = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_partial_antic_length ^= 100;
  ptr->x_param_max_peel_branches = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_max_peel_branches ^= 32;
  ptr->x_param_max_peel_times = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_max_peel_times ^= 16;
  ptr->x_param_max_peeled_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_peeled_insns ^= 100;
  ptr->x_param_max_pending_list_length = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_max_pending_list_length ^= 32;
  ptr->x_param_max_pipeline_region_blocks = (int ) bp_unpack_var_len_int (bp);
  if (15 > (int ) 10)
    ptr->x_param_max_pipeline_region_blocks ^= 15;
  ptr->x_param_max_pipeline_region_insns = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_max_pipeline_region_insns ^= 200;
  ptr->x_param_max_pow_sqrt_depth = (int ) bp_unpack_var_len_int (bp);
  if (5 > (int ) 10)
    ptr->x_param_max_pow_sqrt_depth ^= 5;
  ptr->x_param_max_predicted_iterations = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_predicted_iterations ^= 100;
  ptr->x_param_max_reload_search_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_reload_search_insns ^= 100;
  ptr->x_param_max_rtl_if_conversion_insns = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_rtl_if_conversion_insns ^= 10;
  ptr->x_param_max_rtl_if_conversion_predictable_cost = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_max_rtl_if_conversion_predictable_cost ^= 20;
  ptr->x_param_max_rtl_if_conversion_unpredictable_cost = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_max_rtl_if_conversion_unpredictable_cost ^= 40;
  ptr->x_param_max_sched_extend_regions_iters = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_max_sched_insn_conflict_delay = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_max_sched_insn_conflict_delay ^= 3;
  ptr->x_param_max_sched_ready_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_sched_ready_insns ^= 100;
  ptr->x_param_max_sched_region_blocks = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_sched_region_blocks ^= 10;
  ptr->x_param_max_sched_region_insns = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_max_sched_region_insns ^= 100;
  ptr->x_param_max_slsr_candidate_scan = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_max_slsr_candidate_scan ^= 50;
  ptr->x_param_max_speculative_devirt_maydefs = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_max_speculative_devirt_maydefs ^= 50;
  ptr->x_param_max_stores_to_merge = (int ) bp_unpack_var_len_int (bp);
  if (64 > (int ) 10)
    ptr->x_param_max_stores_to_merge ^= 64;
  ptr->x_param_max_stores_to_sink = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_max_stores_to_sink ^= 2;
  ptr->x_param_max_tail_merge_comparisons = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_tail_merge_comparisons ^= 10;
  ptr->x_param_max_tail_merge_iterations = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_max_tail_merge_iterations ^= 2;
  ptr->x_param_max_tracked_strlens = (int ) bp_unpack_var_len_int (bp);
  if (10000 > (int ) 10)
    ptr->x_param_max_tracked_strlens ^= 10000;
  ptr->x_param_max_tree_if_conversion_phi_args = (int ) bp_unpack_var_len_int (bp);
  if (4 > (int ) 10)
    ptr->x_param_max_tree_if_conversion_phi_args ^= 4;
  ptr->x_param_max_unroll_times = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_max_unroll_times ^= 8;
  ptr->x_param_max_unrolled_insns = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_max_unrolled_insns ^= 200;
  ptr->x_param_max_unswitch_insns = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_max_unswitch_insns ^= 50;
  ptr->x_param_max_variable_expansions = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_max_variable_expansions ^= 1;
  ptr->x_param_max_vartrack_expr_depth = (int ) bp_unpack_var_len_int (bp);
  if (12 > (int ) 10)
    ptr->x_param_max_vartrack_expr_depth ^= 12;
  ptr->x_param_max_vartrack_reverse_op_size = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_max_vartrack_reverse_op_size ^= 50;
  ptr->x_param_max_vartrack_size = (int ) bp_unpack_var_len_int (bp);
  if (50000000 > (int ) 10)
    ptr->x_param_max_vartrack_size ^= 50000000;
  ptr->x_param_max_vrp_switch_assertions = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_max_vrp_switch_assertions ^= 10;
  ptr->x_param_min_crossjump_insns = (int ) bp_unpack_var_len_int (bp);
  if (5 > (int ) 10)
    ptr->x_param_min_crossjump_insns ^= 5;
  ptr->x_param_min_inline_recursive_probability = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_min_inline_recursive_probability ^= 10;
  ptr->x_param_min_insn_to_prefetch_ratio = (int ) bp_unpack_var_len_int (bp);
  if (9 > (int ) 10)
    ptr->x_param_min_insn_to_prefetch_ratio ^= 9;
  ptr->x_param_min_loop_cond_split_prob = (int ) bp_unpack_var_len_int (bp);
  if (30 > (int ) 10)
    ptr->x_param_min_loop_cond_split_prob ^= 30;
  ptr->x_param_min_pagesize = (int ) bp_unpack_var_len_int (bp);
  if (4096 > (int ) 10)
    ptr->x_param_min_pagesize ^= 4096;
  ptr->x_param_min_size_for_stack_sharing = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_min_size_for_stack_sharing ^= 32;
  ptr->x_param_min_spec_prob = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_min_spec_prob ^= 40;
  ptr->x_param_min_vect_loop_bound = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_modref_max_accesses = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_modref_max_accesses ^= 16;
  ptr->x_param_modref_max_adjustments = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_modref_max_adjustments ^= 8;
  ptr->x_param_modref_max_bases = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_modref_max_bases ^= 32;
  ptr->x_param_modref_max_depth = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_modref_max_depth ^= 256;
  ptr->x_param_modref_max_escape_points = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_modref_max_escape_points ^= 256;
  ptr->x_param_modref_max_refs = (int ) bp_unpack_var_len_int (bp);
  if (16 > (int ) 10)
    ptr->x_param_modref_max_refs ^= 16;
  ptr->x_param_modref_max_tests = (int ) bp_unpack_var_len_int (bp);
  if (64 > (int ) 10)
    ptr->x_param_modref_max_tests ^= 64;
  ptr->x_param_parloops_chunk_size = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_parloops_min_per_thread = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_parloops_min_per_thread ^= 100;
  ptr->x_param_parloops_schedule = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_partial_inlining_entry_probability = (int ) bp_unpack_var_len_int (bp);
  if (70 > (int ) 10)
    ptr->x_param_partial_inlining_entry_probability ^= 70;
  ptr->x_param_predictable_branch_outcome = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_predictable_branch_outcome ^= 2;
  ptr->x_param_prefetch_dynamic_strides = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_prefetch_dynamic_strides ^= 1;
  ptr->x_param_prefetch_latency = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_prefetch_latency ^= 200;
  ptr->x_param_prefetch_min_insn_to_mem_ratio = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_prefetch_min_insn_to_mem_ratio ^= 3;
  ptr->x_param_prefetch_minimum_stride = (int ) bp_unpack_var_len_int (bp);
  if (-1 > (int ) 10)
    ptr->x_param_prefetch_minimum_stride ^= -1;
  ptr->x_param_ranger_debug = (enum ranger_debug ) bp_unpack_var_len_int (bp);
  ptr->x_param_ranger_logical_depth = (int ) bp_unpack_var_len_int (bp);
  if (6 > (int ) 10)
    ptr->x_param_ranger_logical_depth ^= 6;
  ptr->x_param_relation_block_limit = (int ) bp_unpack_var_len_int (bp);
  if (200 > (int ) 10)
    ptr->x_param_relation_block_limit ^= 200;
  ptr->x_param_rpo_vn_max_loop_depth = (int ) bp_unpack_var_len_int (bp);
  if (7 > (int ) 10)
    ptr->x_param_rpo_vn_max_loop_depth ^= 7;
  ptr->x_param_sccvn_max_alias_queries_per_access = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_sccvn_max_alias_queries_per_access ^= 1000;
  ptr->x_param_scev_max_expr_complexity = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_scev_max_expr_complexity ^= 10;
  ptr->x_param_scev_max_expr_size = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_scev_max_expr_size ^= 100;
  ptr->x_param_sched_autopref_queue_depth = (int ) bp_unpack_var_len_int (bp);
  if (-1 > (int ) 10)
    ptr->x_param_sched_autopref_queue_depth ^= -1;
  ptr->x_param_sched_mem_true_dep_cost = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_sched_mem_true_dep_cost ^= 1;
  ptr->x_param_sched_pressure_algorithm = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_sched_pressure_algorithm ^= 1;
  ptr->x_param_sched_spec_prob_cutoff = (int ) bp_unpack_var_len_int (bp);
  if (40 > (int ) 10)
    ptr->x_param_sched_spec_prob_cutoff ^= 40;
  ptr->x_param_sched_state_edge_prob_cutoff = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_sched_state_edge_prob_cutoff ^= 10;
  ptr->x_param_selsched_insns_to_rename = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_selsched_insns_to_rename ^= 2;
  ptr->x_param_selsched_max_lookahead = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_selsched_max_lookahead ^= 50;
  ptr->x_param_selsched_max_sched_times = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_selsched_max_sched_times ^= 2;
  ptr->x_param_simultaneous_prefetches = (int ) bp_unpack_var_len_int (bp);
  if (3 > (int ) 10)
    ptr->x_param_simultaneous_prefetches ^= 3;
  ptr->x_param_sink_frequency_threshold = (int ) bp_unpack_var_len_int (bp);
  if (75 > (int ) 10)
    ptr->x_param_sink_frequency_threshold ^= 75;
  ptr->x_param_sms_dfa_history = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_sms_loop_average_count_threshold = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_sms_max_ii_factor = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_sms_max_ii_factor ^= 2;
  ptr->x_param_sms_min_sc = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_sms_min_sc ^= 2;
  ptr->x_param_sra_max_propagations = (int ) bp_unpack_var_len_int (bp);
  if (32 > (int ) 10)
    ptr->x_param_sra_max_propagations ^= 32;
  ptr->x_param_sra_max_scalarization_size_size = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_sra_max_scalarization_size_speed = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_ssa_name_def_chain_limit = (int ) bp_unpack_var_len_int (bp);
  if (512 > (int ) 10)
    ptr->x_param_ssa_name_def_chain_limit ^= 512;
  ptr->x_param_ssp_buffer_size = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_ssp_buffer_size ^= 8;
  ptr->x_param_stack_clash_protection_guard_size = (int ) bp_unpack_var_len_int (bp);
  if (12 > (int ) 10)
    ptr->x_param_stack_clash_protection_guard_size ^= 12;
  ptr->x_param_stack_clash_protection_probe_interval = (int ) bp_unpack_var_len_int (bp);
  if (12 > (int ) 10)
    ptr->x_param_stack_clash_protection_probe_interval ^= 12;
  ptr->x_param_store_merging_allow_unaligned = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_store_merging_allow_unaligned ^= 1;
  ptr->x_param_store_merging_max_size = (int ) bp_unpack_var_len_int (bp);
  if (65536 > (int ) 10)
    ptr->x_param_store_merging_max_size ^= 65536;
  ptr->x_param_switch_conversion_branch_ratio = (int ) bp_unpack_var_len_int (bp);
  if (8 > (int ) 10)
    ptr->x_param_switch_conversion_branch_ratio ^= 8;
  ptr->x_param_threader_debug = (enum threader_debug ) bp_unpack_var_len_int (bp);
  ptr->x_param_tm_max_aggregate_size = (int ) bp_unpack_var_len_int (bp);
  if (9 > (int ) 10)
    ptr->x_param_tm_max_aggregate_size ^= 9;
  ptr->x_param_tracer_dynamic_coverage_feedback = (int ) bp_unpack_var_len_int (bp);
  if (95 > (int ) 10)
    ptr->x_param_tracer_dynamic_coverage_feedback ^= 95;
  ptr->x_param_tracer_dynamic_coverage = (int ) bp_unpack_var_len_int (bp);
  if (75 > (int ) 10)
    ptr->x_param_tracer_dynamic_coverage ^= 75;
  ptr->x_param_tracer_max_code_growth = (int ) bp_unpack_var_len_int (bp);
  if (100 > (int ) 10)
    ptr->x_param_tracer_max_code_growth ^= 100;
  ptr->x_param_tracer_min_branch_probability_feedback = (int ) bp_unpack_var_len_int (bp);
  if (80 > (int ) 10)
    ptr->x_param_tracer_min_branch_probability_feedback ^= 80;
  ptr->x_param_tracer_min_branch_probability = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_tracer_min_branch_probability ^= 50;
  ptr->x_param_tracer_min_branch_ratio = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_tracer_min_branch_ratio ^= 10;
  ptr->x_param_tree_reassoc_width = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_uninit_control_dep_attempts = (int ) bp_unpack_var_len_int (bp);
  if (1000 > (int ) 10)
    ptr->x_param_uninit_control_dep_attempts ^= 1000;
  ptr->x_param_uninlined_function_insns = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_uninlined_function_insns ^= 2;
  ptr->x_param_uninlined_function_time = (int ) bp_unpack_var_len_int (bp);
  ptr->x_param_uninlined_function_thunk_insns = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_uninlined_function_thunk_insns ^= 2;
  ptr->x_param_uninlined_function_thunk_time = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_uninlined_function_thunk_time ^= 2;
  ptr->x_param_unlikely_bb_count_fraction = (int ) bp_unpack_var_len_int (bp);
  if (20 > (int ) 10)
    ptr->x_param_unlikely_bb_count_fraction ^= 20;
  ptr->x_param_unroll_jam_max_unroll = (int ) bp_unpack_var_len_int (bp);
  if (4 > (int ) 10)
    ptr->x_param_unroll_jam_max_unroll ^= 4;
  ptr->x_param_unroll_jam_min_percent = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_unroll_jam_min_percent ^= 1;
  ptr->x_param_use_after_scope_direct_emission_threshold = (int ) bp_unpack_var_len_int (bp);
  if (256 > (int ) 10)
    ptr->x_param_use_after_scope_direct_emission_threshold ^= 256;
  ptr->x_param_vect_epilogues_nomask = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_vect_epilogues_nomask ^= 1;
  ptr->x_param_vect_induction_float = (int ) bp_unpack_var_len_int (bp);
  if (1 > (int ) 10)
    ptr->x_param_vect_induction_float ^= 1;
  ptr->x_param_vect_inner_loop_cost_factor = (int ) bp_unpack_var_len_int (bp);
  if (50 > (int ) 10)
    ptr->x_param_vect_inner_loop_cost_factor ^= 50;
  ptr->x_param_vect_max_peeling_for_alignment = (int ) bp_unpack_var_len_int (bp);
  if (-1 > (int ) 10)
    ptr->x_param_vect_max_peeling_for_alignment ^= -1;
  ptr->x_param_vect_max_version_for_alias_checks = (int ) bp_unpack_var_len_int (bp);
  if (10 > (int ) 10)
    ptr->x_param_vect_max_version_for_alias_checks ^= 10;
  ptr->x_param_vect_max_version_for_alignment_checks = (int ) bp_unpack_var_len_int (bp);
  if (6 > (int ) 10)
    ptr->x_param_vect_max_version_for_alignment_checks ^= 6;
  ptr->x_param_vect_partial_vector_usage = (int ) bp_unpack_var_len_int (bp);
  if (2 > (int ) 10)
    ptr->x_param_vect_partial_vector_usage ^= 2;
  ptr->x_param_vrp1_mode = (enum vrp_mode ) bp_unpack_var_len_int (bp);
  ptr->x_param_vrp2_mode = (enum vrp_mode ) bp_unpack_var_len_int (bp);
  ptr->x_warn_inline = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_aggressive_loop_optimizations = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_align_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_str_align_functions = bp_unpack_string (data_in, bp);
  if (ptr->x_str_align_functions)
    ptr->x_str_align_functions = xstrdup (ptr->x_str_align_functions);
  ptr->x_flag_align_jumps = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_str_align_jumps = bp_unpack_string (data_in, bp);
  if (ptr->x_str_align_jumps)
    ptr->x_str_align_jumps = xstrdup (ptr->x_str_align_jumps);
  ptr->x_flag_align_labels = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_str_align_labels = bp_unpack_string (data_in, bp);
  if (ptr->x_str_align_labels)
    ptr->x_str_align_labels = xstrdup (ptr->x_str_align_labels);
  ptr->x_flag_align_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_str_align_loops = bp_unpack_string (data_in, bp);
  if (ptr->x_str_align_loops)
    ptr->x_str_align_loops = xstrdup (ptr->x_str_align_loops);
  ptr->x_flag_allocation_dce = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_store_data_races = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_associative_math = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_asynchronous_unwind_tables = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_auto_inc_dec = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_bit_tests = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_branch_on_count_reg = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_branch_probabilities = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_caller_saves = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_code_hoisting = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_combine_stack_adjustments = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_compare_elim_after_reload = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_conserve_stack = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_cprop_registers = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_crossjumping = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_cse_follow_jumps = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_cx_fortran_rules = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_cx_limited_range = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_dce = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_defer_pop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_delayed_branch = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_delete_dead_exceptions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_delete_null_pointer_checks = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_devirtualize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_devirtualize_speculatively = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_dse = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_early_inlining = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_exceptions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_excess_precision = (enum excess_precision ) bp_unpack_var_len_int (bp);
  ptr->x_flag_expensive_optimizations = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_finite_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_finite_math_only = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_float_store = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_fold_simple_inlines = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_forward_propagate = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_fp_contract_mode = (enum fp_contract_mode ) bp_unpack_var_len_int (bp);
  ptr->x_flag_fp_int_builtin_inexact = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_no_function_cse = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_gcse = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_gcse_after_reload = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_gcse_las = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_gcse_lm = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_gcse_sm = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_graphite = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_graphite_identity = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_guess_branch_prob = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_harden_compares = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_harden_conditional_branches = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_hoist_adjacent_loads = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_if_conversion = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_if_conversion2 = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_indirect_inlining = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_no_inline = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_inline_atomics = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_inline_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_inline_functions_called_once = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_inline_small_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_bit_cp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_cp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_cp_clone = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_icf = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_icf_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_icf_variables = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_modref = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_profile = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_pta = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_pure_const = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_ra = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_reference = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_reference_addressable = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_sra = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_stack_alignment = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_strict_aliasing = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ipa_vrp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_algorithm = (enum ira_algorithm ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_hoist_pressure = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_loop_pressure = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_region = (enum ira_region ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_share_save_slots = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ira_share_spill_slots = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_isolate_erroneous_paths_attribute = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_isolate_erroneous_paths_dereference = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ivopts = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_jump_tables = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_keep_gc_roots_live = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_lifetime_dse = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_limit_function_alignment = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_live_patching = (enum live_patching_level ) bp_unpack_var_len_int (bp);
  ptr->x_flag_live_range_shrinkage = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_loop_interchange = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_loop_nest_optimize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_loop_parallelize_all = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unroll_jam = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_lra_remat = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_errno_math = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_modulo_sched = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_modulo_sched_allow_regmoves = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_move_loop_invariants = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_move_loop_stores = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_non_call_exceptions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_nothrow_opt = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_omit_frame_pointer = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_opt_info = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_optimize_sibling_calls = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_optimize_strlen = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_pack_struct = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_partial_inlining = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_patchable_function_entry = bp_unpack_string (data_in, bp);
  if (ptr->x_flag_patchable_function_entry)
    ptr->x_flag_patchable_function_entry = xstrdup (ptr->x_flag_patchable_function_entry);
  ptr->x_flag_peel_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_no_peephole = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_peephole2 = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_plt = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_predictive_commoning = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_prefetch_loop_arrays = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_printf_return_value = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_profile_partial_training = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_profile_reorder_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_reciprocal_math = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ree = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_pcc_struct_return = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_rename_registers = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_reorder_blocks = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_reorder_blocks_algorithm = (enum reorder_blocks_algorithm ) bp_unpack_var_len_int (bp);
  ptr->x_flag_reorder_blocks_and_partition = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_reorder_functions = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_rerun_cse_after_loop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_resched_modulo_sched = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_rounding_math = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_rtti = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_save_optimization_record = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_critical_path_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_dep_count_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_group_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_interblock = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_last_insn_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_pressure = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_rank_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_speculative = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_spec_insn_heuristic = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_speculative_load = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_speculative_load_dangerous = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_stalled_insns = (int ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched_stalled_insns_dep = (int ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sched2_use_superblocks = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_fusion = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_insns = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_schedule_insns_after_reload = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_section_anchors = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sel_sched_pipelining = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sel_sched_pipelining_outer_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_sel_sched_reschedule_pipelined = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_selective_scheduling = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_selective_scheduling2 = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_semantic_interposition = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_short_enums = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_short_wchar = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_shrink_wrap = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_shrink_wrap_separate = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_signaling_nans = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_signed_zeros = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_simd_cost_model = (enum vect_cost_model ) bp_unpack_var_len_int (bp);
  ptr->x_flag_single_precision_constant = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_split_ivs_in_unroller = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_split_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_split_paths = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_split_wide_types = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_split_wide_types_early = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ssa_backprop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_ssa_phiopt = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_stack_clash_protection = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_stack_protect = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_stack_reuse = (enum stack_reuse_level ) bp_unpack_var_len_int (bp);
  ptr->x_flag_stdarg_opt = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_store_merging = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_strict_aliasing = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_strict_enums = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_strict_volatile_bitfields = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_thread_jumps = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_threadsafe_statics = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_toplevel_reorder = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tracer = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_trapping_math = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_trapv = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_bit_ccp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_builtin_call_dce = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_ccp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_ch = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_coalesce_vars = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_copy_prop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_cselim = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_dce = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_dom = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_dse = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_forwprop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_fre = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_distribute_patterns = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_distribution = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_if_convert = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_im = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_ivcanon = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_optimize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_loop_vectorize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_live_range_split = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_parallelize_loops = (int ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_partial_pre = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_phiprop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_pre = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_pta = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_reassoc = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_scev_cprop = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_sink = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_slp_vectorize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_slsr = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_sra = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_switch_conversion = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_tail_merge = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_ter = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_vectorize = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_tree_vrp = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_auto_var_init = (enum auto_init_type ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unconstrained_commons = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unroll_all_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_cunroll_grow_size = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unroll_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unsafe_math_optimizations = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unswitch_loops = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_unwind_tables = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_var_tracking = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_var_tracking_assignments = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_var_tracking_assignments_toggle = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_var_tracking_uninit = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_variable_expansion_in_unroller = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_vect_cost_model = (enum vect_cost_model ) bp_unpack_var_len_int (bp);
  ptr->x_flag_version_loops_for_strides = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_value_profile_transformations = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_web = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_wrapv = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_flag_wrapv_pointer = (signed char ) bp_unpack_var_len_int (bp);
  ptr->x_debug_nonbind_markers_p = (signed char ) bp_unpack_var_len_int (bp);
  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)
    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);
}
/* Free heap memory used by optimization options  */
void
cl_optimization_option_free (struct cl_optimization *ptr ATTRIBUTE_UNUSED)
{
  if (ptr->x_str_align_functions)
    free (const_cast <char *>(ptr->x_str_align_functions));
  if (ptr->x_str_align_jumps)
    free (const_cast <char *>(ptr->x_str_align_jumps));
  if (ptr->x_str_align_labels)
    free (const_cast <char *>(ptr->x_str_align_labels));
  if (ptr->x_str_align_loops)
    free (const_cast <char *>(ptr->x_str_align_loops));
  if (ptr->x_flag_patchable_function_entry)
    free (const_cast <char *>(ptr->x_flag_patchable_function_entry));
}
void
cl_optimization_compare (gcc_options *ptr1, gcc_options *ptr2)
{
  if (ptr1->x_help_flag != ptr2->x_help_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_no_sysroot_suffix != ptr2->x_no_sysroot_suffix)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_align_loop_iterations != ptr2->x_param_align_loop_iterations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_align_threshold != ptr2->x_param_align_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_bb_explosion_factor != ptr2->x_param_analyzer_bb_explosion_factor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_constraints != ptr2->x_param_analyzer_max_constraints)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_enodes_for_full_dump != ptr2->x_param_analyzer_max_enodes_for_full_dump)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_enodes_per_program_point != ptr2->x_param_analyzer_max_enodes_per_program_point)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_infeasible_edges != ptr2->x_param_analyzer_max_infeasible_edges)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_recursion_depth != ptr2->x_param_analyzer_max_recursion_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_max_svalue_depth != ptr2->x_param_analyzer_max_svalue_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_analyzer_min_snodes_for_call_summary != ptr2->x_param_analyzer_min_snodes_for_call_summary)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_globals != ptr2->x_param_asan_globals)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_protect_allocas != ptr2->x_param_asan_protect_allocas)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_instrument_reads != ptr2->x_param_asan_instrument_reads)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_instrument_writes != ptr2->x_param_asan_instrument_writes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_instrumentation_with_call_threshold != ptr2->x_param_asan_instrumentation_with_call_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_memintrin != ptr2->x_param_asan_memintrin)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_stack != ptr2->x_param_asan_stack)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_asan_use_after_return != ptr2->x_param_asan_use_after_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_avg_loop_niter != ptr2->x_param_avg_loop_niter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_avoid_fma_max_bits != ptr2->x_param_avoid_fma_max_bits)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_builtin_expect_probability != ptr2->x_param_builtin_expect_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_builtin_string_cmp_inline_length != ptr2->x_param_builtin_string_cmp_inline_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_case_values_threshold != ptr2->x_param_case_values_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_comdat_sharing_probability != ptr2->x_param_comdat_sharing_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_construct_interfere_size != ptr2->x_param_construct_interfere_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_cxx_max_namespaces_for_diagnostic_help != ptr2->x_param_cxx_max_namespaces_for_diagnostic_help)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_destruct_interfere_size != ptr2->x_param_destruct_interfere_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_dse_max_alias_queries_per_store != ptr2->x_param_dse_max_alias_queries_per_store)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_dse_max_object_size != ptr2->x_param_dse_max_object_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_early_inlining_insns != ptr2->x_param_early_inlining_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_evrp_mode != ptr2->x_param_evrp_mode)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_evrp_sparse_threshold != ptr2->x_param_evrp_sparse_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_evrp_switch_limit != ptr2->x_param_evrp_switch_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_fsm_scale_path_blocks != ptr2->x_param_fsm_scale_path_blocks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_fsm_scale_path_stmts != ptr2->x_param_fsm_scale_path_stmts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_gcse_after_reload_critical_fraction != ptr2->x_param_gcse_after_reload_critical_fraction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_gcse_after_reload_partial_fraction != ptr2->x_param_gcse_after_reload_partial_fraction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_gcse_cost_distance_ratio != ptr2->x_param_gcse_cost_distance_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_gcse_unrestricted_cost != ptr2->x_param_gcse_unrestricted_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ggc_min_expand != ptr2->x_param_ggc_min_expand)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ggc_min_heapsize != ptr2->x_param_ggc_min_heapsize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_gimple_fe_computed_hot_bb_threshold != ptr2->x_param_gimple_fe_computed_hot_bb_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_graphite_allow_codegen_errors != ptr2->x_param_graphite_allow_codegen_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_graphite_max_arrays_per_scop != ptr2->x_param_graphite_max_arrays_per_scop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_graphite_max_nb_scop_params != ptr2->x_param_graphite_max_nb_scop_params)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hash_table_verification_limit != ptr2->x_param_hash_table_verification_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hot_bb_count_fraction != ptr2->x_param_hot_bb_count_fraction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hot_bb_count_ws_permille != ptr2->x_param_hot_bb_count_ws_permille)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hot_bb_frequency_fraction != ptr2->x_param_hot_bb_frequency_fraction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_instrument_allocas != ptr2->x_param_hwasan_instrument_allocas)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_instrument_mem_intrinsics != ptr2->x_param_hwasan_instrument_mem_intrinsics)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_instrument_reads != ptr2->x_param_hwasan_instrument_reads)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_instrument_stack != ptr2->x_param_hwasan_instrument_stack)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_instrument_writes != ptr2->x_param_hwasan_instrument_writes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_hwasan_random_frame_tag != ptr2->x_param_hwasan_random_frame_tag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_inline_heuristics_hint_percent != ptr2->x_param_inline_heuristics_hint_percent)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_inline_min_speedup != ptr2->x_param_inline_min_speedup)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_inline_unit_growth != ptr2->x_param_inline_unit_growth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_integer_share_limit != ptr2->x_param_integer_share_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_eval_threshold != ptr2->x_param_ipa_cp_eval_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_large_unit_insns != ptr2->x_param_ipa_cp_large_unit_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_loop_hint_bonus != ptr2->x_param_ipa_cp_loop_hint_bonus)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_max_recursive_depth != ptr2->x_param_ipa_cp_max_recursive_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_min_recursive_probability != ptr2->x_param_ipa_cp_min_recursive_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_profile_count_base != ptr2->x_param_ipa_cp_profile_count_base)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_recursion_penalty != ptr2->x_param_ipa_cp_recursion_penalty)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_recursive_freq_factor != ptr2->x_param_ipa_cp_recursive_freq_factor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_single_call_penalty != ptr2->x_param_ipa_cp_single_call_penalty)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_unit_growth != ptr2->x_param_ipa_cp_unit_growth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_cp_value_list_size != ptr2->x_param_ipa_cp_value_list_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_jump_function_lookups != ptr2->x_param_ipa_jump_function_lookups)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_max_aa_steps != ptr2->x_param_ipa_max_aa_steps)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_max_agg_items != ptr2->x_param_ipa_max_agg_items)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_max_loop_predicates != ptr2->x_param_ipa_max_loop_predicates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_max_param_expr_ops != ptr2->x_param_ipa_max_param_expr_ops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_max_switch_predicate_bounds != ptr2->x_param_ipa_max_switch_predicate_bounds)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_sra_max_replacements != ptr2->x_param_ipa_sra_max_replacements)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ipa_sra_ptr_growth_factor != ptr2->x_param_ipa_sra_ptr_growth_factor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ira_consider_dup_in_all_alts != ptr2->x_param_ira_consider_dup_in_all_alts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ira_loop_reserved_regs != ptr2->x_param_ira_loop_reserved_regs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ira_max_conflict_table_size != ptr2->x_param_ira_max_conflict_table_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ira_max_loops_num != ptr2->x_param_ira_max_loops_num)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_iv_always_prune_cand_set_bound != ptr2->x_param_iv_always_prune_cand_set_bound)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_iv_consider_all_candidates_bound != ptr2->x_param_iv_consider_all_candidates_bound)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_iv_max_considered_uses != ptr2->x_param_iv_max_considered_uses)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_jump_table_max_growth_ratio_for_size != ptr2->x_param_jump_table_max_growth_ratio_for_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_jump_table_max_growth_ratio_for_speed != ptr2->x_param_jump_table_max_growth_ratio_for_speed)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_l1_cache_line_size != ptr2->x_param_l1_cache_line_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_l1_cache_size != ptr2->x_param_l1_cache_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_l2_cache_size != ptr2->x_param_l2_cache_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_large_function_growth != ptr2->x_param_large_function_growth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_large_function_insns != ptr2->x_param_large_function_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_stack_frame_growth != ptr2->x_param_stack_frame_growth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_large_stack_frame != ptr2->x_param_large_stack_frame)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_large_unit_insns != ptr2->x_param_large_unit_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_lazy_modules != ptr2->x_param_lazy_modules)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_lim_expensive != ptr2->x_param_lim_expensive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_logical_op_non_short_circuit != ptr2->x_param_logical_op_non_short_circuit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_block_tile_size != ptr2->x_param_loop_block_tile_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_interchange_max_num_stmts != ptr2->x_param_loop_interchange_max_num_stmts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_interchange_stride_ratio != ptr2->x_param_loop_interchange_stride_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_invariant_max_bbs_in_loop != ptr2->x_param_loop_invariant_max_bbs_in_loop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_max_datarefs_for_datadeps != ptr2->x_param_loop_max_datarefs_for_datadeps)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_versioning_max_inner_insns != ptr2->x_param_loop_versioning_max_inner_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_loop_versioning_max_outer_insns != ptr2->x_param_loop_versioning_max_outer_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_lra_inheritance_ebb_probability_cutoff != ptr2->x_param_lra_inheritance_ebb_probability_cutoff)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_lra_max_considered_reload_pseudos != ptr2->x_param_lra_max_considered_reload_pseudos)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_partition_size != ptr2->x_param_max_partition_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_lto_streaming_parallelism != ptr2->x_param_max_lto_streaming_parallelism)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_partition_size != ptr2->x_param_min_partition_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_lto_partitions != ptr2->x_param_lto_partitions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_average_unrolled_insns != ptr2->x_param_max_average_unrolled_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_combine_insns != ptr2->x_param_max_combine_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_unroll_iterations != ptr2->x_param_max_unroll_iterations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_completely_peel_times != ptr2->x_param_max_completely_peel_times)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_completely_peeled_insns != ptr2->x_param_max_completely_peeled_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_crossjump_edges != ptr2->x_param_max_crossjump_edges)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_cse_insns != ptr2->x_param_max_cse_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_cse_path_length != ptr2->x_param_max_cse_path_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_cselib_memory_locations != ptr2->x_param_max_cselib_memory_locations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_debug_marker_count != ptr2->x_param_max_debug_marker_count)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_delay_slot_insn_search != ptr2->x_param_max_delay_slot_insn_search)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_delay_slot_live_search != ptr2->x_param_max_delay_slot_live_search)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_dse_active_local_stores != ptr2->x_param_max_dse_active_local_stores)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_early_inliner_max_iterations != ptr2->x_param_early_inliner_max_iterations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_find_base_term_values != ptr2->x_param_max_find_base_term_values)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_fsm_thread_length != ptr2->x_param_max_fsm_thread_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_fsm_thread_path_insns != ptr2->x_param_max_fsm_thread_path_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_gcse_insertion_ratio != ptr2->x_param_max_gcse_insertion_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_gcse_memory != ptr2->x_param_max_gcse_memory)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_goto_duplication_insns != ptr2->x_param_max_goto_duplication_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_grow_copy_bb_insns != ptr2->x_param_max_grow_copy_bb_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_hoist_depth != ptr2->x_param_max_hoist_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_inline_functions_called_once_insns != ptr2->x_param_inline_functions_called_once_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_inline_functions_called_once_loop_depth != ptr2->x_param_inline_functions_called_once_loop_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_auto != ptr2->x_param_max_inline_insns_auto)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_recursive_auto != ptr2->x_param_max_inline_insns_recursive_auto)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_recursive != ptr2->x_param_max_inline_insns_recursive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_single != ptr2->x_param_max_inline_insns_single)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_size != ptr2->x_param_max_inline_insns_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_insns_small != ptr2->x_param_max_inline_insns_small)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_recursive_depth_auto != ptr2->x_param_max_inline_recursive_depth_auto)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_inline_recursive_depth != ptr2->x_param_max_inline_recursive_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_isl_operations != ptr2->x_param_max_isl_operations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_iterations_computation_cost != ptr2->x_param_max_iterations_computation_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_iterations_to_track != ptr2->x_param_max_iterations_to_track)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_jump_thread_duplication_stmts != ptr2->x_param_max_jump_thread_duplication_stmts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_last_value_rtl != ptr2->x_param_max_last_value_rtl)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_loop_header_insns != ptr2->x_param_max_loop_header_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_modulo_backtrack_attempts != ptr2->x_param_max_modulo_backtrack_attempts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_partial_antic_length != ptr2->x_param_max_partial_antic_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_peel_branches != ptr2->x_param_max_peel_branches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_peel_times != ptr2->x_param_max_peel_times)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_peeled_insns != ptr2->x_param_max_peeled_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_pending_list_length != ptr2->x_param_max_pending_list_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_pipeline_region_blocks != ptr2->x_param_max_pipeline_region_blocks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_pipeline_region_insns != ptr2->x_param_max_pipeline_region_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_pow_sqrt_depth != ptr2->x_param_max_pow_sqrt_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_predicted_iterations != ptr2->x_param_max_predicted_iterations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_reload_search_insns != ptr2->x_param_max_reload_search_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_rtl_if_conversion_insns != ptr2->x_param_max_rtl_if_conversion_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_rtl_if_conversion_predictable_cost != ptr2->x_param_max_rtl_if_conversion_predictable_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_rtl_if_conversion_unpredictable_cost != ptr2->x_param_max_rtl_if_conversion_unpredictable_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_sched_extend_regions_iters != ptr2->x_param_max_sched_extend_regions_iters)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_sched_insn_conflict_delay != ptr2->x_param_max_sched_insn_conflict_delay)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_sched_ready_insns != ptr2->x_param_max_sched_ready_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_sched_region_blocks != ptr2->x_param_max_sched_region_blocks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_sched_region_insns != ptr2->x_param_max_sched_region_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_slsr_candidate_scan != ptr2->x_param_max_slsr_candidate_scan)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_speculative_devirt_maydefs != ptr2->x_param_max_speculative_devirt_maydefs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_ssa_name_query_depth != ptr2->x_param_max_ssa_name_query_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_store_chains_to_track != ptr2->x_param_max_store_chains_to_track)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_stores_to_merge != ptr2->x_param_max_stores_to_merge)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_stores_to_sink != ptr2->x_param_max_stores_to_sink)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_stores_to_track != ptr2->x_param_max_stores_to_track)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_tail_merge_comparisons != ptr2->x_param_max_tail_merge_comparisons)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_tail_merge_iterations != ptr2->x_param_max_tail_merge_iterations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_tracked_strlens != ptr2->x_param_max_tracked_strlens)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_tree_if_conversion_phi_args != ptr2->x_param_max_tree_if_conversion_phi_args)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_unroll_times != ptr2->x_param_max_unroll_times)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_unrolled_insns != ptr2->x_param_max_unrolled_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_unswitch_insns != ptr2->x_param_max_unswitch_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_variable_expansions != ptr2->x_param_max_variable_expansions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_vartrack_expr_depth != ptr2->x_param_max_vartrack_expr_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_vartrack_reverse_op_size != ptr2->x_param_max_vartrack_reverse_op_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_vartrack_size != ptr2->x_param_max_vartrack_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_max_vrp_switch_assertions != ptr2->x_param_max_vrp_switch_assertions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_crossjump_insns != ptr2->x_param_min_crossjump_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_inline_recursive_probability != ptr2->x_param_min_inline_recursive_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_insn_to_prefetch_ratio != ptr2->x_param_min_insn_to_prefetch_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_loop_cond_split_prob != ptr2->x_param_min_loop_cond_split_prob)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_nondebug_insn_uid != ptr2->x_param_min_nondebug_insn_uid)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_pagesize != ptr2->x_param_min_pagesize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_size_for_stack_sharing != ptr2->x_param_min_size_for_stack_sharing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_spec_prob != ptr2->x_param_min_spec_prob)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_min_vect_loop_bound != ptr2->x_param_min_vect_loop_bound)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_accesses != ptr2->x_param_modref_max_accesses)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_adjustments != ptr2->x_param_modref_max_adjustments)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_bases != ptr2->x_param_modref_max_bases)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_depth != ptr2->x_param_modref_max_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_escape_points != ptr2->x_param_modref_max_escape_points)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_refs != ptr2->x_param_modref_max_refs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_modref_max_tests != ptr2->x_param_modref_max_tests)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_openacc_kernels != ptr2->x_param_openacc_kernels)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_openacc_privatization != ptr2->x_param_openacc_privatization)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_parloops_chunk_size != ptr2->x_param_parloops_chunk_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_parloops_min_per_thread != ptr2->x_param_parloops_min_per_thread)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_parloops_schedule != ptr2->x_param_parloops_schedule)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_partial_inlining_entry_probability != ptr2->x_param_partial_inlining_entry_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_predictable_branch_outcome != ptr2->x_param_predictable_branch_outcome)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_prefetch_dynamic_strides != ptr2->x_param_prefetch_dynamic_strides)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_prefetch_latency != ptr2->x_param_prefetch_latency)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_prefetch_min_insn_to_mem_ratio != ptr2->x_param_prefetch_min_insn_to_mem_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_prefetch_minimum_stride != ptr2->x_param_prefetch_minimum_stride)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_profile_func_internal_id != ptr2->x_param_profile_func_internal_id)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ranger_debug != ptr2->x_param_ranger_debug)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ranger_logical_depth != ptr2->x_param_ranger_logical_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_relation_block_limit != ptr2->x_param_relation_block_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_rpo_vn_max_loop_depth != ptr2->x_param_rpo_vn_max_loop_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sccvn_max_alias_queries_per_access != ptr2->x_param_sccvn_max_alias_queries_per_access)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_scev_max_expr_complexity != ptr2->x_param_scev_max_expr_complexity)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_scev_max_expr_size != ptr2->x_param_scev_max_expr_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sched_autopref_queue_depth != ptr2->x_param_sched_autopref_queue_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sched_mem_true_dep_cost != ptr2->x_param_sched_mem_true_dep_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sched_pressure_algorithm != ptr2->x_param_sched_pressure_algorithm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sched_spec_prob_cutoff != ptr2->x_param_sched_spec_prob_cutoff)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sched_state_edge_prob_cutoff != ptr2->x_param_sched_state_edge_prob_cutoff)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_selsched_insns_to_rename != ptr2->x_param_selsched_insns_to_rename)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_selsched_max_lookahead != ptr2->x_param_selsched_max_lookahead)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_selsched_max_sched_times != ptr2->x_param_selsched_max_sched_times)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_simultaneous_prefetches != ptr2->x_param_simultaneous_prefetches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sink_frequency_threshold != ptr2->x_param_sink_frequency_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sms_dfa_history != ptr2->x_param_sms_dfa_history)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sms_loop_average_count_threshold != ptr2->x_param_sms_loop_average_count_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sms_max_ii_factor != ptr2->x_param_sms_max_ii_factor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sms_min_sc != ptr2->x_param_sms_min_sc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sra_max_propagations != ptr2->x_param_sra_max_propagations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sra_max_scalarization_size_size != ptr2->x_param_sra_max_scalarization_size_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_sra_max_scalarization_size_speed != ptr2->x_param_sra_max_scalarization_size_speed)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ssa_name_def_chain_limit != ptr2->x_param_ssa_name_def_chain_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_ssp_buffer_size != ptr2->x_param_ssp_buffer_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_stack_clash_protection_guard_size != ptr2->x_param_stack_clash_protection_guard_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_stack_clash_protection_probe_interval != ptr2->x_param_stack_clash_protection_probe_interval)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_store_merging_allow_unaligned != ptr2->x_param_store_merging_allow_unaligned)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_store_merging_max_size != ptr2->x_param_store_merging_max_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_switch_conversion_branch_ratio != ptr2->x_param_switch_conversion_branch_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_threader_debug != ptr2->x_param_threader_debug)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tm_max_aggregate_size != ptr2->x_param_tm_max_aggregate_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_dynamic_coverage_feedback != ptr2->x_param_tracer_dynamic_coverage_feedback)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_dynamic_coverage != ptr2->x_param_tracer_dynamic_coverage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_max_code_growth != ptr2->x_param_tracer_max_code_growth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_min_branch_probability_feedback != ptr2->x_param_tracer_min_branch_probability_feedback)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_min_branch_probability != ptr2->x_param_tracer_min_branch_probability)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tracer_min_branch_ratio != ptr2->x_param_tracer_min_branch_ratio)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tree_reassoc_width != ptr2->x_param_tree_reassoc_width)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tsan_distinguish_volatile != ptr2->x_param_tsan_distinguish_volatile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_tsan_instrument_func_entry_exit != ptr2->x_param_tsan_instrument_func_entry_exit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_uninit_control_dep_attempts != ptr2->x_param_uninit_control_dep_attempts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_uninlined_function_insns != ptr2->x_param_uninlined_function_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_uninlined_function_time != ptr2->x_param_uninlined_function_time)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_uninlined_function_thunk_insns != ptr2->x_param_uninlined_function_thunk_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_uninlined_function_thunk_time != ptr2->x_param_uninlined_function_thunk_time)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_unlikely_bb_count_fraction != ptr2->x_param_unlikely_bb_count_fraction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_unroll_jam_max_unroll != ptr2->x_param_unroll_jam_max_unroll)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_unroll_jam_min_percent != ptr2->x_param_unroll_jam_min_percent)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_use_after_scope_direct_emission_threshold != ptr2->x_param_use_after_scope_direct_emission_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_use_canonical_types != ptr2->x_param_use_canonical_types)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_epilogues_nomask != ptr2->x_param_vect_epilogues_nomask)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_induction_float != ptr2->x_param_vect_induction_float)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_inner_loop_cost_factor != ptr2->x_param_vect_inner_loop_cost_factor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_max_peeling_for_alignment != ptr2->x_param_vect_max_peeling_for_alignment)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_max_version_for_alias_checks != ptr2->x_param_vect_max_version_for_alias_checks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_max_version_for_alignment_checks != ptr2->x_param_vect_max_version_for_alignment_checks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vect_partial_vector_usage != ptr2->x_param_vect_partial_vector_usage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vrp1_mode != ptr2->x_param_vrp1_mode)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_param_vrp2_mode != ptr2->x_param_vrp2_mode)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_x86_stlf_window_ninsns != ptr2->x_x86_stlf_window_ninsns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_preprocess_only != ptr2->x_flag_preprocess_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nsobject_attribute != ptr2->x_warn_nsobject_attribute)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_abi != ptr2->x_warn_abi)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_abi_tag != ptr2->x_warn_abi_tag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_absolute_value != ptr2->x_warn_absolute_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_address != ptr2->x_warn_address)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_address_of_packed_member != ptr2->x_warn_address_of_packed_member)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_aggregate_return != ptr2->x_warn_aggregate_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_aggressive_loop_optimizations != ptr2->x_warn_aggressive_loop_optimizations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_aliasing != ptr2->x_warn_aliasing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_align_commons != ptr2->x_warn_align_commons)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_aligned_new != ptr2->x_warn_aligned_new)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_alloc_size_limit != ptr2->x_warn_alloc_size_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_alloc_zero != ptr2->x_warn_alloc_zero)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_alloca != ptr2->x_warn_alloca)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_alloca_limit != ptr2->x_warn_alloca_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ampersand != ptr2->x_warn_ampersand)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_double_fclose != ptr2->x_warn_analyzer_double_fclose)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_double_free != ptr2->x_warn_analyzer_double_free)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_exposure_through_output_file != ptr2->x_warn_analyzer_exposure_through_output_file)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_file_leak != ptr2->x_warn_analyzer_file_leak)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_free_of_non_heap != ptr2->x_warn_analyzer_free_of_non_heap)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_malloc_leak != ptr2->x_warn_analyzer_malloc_leak)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_mismatching_deallocation != ptr2->x_warn_analyzer_mismatching_deallocation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_null_argument != ptr2->x_warn_analyzer_null_argument)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_null_dereference != ptr2->x_warn_analyzer_null_dereference)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_possible_null_argument != ptr2->x_warn_analyzer_possible_null_argument)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_possible_null_dereference != ptr2->x_warn_analyzer_possible_null_dereference)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_shift_count_negative != ptr2->x_warn_analyzer_shift_count_negative)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_shift_count_overflow != ptr2->x_warn_analyzer_shift_count_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_stale_setjmp_buffer != ptr2->x_warn_analyzer_stale_setjmp_buffer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_tainted_allocation_size != ptr2->x_warn_analyzer_tainted_allocation_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_tainted_array_index != ptr2->x_warn_analyzer_tainted_array_index)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_tainted_divisor != ptr2->x_warn_analyzer_tainted_divisor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_tainted_offset != ptr2->x_warn_analyzer_tainted_offset)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_tainted_size != ptr2->x_warn_analyzer_tainted_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_too_complex != ptr2->x_warn_analyzer_too_complex)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_unsafe_call_within_signal_handler != ptr2->x_warn_analyzer_unsafe_call_within_signal_handler)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_use_after_free != ptr2->x_warn_analyzer_use_after_free)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_use_of_pointer_in_stale_stack_frame != ptr2->x_warn_analyzer_use_of_pointer_in_stale_stack_frame)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_use_of_uninitialized_value != ptr2->x_warn_analyzer_use_of_uninitialized_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_va_arg_type_mismatch != ptr2->x_warn_analyzer_va_arg_type_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_va_list_exhausted != ptr2->x_warn_analyzer_va_list_exhausted)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_va_list_leak != ptr2->x_warn_analyzer_va_list_leak)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_va_list_use_after_va_end != ptr2->x_warn_analyzer_va_list_use_after_va_end)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_write_to_const != ptr2->x_warn_analyzer_write_to_const)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_analyzer_write_to_string_literal != ptr2->x_warn_analyzer_write_to_string_literal)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_arith_conv != ptr2->x_warn_arith_conv)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_array_bounds != ptr2->x_warn_array_bounds)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_array_compare != ptr2->x_warn_array_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_array_parameter != ptr2->x_warn_array_parameter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_array_temporaries != ptr2->x_warn_array_temporaries)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_assign_intercept != ptr2->x_warn_assign_intercept)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_attribute_alias != ptr2->x_warn_attribute_alias)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_attribute_warning != ptr2->x_warn_attribute_warning)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_attributes != ptr2->x_warn_attributes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_bad_function_cast != ptr2->x_warn_bad_function_cast)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_bidirectional != ptr2->x_warn_bidirectional)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_bool_compare != ptr2->x_warn_bool_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_bool_op != ptr2->x_warn_bool_op)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_builtin_declaration_mismatch != ptr2->x_warn_builtin_declaration_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_builtin_macro_redefined != ptr2->x_cpp_warn_builtin_macro_redefined)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx_compat != ptr2->x_warn_cxx_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx11_compat != ptr2->x_warn_cxx11_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx11_extensions != ptr2->x_warn_cxx11_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx14_compat != ptr2->x_warn_cxx14_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx14_extensions != ptr2->x_warn_cxx14_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx17_compat != ptr2->x_warn_cxx17_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx17_extensions != ptr2->x_warn_cxx17_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx20_compat != ptr2->x_warn_cxx20_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx20_extensions != ptr2->x_warn_cxx20_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cxx23_extensions != ptr2->x_warn_cxx23_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_c_binding_type != ptr2->x_warn_c_binding_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_c11_c2x_compat != ptr2->x_warn_c11_c2x_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_c90_c99_compat != ptr2->x_warn_c90_c99_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_c99_c11_compat != ptr2->x_warn_c99_c11_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cannot_profile != ptr2->x_warn_cannot_profile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cast_align != ptr2->x_warn_cast_align)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cast_function_type != ptr2->x_warn_cast_function_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cast_qual != ptr2->x_warn_cast_qual)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cast_result != ptr2->x_warn_cast_result)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_catch_value != ptr2->x_warn_catch_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_char_subscripts != ptr2->x_warn_char_subscripts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_character_truncation != ptr2->x_warn_character_truncation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_class_conversion != ptr2->x_warn_class_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_class_memaccess != ptr2->x_warn_class_memaccess)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_clobbered != ptr2->x_warn_clobbered)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_comma_subscript != ptr2->x_warn_comma_subscript)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_comment != ptr2->x_cpp_warn_comment)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_compare_reals != ptr2->x_warn_compare_reals)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_conditionally_supported != ptr2->x_warn_conditionally_supported)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_conversion != ptr2->x_warn_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_conversion_extra != ptr2->x_warn_conversion_extra)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_conversion_null != ptr2->x_warn_conversion_null)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_coverage_invalid_linenum != ptr2->x_warn_coverage_invalid_linenum)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_coverage_mismatch != ptr2->x_warn_coverage_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_cpp != ptr2->x_warn_cpp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ctad_maybe_unsupported != ptr2->x_warn_ctad_maybe_unsupported)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ctor_dtor_privacy != ptr2->x_warn_ctor_dtor_privacy)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_dangling_else != ptr2->x_warn_dangling_else)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_dangling_pointer != ptr2->x_warn_dangling_pointer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_date_time != ptr2->x_cpp_warn_date_time)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_declaration_after_statement != ptr2->x_warn_declaration_after_statement)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_delete_incomplete != ptr2->x_warn_delete_incomplete)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_delnonvdtor != ptr2->x_warn_delnonvdtor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_deprecated != ptr2->x_warn_deprecated)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_deprecated_copy != ptr2->x_warn_deprecated_copy)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_deprecated_decl != ptr2->x_warn_deprecated_decl)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_deprecated_enum_enum_conv != ptr2->x_warn_deprecated_enum_enum_conv)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_deprecated_enum_float_conv != ptr2->x_warn_deprecated_enum_float_conv)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_designated_init != ptr2->x_warn_designated_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_disabled_optimization != ptr2->x_warn_disabled_optimization)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_discarded_array_qualifiers != ptr2->x_warn_discarded_array_qualifiers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_discarded_qualifiers != ptr2->x_warn_discarded_qualifiers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_div_by_zero != ptr2->x_warn_div_by_zero)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_do_subscript != ptr2->x_warn_do_subscript)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_double_promotion != ptr2->x_warn_double_promotion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_duplicate_decl_specifier != ptr2->x_warn_duplicate_decl_specifier)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_duplicated_branches != ptr2->x_warn_duplicated_branches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_duplicated_cond != ptr2->x_warn_duplicated_cond)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ecpp != ptr2->x_warn_ecpp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_empty_body != ptr2->x_warn_empty_body)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_endif_labels != ptr2->x_cpp_warn_endif_labels)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_enum_compare != ptr2->x_warn_enum_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_enum_conversion != ptr2->x_warn_enum_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_enum_int_mismatch != ptr2->x_warn_enum_int_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warnings_are_errors != ptr2->x_warnings_are_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_exceptions != ptr2->x_warn_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_expansion_to_defined != ptr2->x_cpp_warn_expansion_to_defined)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_extra_warnings != ptr2->x_extra_warnings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_extra_semi != ptr2->x_warn_extra_semi)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fatal_errors != ptr2->x_flag_fatal_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_float_conversion != ptr2->x_warn_float_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_float_equal != ptr2->x_warn_float_equal)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_contains_nul != ptr2->x_warn_format_contains_nul)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_diag != ptr2->x_warn_format_diag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_extra_args != ptr2->x_warn_format_extra_args)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_nonliteral != ptr2->x_warn_format_nonliteral)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_overflow != ptr2->x_warn_format_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_security != ptr2->x_warn_format_security)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_signedness != ptr2->x_warn_format_signedness)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_trunc != ptr2->x_warn_format_trunc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_y2k != ptr2->x_warn_format_y2k)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format_zero_length != ptr2->x_warn_format_zero_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_format != ptr2->x_warn_format)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_frame_address != ptr2->x_warn_frame_address)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_frame_larger_than_size != ptr2->x_warn_frame_larger_than_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_free_nonheap_object != ptr2->x_warn_free_nonheap_object)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_warn_frontend_loop_interchange != ptr2->x_flag_warn_frontend_loop_interchange)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_function_elimination != ptr2->x_warn_function_elimination)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_if_not_aligned != ptr2->x_warn_if_not_aligned)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ignored_attributes != ptr2->x_warn_ignored_attributes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_ignored_qualifiers != ptr2->x_warn_ignored_qualifiers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit != ptr2->x_warn_implicit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit_fallthrough != ptr2->x_warn_implicit_fallthrough)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit_function_declaration != ptr2->x_warn_implicit_function_declaration)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit_int != ptr2->x_warn_implicit_int)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit_interface != ptr2->x_warn_implicit_interface)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_implicit_procedure != ptr2->x_warn_implicit_procedure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_inaccessible_base != ptr2->x_warn_inaccessible_base)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_incompatible_pointer_types != ptr2->x_warn_incompatible_pointer_types)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_infinite_recursion != ptr2->x_warn_infinite_recursion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_inh_var_ctor != ptr2->x_warn_inh_var_ctor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_init_list != ptr2->x_warn_init_list)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_init_self != ptr2->x_warn_init_self)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_inline != ptr2->x_warn_inline)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_int_conversion != ptr2->x_warn_int_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_int_in_bool_context != ptr2->x_warn_int_in_bool_context)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_int_to_pointer_cast != ptr2->x_warn_int_to_pointer_cast)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_integer_division != ptr2->x_warn_integer_division)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_interference_size != ptr2->x_warn_interference_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_intrinsic_shadow != ptr2->x_warn_intrinsic_shadow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_intrinsics_std != ptr2->x_warn_intrinsics_std)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_imported_macros != ptr2->x_warn_imported_macros)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_invalid_memory_model != ptr2->x_warn_invalid_memory_model)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_invalid_offsetof != ptr2->x_warn_invalid_offsetof)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_invalid_pch != ptr2->x_cpp_warn_invalid_pch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_jump_misses_init != ptr2->x_warn_jump_misses_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_larger_than_size != ptr2->x_warn_larger_than_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_line_truncation != ptr2->x_warn_line_truncation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_literal_suffix != ptr2->x_cpp_warn_literal_suffix)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_logical_not_paren != ptr2->x_warn_logical_not_paren)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_logical_op != ptr2->x_warn_logical_op)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_long_long != ptr2->x_warn_long_long)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_lto_type_mismatch != ptr2->x_warn_lto_type_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_main != ptr2->x_warn_main)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_maybe_uninitialized != ptr2->x_warn_maybe_uninitialized)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_memset_elt_size != ptr2->x_warn_memset_elt_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_memset_transposed_args != ptr2->x_warn_memset_transposed_args)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_misleading_indentation != ptr2->x_warn_misleading_indentation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_mismatched_alloc != ptr2->x_warn_mismatched_alloc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_mismatched_new_delete != ptr2->x_warn_mismatched_new_delete)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_mismatched_tags != ptr2->x_warn_mismatched_tags)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_attributes != ptr2->x_warn_missing_attributes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_braces != ptr2->x_warn_missing_braces)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_declarations != ptr2->x_warn_missing_declarations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_field_initializers != ptr2->x_warn_missing_field_initializers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_missing_include_dirs != ptr2->x_cpp_warn_missing_include_dirs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_parameter_type != ptr2->x_warn_missing_parameter_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_profile != ptr2->x_warn_missing_profile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_prototypes != ptr2->x_warn_missing_prototypes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_requires != ptr2->x_warn_missing_requires)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_missing_template_keyword != ptr2->x_warn_missing_template_keyword)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_multichar != ptr2->x_cpp_warn_multichar)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_multiple_inheritance != ptr2->x_warn_multiple_inheritance)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_multistatement_macros != ptr2->x_warn_multistatement_macros)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_namespaces != ptr2->x_warn_namespaces)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_narrowing != ptr2->x_warn_narrowing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nested_externs != ptr2->x_warn_nested_externs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_noexcept != ptr2->x_warn_noexcept)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_noexcept_type != ptr2->x_warn_noexcept_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nontemplate_friend != ptr2->x_warn_nontemplate_friend)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nonvdtor != ptr2->x_warn_nonvdtor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nonnull != ptr2->x_warn_nonnull)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_nonnull_compare != ptr2->x_warn_nonnull_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_normalize != ptr2->x_cpp_warn_normalize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_null_dereference != ptr2->x_warn_null_dereference)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_objc_root_class != ptr2->x_warn_objc_root_class)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_odr_violations != ptr2->x_warn_odr_violations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_old_style_cast != ptr2->x_warn_old_style_cast)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_old_style_declaration != ptr2->x_warn_old_style_declaration)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_old_style_definition != ptr2->x_warn_old_style_definition)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_openacc_parallelism != ptr2->x_warn_openacc_parallelism)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_openmp_simd != ptr2->x_warn_openmp_simd)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_overflow != ptr2->x_warn_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_overlength_strings != ptr2->x_warn_overlength_strings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_overloaded_virtual != ptr2->x_warn_overloaded_virtual)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_override_init != ptr2->x_warn_override_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_override_init_side_effects != ptr2->x_warn_override_init_side_effects)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_overwrite_recursive != ptr2->x_warn_overwrite_recursive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_packed != ptr2->x_warn_packed)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_packed_bitfield_compat != ptr2->x_warn_packed_bitfield_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_packed_not_aligned != ptr2->x_warn_packed_not_aligned)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_padded != ptr2->x_warn_padded)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_parentheses != ptr2->x_warn_parentheses)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_pedantic != ptr2->x_pedantic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pessimizing_move != ptr2->x_warn_pessimizing_move)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_placement_new != ptr2->x_warn_placement_new)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pmf2ptr != ptr2->x_warn_pmf2ptr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pointer_arith != ptr2->x_warn_pointer_arith)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pointer_compare != ptr2->x_warn_pointer_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pointer_sign != ptr2->x_warn_pointer_sign)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pointer_to_int_cast != ptr2->x_warn_pointer_to_int_cast)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_pragmas != ptr2->x_warn_pragmas)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_prio_ctor_dtor != ptr2->x_warn_prio_ctor_dtor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_property_assign_default != ptr2->x_warn_property_assign_default)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_protocol != ptr2->x_warn_protocol)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_psabi != ptr2->x_warn_psabi)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_range_loop_construct != ptr2->x_warn_range_loop_construct)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_real_q_constant != ptr2->x_warn_real_q_constant)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_realloc_lhs != ptr2->x_warn_realloc_lhs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_realloc_lhs_all != ptr2->x_warn_realloc_lhs_all)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_redundant_decls != ptr2->x_warn_redundant_decls)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_redundant_move != ptr2->x_warn_redundant_move)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_redundant_tags != ptr2->x_warn_redundant_tags)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_register != ptr2->x_warn_register)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_reorder != ptr2->x_warn_reorder)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_restrict != ptr2->x_warn_restrict)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_return_local_addr != ptr2->x_warn_return_local_addr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_return_type != ptr2->x_warn_return_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_scalar_storage_order != ptr2->x_warn_scalar_storage_order)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_selector != ptr2->x_warn_selector)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sequence_point != ptr2->x_warn_sequence_point)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shadow != ptr2->x_warn_shadow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shadow_ivar != ptr2->x_warn_shadow_ivar)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shadow_compatible_local != ptr2->x_warn_shadow_compatible_local)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shadow_local != ptr2->x_warn_shadow_local)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shift_count_negative != ptr2->x_warn_shift_count_negative)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shift_count_overflow != ptr2->x_warn_shift_count_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shift_negative_value != ptr2->x_warn_shift_negative_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_shift_overflow != ptr2->x_warn_shift_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sign_compare != ptr2->x_warn_sign_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sign_conversion != ptr2->x_warn_sign_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sign_promo != ptr2->x_warn_sign_promo)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sized_deallocation != ptr2->x_warn_sized_deallocation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sizeof_array_argument != ptr2->x_warn_sizeof_array_argument)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sizeof_array_div != ptr2->x_warn_sizeof_array_div)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sizeof_pointer_div != ptr2->x_warn_sizeof_pointer_div)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sizeof_pointer_memaccess != ptr2->x_warn_sizeof_pointer_memaccess)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_stack_protect != ptr2->x_warn_stack_protect)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_stack_usage != ptr2->x_warn_stack_usage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_strict_aliasing != ptr2->x_warn_strict_aliasing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_strict_null_sentinel != ptr2->x_warn_strict_null_sentinel)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_strict_overflow != ptr2->x_warn_strict_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_strict_prototypes != ptr2->x_warn_strict_prototypes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_strict_selector_match != ptr2->x_warn_strict_selector_match)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_string_compare != ptr2->x_warn_string_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_stringop_overflow != ptr2->x_warn_stringop_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_stringop_overread != ptr2->x_warn_stringop_overread)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_stringop_truncation != ptr2->x_warn_stringop_truncation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_subobject_linkage != ptr2->x_warn_subobject_linkage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_cold != ptr2->x_warn_suggest_attribute_cold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_const != ptr2->x_warn_suggest_attribute_const)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_format != ptr2->x_warn_suggest_attribute_format)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_malloc != ptr2->x_warn_suggest_attribute_malloc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_noreturn != ptr2->x_warn_suggest_attribute_noreturn)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_attribute_pure != ptr2->x_warn_suggest_attribute_pure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_final_methods != ptr2->x_warn_suggest_final_methods)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_suggest_final_types != ptr2->x_warn_suggest_final_types)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_override != ptr2->x_warn_override)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_surprising != ptr2->x_warn_surprising)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch != ptr2->x_warn_switch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch_bool != ptr2->x_warn_switch_bool)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch_default != ptr2->x_warn_switch_default)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch_enum != ptr2->x_warn_switch_enum)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch_outside_range != ptr2->x_warn_switch_outside_range)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_switch_unreachable != ptr2->x_warn_switch_unreachable)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_sync_nand != ptr2->x_warn_sync_nand)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_synth != ptr2->x_warn_synth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_system_headers != ptr2->x_warn_system_headers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_tabs != ptr2->x_warn_tabs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_target_lifetime != ptr2->x_warn_target_lifetime)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_tautological_compare != ptr2->x_warn_tautological_compare)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_templates != ptr2->x_warn_templates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_terminate != ptr2->x_warn_terminate)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_traditional != ptr2->x_warn_traditional)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_traditional_conversion != ptr2->x_warn_traditional_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_trampolines != ptr2->x_warn_trampolines)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_trigraphs != ptr2->x_cpp_warn_trigraphs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_trivial_auto_var_init != ptr2->x_warn_trivial_auto_var_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_tsan != ptr2->x_warn_tsan)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_type_limits != ptr2->x_warn_type_limits)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_undeclared_selector != ptr2->x_warn_undeclared_selector)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_undef != ptr2->x_cpp_warn_undef)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_undefined_do_loop != ptr2->x_warn_undefined_do_loop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_underflow != ptr2->x_warn_underflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_uninitialized != ptr2->x_warn_uninitialized)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unknown_pragmas != ptr2->x_warn_unknown_pragmas)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unsuffixed_float_constants != ptr2->x_warn_unsuffixed_float_constants)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused != ptr2->x_warn_unused)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_but_set_parameter != ptr2->x_warn_unused_but_set_parameter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_but_set_variable != ptr2->x_warn_unused_but_set_variable)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_const_variable != ptr2->x_warn_unused_const_variable)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_dummy_argument != ptr2->x_warn_unused_dummy_argument)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_function != ptr2->x_warn_unused_function)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_label != ptr2->x_warn_unused_label)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_local_typedefs != ptr2->x_warn_unused_local_typedefs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_unused_macros != ptr2->x_cpp_warn_unused_macros)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_parameter != ptr2->x_warn_unused_parameter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_result != ptr2->x_warn_unused_result)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_value != ptr2->x_warn_unused_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_unused_variable != ptr2->x_warn_unused_variable)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_use_after_free != ptr2->x_warn_use_after_free)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_use_without_only != ptr2->x_warn_use_without_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_useless_cast != ptr2->x_warn_useless_cast)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_varargs != ptr2->x_warn_varargs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_cpp_warn_variadic_macros != ptr2->x_cpp_warn_variadic_macros)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_vector_operation_performance != ptr2->x_warn_vector_operation_performance)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_vexing_parse != ptr2->x_warn_vexing_parse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_virtual_inheritance != ptr2->x_warn_virtual_inheritance)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_virtual_move_assign != ptr2->x_warn_virtual_move_assign)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_vla != ptr2->x_warn_vla)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_vla_limit != ptr2->x_warn_vla_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_vla_parameter != ptr2->x_warn_vla_parameter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_volatile != ptr2->x_warn_volatile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_volatile_register_var != ptr2->x_warn_volatile_register_var)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_write_strings != ptr2->x_warn_write_strings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_zero_as_null_pointer_constant != ptr2->x_warn_zero_as_null_pointer_constant)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_zero_length_bounds != ptr2->x_warn_zero_length_bounds)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_warn_zerotrip != ptr2->x_warn_zerotrip)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_aux_info_file_name != ptr2->x_aux_info_file_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_callgraph != ptr2->x_flag_dump_callgraph)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_defined != ptr2->x_flag_lto_dump_defined)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_demangle != ptr2->x_flag_lto_dump_demangle)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_body != ptr2->x_flag_dump_body)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_level != ptr2->x_flag_dump_level)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dump_base_name != ptr2->x_dump_base_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dump_base_ext != ptr2->x_dump_base_ext)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dump_dir_name != ptr2->x_dump_dir_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pic != ptr2->x_flag_pic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pie != ptr2->x_flag_pie)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_abi_compat_version != ptr2->x_flag_abi_compat_version)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_abi_version != ptr2->x_flag_abi_version)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_access_control != ptr2->x_flag_access_control)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ada_specs_parent != ptr2->x_ada_specs_parent)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_aggressive_function_elimination != ptr2->x_flag_aggressive_function_elimination)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_aggressive_loop_optimizations != ptr2->x_flag_aggressive_loop_optimizations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_align_commons != ptr2->x_flag_align_commons)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_align_functions != ptr2->x_flag_align_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_str_align_functions != ptr2->x_str_align_functions
      && (!ptr1->x_str_align_functions || !ptr2->x_str_align_functions
          || strcmp (ptr1->x_str_align_functions, ptr2->x_str_align_functions)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_align_jumps != ptr2->x_flag_align_jumps)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_str_align_jumps != ptr2->x_str_align_jumps
      && (!ptr1->x_str_align_jumps || !ptr2->x_str_align_jumps
          || strcmp (ptr1->x_str_align_jumps, ptr2->x_str_align_jumps)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_align_labels != ptr2->x_flag_align_labels)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_str_align_labels != ptr2->x_str_align_labels
      && (!ptr1->x_str_align_labels || !ptr2->x_str_align_labels
          || strcmp (ptr1->x_str_align_labels, ptr2->x_str_align_labels)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_align_loops != ptr2->x_flag_align_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_str_align_loops != ptr2->x_str_align_loops
      && (!ptr1->x_str_align_loops || !ptr2->x_str_align_loops
          || strcmp (ptr1->x_str_align_loops, ptr2->x_str_align_loops)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_aligned_new_threshold != ptr2->x_aligned_new_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_all_intrinsics != ptr2->x_flag_all_intrinsics)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_allocation_dce != ptr2->x_flag_allocation_dce)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_allow_argument_mismatch != ptr2->x_flag_allow_argument_mismatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_allow_invalid_boz != ptr2->x_flag_allow_invalid_boz)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_allow_leading_underscore != ptr2->x_flag_allow_leading_underscore)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_allow_parameterless_variadic_functions != ptr2->x_flag_allow_parameterless_variadic_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_store_data_races != ptr2->x_flag_store_data_races)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer != ptr2->x_flag_analyzer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_call_summaries != ptr2->x_flag_analyzer_call_summaries)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_checker != ptr2->x_flag_analyzer_checker)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_feasibility != ptr2->x_flag_analyzer_feasibility)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_fine_grained != ptr2->x_flag_analyzer_fine_grained)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_show_duplicate_count != ptr2->x_flag_analyzer_show_duplicate_count)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_state_merge != ptr2->x_flag_analyzer_state_merge)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_state_purge != ptr2->x_flag_analyzer_state_purge)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_transitivity != ptr2->x_flag_analyzer_transitivity)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_undo_inlining != ptr2->x_flag_analyzer_undo_inlining)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_verbose_edges != ptr2->x_flag_analyzer_verbose_edges)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_analyzer_verbose_state_changes != ptr2->x_flag_analyzer_verbose_state_changes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_analyzer_verbosity != ptr2->x_analyzer_verbosity)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_common_deferred_options != ptr2->x_common_deferred_options)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_asm != ptr2->x_flag_no_asm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_assert != ptr2->x_flag_assert)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_associative_math != ptr2->x_flag_associative_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_asynchronous_unwind_tables != ptr2->x_flag_asynchronous_unwind_tables)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_auto_inc_dec != ptr2->x_flag_auto_inc_dec)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_auto_profile != ptr2->x_flag_auto_profile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_auto_profile_file != ptr2->x_auto_profile_file)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_automatic != ptr2->x_flag_automatic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_backslash != ptr2->x_flag_backslash)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_backtrace != ptr2->x_flag_backtrace)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_bit_tests != ptr2->x_flag_bit_tests)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_blas_matmul_limit != ptr2->x_flag_blas_matmul_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_bounds_check != ptr2->x_flag_bounds_check)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_branch_on_count_reg != ptr2->x_flag_branch_on_count_reg)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_branch_probabilities != ptr2->x_flag_branch_probabilities)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_building_libgcc != ptr2->x_flag_building_libgcc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_building_libgfortran != ptr2->x_flag_building_libgfortran)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_building_libphobos_tests != ptr2->x_flag_building_libphobos_tests)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_builtin != ptr2->x_flag_no_builtin)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_c_prototypes != ptr2->x_flag_c_prototypes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_c_prototypes_external != ptr2->x_flag_c_prototypes_external)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_caller_saves != ptr2->x_flag_caller_saves)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_callgraph_info != ptr2->x_flag_callgraph_info)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cf_protection != ptr2->x_flag_cf_protection)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_char8_t != ptr2->x_flag_char8_t)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_check_new != ptr2->x_flag_check_new)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_check_action != ptr2->x_flag_check_action)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_checking != ptr2->x_flag_checking)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_coarray != ptr2->x_flag_coarray)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_code_hoisting != ptr2->x_flag_code_hoisting)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_combine_stack_adjustments != ptr2->x_flag_combine_stack_adjustments)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_common != ptr2->x_flag_no_common)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_compare_debug != ptr2->x_flag_compare_debug)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_compare_debug_opt != ptr2->x_flag_compare_debug_opt)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_compare_elim_after_reload != ptr2->x_flag_compare_elim_after_reload)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_concepts != ptr2->x_flag_concepts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_concepts_diagnostics_max_depth != ptr2->x_concepts_diagnostics_max_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_concepts_ts != ptr2->x_flag_concepts_ts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_conserve_stack != ptr2->x_flag_conserve_stack)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_constexpr_cache_depth != ptr2->x_constexpr_cache_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_max_constexpr_depth != ptr2->x_max_constexpr_depth)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_constexpr_fp_except != ptr2->x_flag_constexpr_fp_except)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_constexpr_loop_limit != ptr2->x_constexpr_loop_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_constexpr_ops_limit != ptr2->x_constexpr_ops_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_convert != ptr2->x_flag_convert)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_coroutines != ptr2->x_flag_coroutines)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cprop_registers != ptr2->x_flag_cprop_registers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cray_pointer != ptr2->x_flag_cray_pointer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_crossjumping != ptr2->x_flag_crossjumping)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cse_follow_jumps != ptr2->x_flag_cse_follow_jumps)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cx_fortran_rules != ptr2->x_flag_cx_fortran_rules)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cx_limited_range != ptr2->x_flag_cx_limited_range)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_data_sections != ptr2->x_flag_data_sections)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dbg_cnt_list != ptr2->x_flag_dbg_cnt_list)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dce != ptr2->x_flag_dce)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_debug_aux_vars != ptr2->x_flag_debug_aux_vars)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_debug_types_section != ptr2->x_flag_debug_types_section)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec != ptr2->x_flag_dec)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_blank_format_item != ptr2->x_flag_dec_blank_format_item)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_char_conversions != ptr2->x_flag_dec_char_conversions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_format_defaults != ptr2->x_flag_dec_format_defaults)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_include != ptr2->x_flag_dec_include)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_intrinsic_ints != ptr2->x_flag_dec_intrinsic_ints)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_math != ptr2->x_flag_dec_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_static != ptr2->x_flag_dec_static)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dec_structure != ptr2->x_flag_dec_structure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_declone_ctor_dtor != ptr2->x_flag_declone_ctor_dtor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_default_double != ptr2->x_flag_default_double)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_default_integer != ptr2->x_flag_default_integer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_default_real_10 != ptr2->x_flag_default_real_10)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_default_real_16 != ptr2->x_flag_default_real_16)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_default_real_8 != ptr2->x_flag_default_real_8)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_defer_pop != ptr2->x_flag_defer_pop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_delayed_branch != ptr2->x_flag_delayed_branch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_delete_dead_exceptions != ptr2->x_flag_delete_dead_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_delete_null_pointer_checks != ptr2->x_flag_delete_null_pointer_checks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_devirtualize != ptr2->x_flag_devirtualize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ltrans_devirtualize != ptr2->x_flag_ltrans_devirtualize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_devirtualize_speculatively != ptr2->x_flag_devirtualize_speculatively)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_color != ptr2->x_flag_diagnostics_show_color)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_generate_patch != ptr2->x_flag_diagnostics_generate_patch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_diagnostics_minimum_margin_width != ptr2->x_diagnostics_minimum_margin_width)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_parseable_fixits != ptr2->x_flag_diagnostics_parseable_fixits)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_path_format != ptr2->x_flag_diagnostics_path_format)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_caret != ptr2->x_flag_diagnostics_show_caret)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_cwe != ptr2->x_flag_diagnostics_show_cwe)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_labels != ptr2->x_flag_diagnostics_show_labels)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_line_numbers != ptr2->x_flag_diagnostics_show_line_numbers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_option != ptr2->x_flag_diagnostics_show_option)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_path_depths != ptr2->x_flag_diagnostics_show_path_depths)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_template_tree != ptr2->x_flag_diagnostics_show_template_tree)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_diagnostics_show_urls != ptr2->x_flag_diagnostics_show_urls)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dollar_ok != ptr2->x_flag_dollar_ok)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dse != ptr2->x_flag_dse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_ada_spec != ptr2->x_flag_dump_ada_spec)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_ada_spec_slim != ptr2->x_flag_dump_ada_spec_slim)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer != ptr2->x_flag_dump_analyzer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_callgraph != ptr2->x_flag_dump_analyzer_callgraph)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_exploded_graph != ptr2->x_flag_dump_analyzer_exploded_graph)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_exploded_nodes != ptr2->x_flag_dump_analyzer_exploded_nodes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_exploded_nodes_2 != ptr2->x_flag_dump_analyzer_exploded_nodes_2)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_exploded_nodes_3 != ptr2->x_flag_dump_analyzer_exploded_nodes_3)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_exploded_paths != ptr2->x_flag_dump_analyzer_exploded_paths)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_feasibility != ptr2->x_flag_dump_analyzer_feasibility)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_json != ptr2->x_flag_dump_analyzer_json)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_state_purge != ptr2->x_flag_dump_analyzer_state_purge)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_stderr != ptr2->x_flag_dump_analyzer_stderr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_supergraph != ptr2->x_flag_dump_analyzer_supergraph)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_analyzer_untracked != ptr2->x_flag_dump_analyzer_untracked)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_final_insns != ptr2->x_flag_dump_final_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_fortran_global != ptr2->x_flag_dump_fortran_global)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_fortran_optimized != ptr2->x_flag_dump_fortran_optimized)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_fortran_original != ptr2->x_flag_dump_fortran_original)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_go_spec != ptr2->x_flag_dump_go_spec)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_locations != ptr2->x_flag_dump_locations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_noaddr != ptr2->x_flag_dump_noaddr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_passes != ptr2->x_flag_dump_passes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_scos != ptr2->x_flag_dump_scos)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_unnumbered != ptr2->x_flag_dump_unnumbered)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dump_unnumbered_links != ptr2->x_flag_dump_unnumbered_links)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dwarf2_cfi_asm != ptr2->x_flag_dwarf2_cfi_asm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_early_inlining != ptr2->x_flag_early_inlining)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_elide_constructors != ptr2->x_flag_elide_constructors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_elide_type != ptr2->x_flag_elide_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_debug_only_used_symbols != ptr2->x_flag_debug_only_used_symbols)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_eliminate_unused_debug_types != ptr2->x_flag_eliminate_unused_debug_types)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_emit_class_debug_always != ptr2->x_flag_emit_class_debug_always)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_enforce_eh_specs != ptr2->x_flag_enforce_eh_specs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_exceptions != ptr2->x_flag_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_excess_precision != ptr2->x_flag_excess_precision)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_expensive_optimizations != ptr2->x_flag_expensive_optimizations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ext_numeric_literals != ptr2->x_flag_ext_numeric_literals)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_extern_stdcpp != ptr2->x_flag_extern_stdcpp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_extern_tls_init != ptr2->x_flag_extern_tls_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_external_blas != ptr2->x_flag_external_blas)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_f2c != ptr2->x_flag_f2c)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fat_lto_objects != ptr2->x_flag_fat_lto_objects)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_finite_loops != ptr2->x_flag_finite_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_finite_math_only != ptr2->x_flag_finite_math_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fixed_line_length != ptr2->x_flag_fixed_line_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_float_store != ptr2->x_flag_float_store)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fold_simple_inlines != ptr2->x_flag_fold_simple_inlines)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_forward_propagate != ptr2->x_flag_forward_propagate)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fp_contract_mode != ptr2->x_flag_fp_contract_mode)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fp_int_builtin_inexact != ptr2->x_flag_fp_int_builtin_inexact)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_free_line_length != ptr2->x_flag_free_line_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_frontend_loop_interchange != ptr2->x_flag_frontend_loop_interchange)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_frontend_optimize != ptr2->x_flag_frontend_optimize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_function_cse != ptr2->x_flag_no_function_cse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_function_sections != ptr2->x_flag_function_sections)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gcse != ptr2->x_flag_gcse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gcse_after_reload != ptr2->x_flag_gcse_after_reload)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gcse_las != ptr2->x_flag_gcse_las)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gcse_lm != ptr2->x_flag_gcse_lm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gcse_sm != ptr2->x_flag_gcse_sm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gimple != ptr2->x_flag_gimple)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_gnat_encodings != ptr2->x_gnat_encodings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_gnu_keywords != ptr2->x_flag_no_gnu_keywords)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_next_runtime != ptr2->x_flag_next_runtime)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tm != ptr2->x_flag_tm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gnu_unique != ptr2->x_flag_gnu_unique)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gnu89_inline != ptr2->x_flag_gnu89_inline)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_check_divide_overflow != ptr2->x_go_check_divide_overflow)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_check_divide_zero != ptr2->x_go_check_divide_zero)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_compiling_runtime != ptr2->x_go_compiling_runtime)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_debug_escape_level != ptr2->x_go_debug_escape_level)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_debug_escape_hash != ptr2->x_go_debug_escape_hash)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_debug_optimization != ptr2->x_go_debug_optimization)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_graphite != ptr2->x_flag_graphite)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_graphite_identity != ptr2->x_flag_graphite_identity)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_guess_branch_prob != ptr2->x_flag_guess_branch_prob)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_harden_compares != ptr2->x_flag_harden_compares)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_harden_conditional_branches != ptr2->x_flag_harden_conditional_branches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_hoist_adjacent_loads != ptr2->x_flag_hoist_adjacent_loads)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_ident != ptr2->x_flag_no_ident)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_if_conversion != ptr2->x_flag_if_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_if_conversion2 != ptr2->x_flag_if_conversion2)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_implement_inlines != ptr2->x_flag_implement_inlines)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_implicit_constexpr != ptr2->x_flag_implicit_constexpr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_implicit_inline_templates != ptr2->x_flag_implicit_inline_templates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_implicit_none != ptr2->x_flag_implicit_none)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_implicit_templates != ptr2->x_flag_implicit_templates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_indirect_inlining != ptr2->x_flag_indirect_inlining)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inhibit_size_directive != ptr2->x_flag_inhibit_size_directive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_init_derived != ptr2->x_flag_init_derived)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_init_real != ptr2->x_flag_init_real)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_inline != ptr2->x_flag_no_inline)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_arg_packing != ptr2->x_flag_inline_arg_packing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_atomics != ptr2->x_flag_inline_atomics)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_functions != ptr2->x_flag_inline_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_functions_called_once != ptr2->x_flag_inline_functions_called_once)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_matmul_limit != ptr2->x_flag_inline_matmul_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_inline_small_functions != ptr2->x_flag_inline_small_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_instrument_function_entry_exit != ptr2->x_flag_instrument_function_entry_exit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_integer4_kind != ptr2->x_flag_integer4_kind)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_invariants != ptr2->x_flag_invariants)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_bit_cp != ptr2->x_flag_ipa_bit_cp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_cp != ptr2->x_flag_ipa_cp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_cp_clone != ptr2->x_flag_ipa_cp_clone)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_icf != ptr2->x_flag_ipa_icf)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_icf_functions != ptr2->x_flag_ipa_icf_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_icf_variables != ptr2->x_flag_ipa_icf_variables)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_modref != ptr2->x_flag_ipa_modref)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_profile != ptr2->x_flag_ipa_profile)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_pta != ptr2->x_flag_ipa_pta)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_pure_const != ptr2->x_flag_ipa_pure_const)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_ra != ptr2->x_flag_ipa_ra)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_reference != ptr2->x_flag_ipa_reference)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_reference_addressable != ptr2->x_flag_ipa_reference_addressable)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_sra != ptr2->x_flag_ipa_sra)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_stack_alignment != ptr2->x_flag_ipa_stack_alignment)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_strict_aliasing != ptr2->x_flag_ipa_strict_aliasing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ipa_vrp != ptr2->x_flag_ipa_vrp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_algorithm != ptr2->x_flag_ira_algorithm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_hoist_pressure != ptr2->x_flag_ira_hoist_pressure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_loop_pressure != ptr2->x_flag_ira_loop_pressure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_region != ptr2->x_flag_ira_region)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_share_save_slots != ptr2->x_flag_ira_share_save_slots)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_share_spill_slots != ptr2->x_flag_ira_share_spill_slots)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ira_verbose != ptr2->x_flag_ira_verbose)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_isolate_erroneous_paths_attribute != ptr2->x_flag_isolate_erroneous_paths_attribute)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_isolate_erroneous_paths_dereference != ptr2->x_flag_isolate_erroneous_paths_dereference)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_default_ivar_visibility != ptr2->x_default_ivar_visibility)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ivopts != ptr2->x_flag_ivopts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_jump_tables != ptr2->x_flag_jump_tables)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_keep_gc_roots_live != ptr2->x_flag_keep_gc_roots_live)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_keep_inline_dllexport != ptr2->x_flag_keep_inline_dllexport)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_keep_inline_functions != ptr2->x_flag_keep_inline_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_keep_static_consts != ptr2->x_flag_keep_static_consts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_keep_static_functions != ptr2->x_flag_keep_static_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_note_include_translate_yes != ptr2->x_note_include_translate_yes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_note_include_translate_no != ptr2->x_note_include_translate_no)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_note_module_cmi_yes != ptr2->x_note_module_cmi_yes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_large_source_files != ptr2->x_flag_large_source_files)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lax_vector_conversions != ptr2->x_flag_lax_vector_conversions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_leading_underscore != ptr2->x_flag_leading_underscore)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lifetime_dse != ptr2->x_flag_lifetime_dse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_limit_function_alignment != ptr2->x_flag_limit_function_alignment)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_linker_output != ptr2->x_flag_lto_linker_output)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_live_patching != ptr2->x_flag_live_patching)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_live_range_shrinkage != ptr2->x_flag_live_range_shrinkage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_local_ivars != ptr2->x_flag_local_ivars)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_loop_interchange != ptr2->x_flag_loop_interchange)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_loop_nest_optimize != ptr2->x_flag_loop_nest_optimize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_loop_parallelize_all != ptr2->x_flag_loop_parallelize_all)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unroll_jam != ptr2->x_flag_unroll_jam)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lra_remat != ptr2->x_flag_lra_remat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_compression_level != ptr2->x_flag_lto_compression_level)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_partition != ptr2->x_flag_lto_partition)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_report != ptr2->x_flag_lto_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_report_wpa != ptr2->x_flag_lto_report_wpa)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto != ptr2->x_flag_lto)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ltrans != ptr2->x_flag_ltrans)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ltrans_output_list != ptr2->x_ltrans_output_list)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_errno_math != ptr2->x_flag_errno_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_max_array_constructor != ptr2->x_flag_max_array_constructor)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_max_errors != ptr2->x_flag_max_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_max_stack_var_size != ptr2->x_flag_max_stack_var_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_max_subrecord_length != ptr2->x_flag_max_subrecord_length)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_mem_report != ptr2->x_mem_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_mem_report_wpa != ptr2->x_mem_report_wpa)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_merge_debug_strings != ptr2->x_flag_merge_debug_strings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_header_unit != ptr2->x_flag_header_unit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_module_implicit_inline != ptr2->x_flag_module_implicit_inline)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_module_lazy != ptr2->x_flag_module_lazy)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_module_only != ptr2->x_flag_module_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_module_private != ptr2->x_flag_module_private)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_module_version_ignore != ptr2->x_flag_module_version_ignore)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_moduleinfo != ptr2->x_flag_moduleinfo)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_modules != ptr2->x_flag_modules)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_modulo_sched != ptr2->x_flag_modulo_sched)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_modulo_sched_allow_regmoves != ptr2->x_flag_modulo_sched_allow_regmoves)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_move_loop_invariants != ptr2->x_flag_move_loop_invariants)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_move_loop_stores != ptr2->x_flag_move_loop_stores)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ms_extensions != ptr2->x_flag_ms_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_new_inheriting_ctors != ptr2->x_flag_new_inheriting_ctors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_new_ttp != ptr2->x_flag_new_ttp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_nil_receivers != ptr2->x_flag_nil_receivers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_non_call_exceptions != ptr2->x_flag_non_call_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_nonansi_builtin != ptr2->x_flag_no_nonansi_builtin)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_nothrow_opt != ptr2->x_flag_nothrow_opt)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_abi != ptr2->x_flag_objc_abi)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_call_cxx_cdtors != ptr2->x_flag_objc_call_cxx_cdtors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_direct_dispatch != ptr2->x_flag_objc_direct_dispatch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_exceptions != ptr2->x_flag_objc_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_gc != ptr2->x_flag_objc_gc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_nilcheck != ptr2->x_flag_objc_nilcheck)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc_sjlj_exceptions != ptr2->x_flag_objc_sjlj_exceptions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_objc1_only != ptr2->x_flag_objc1_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_openacc != ptr2->x_flag_openacc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_openacc_dims != ptr2->x_flag_openacc_dims)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_openmp != ptr2->x_flag_openmp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_openmp_simd != ptr2->x_flag_openmp_simd)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_opt_info != ptr2->x_flag_opt_info)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_optimize_sibling_calls != ptr2->x_flag_optimize_sibling_calls)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_optimize_strlen != ptr2->x_flag_optimize_strlen)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pack_derived != ptr2->x_flag_pack_derived)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pack_struct != ptr2->x_flag_pack_struct)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pad_source != ptr2->x_flag_pad_source)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_partial_inlining != ptr2->x_flag_partial_inlining)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_patchable_function_entry != ptr2->x_flag_patchable_function_entry
      && (!ptr1->x_flag_patchable_function_entry || !ptr2->x_flag_patchable_function_entry
          || strcmp (ptr1->x_flag_patchable_function_entry, ptr2->x_flag_patchable_function_entry)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pcc_struct_return != ptr2->x_flag_pcc_struct_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_peel_loops != ptr2->x_flag_peel_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_no_peephole != ptr2->x_flag_no_peephole)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_peephole2 != ptr2->x_flag_peephole2)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_permissive != ptr2->x_flag_permissive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_permitted_flt_eval_methods != ptr2->x_flag_permitted_flt_eval_methods)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_plan9_extensions != ptr2->x_flag_plan9_extensions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_plt != ptr2->x_flag_plt)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_post_ipa_mem_report != ptr2->x_post_ipa_mem_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_postconditions != ptr2->x_flag_postconditions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pre_include != ptr2->x_flag_pre_include)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_pre_ipa_mem_report != ptr2->x_pre_ipa_mem_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_preconditions != ptr2->x_flag_preconditions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_predictive_commoning != ptr2->x_flag_predictive_commoning)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_prefetch_loop_arrays != ptr2->x_flag_prefetch_loop_arrays)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pretty_templates != ptr2->x_flag_pretty_templates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_printf_return_value != ptr2->x_flag_printf_return_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_flag != ptr2->x_profile_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_abs_path_flag != ptr2->x_profile_abs_path_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_arc_flag != ptr2->x_profile_arc_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_correction != ptr2->x_flag_profile_correction)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_data_prefix != ptr2->x_profile_data_prefix)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_exclude_files != ptr2->x_flag_profile_exclude_files)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_filter_files != ptr2->x_flag_profile_filter_files)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_info_section != ptr2->x_profile_info_section)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_note_location != ptr2->x_profile_note_location)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_partial_training != ptr2->x_flag_profile_partial_training)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_prefix_path != ptr2->x_profile_prefix_path)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_reorder_functions != ptr2->x_flag_profile_reorder_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_profile_report != ptr2->x_profile_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_reproducible != ptr2->x_flag_profile_reproducible)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_update != ptr2->x_flag_profile_update)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_use != ptr2->x_flag_profile_use)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_profile_values != ptr2->x_flag_profile_values)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_protect_parens != ptr2->x_flag_protect_parens)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_range_check != ptr2->x_flag_range_check)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_real4_kind != ptr2->x_flag_real4_kind)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_real8_kind != ptr2->x_flag_real8_kind)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_realloc_lhs != ptr2->x_flag_realloc_lhs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_reciprocal_math != ptr2->x_flag_reciprocal_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_record_gcc_switches != ptr2->x_flag_record_gcc_switches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_record_marker != ptr2->x_flag_record_marker)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_recursive != ptr2->x_flag_recursive)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ree != ptr2->x_flag_ree)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_rename_registers != ptr2->x_flag_rename_registers)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_reorder_blocks != ptr2->x_flag_reorder_blocks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_reorder_blocks_algorithm != ptr2->x_flag_reorder_blocks_algorithm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_reorder_blocks_and_partition != ptr2->x_flag_reorder_blocks_and_partition)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_reorder_functions != ptr2->x_flag_reorder_functions)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_repack_arrays != ptr2->x_flag_repack_arrays)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_replace_objc_classes != ptr2->x_flag_replace_objc_classes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_report_bug != ptr2->x_flag_report_bug)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_go_require_return_statement != ptr2->x_go_require_return_statement)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_rerun_cse_after_loop != ptr2->x_flag_rerun_cse_after_loop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_resched_modulo_sched != ptr2->x_flag_resched_modulo_sched)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_rounding_math != ptr2->x_flag_rounding_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_rtti != ptr2->x_flag_rtti)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sanitize_address_use_after_scope != ptr2->x_flag_sanitize_address_use_after_scope)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sanitize_coverage != ptr2->x_flag_sanitize_coverage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sanitize_undefined_trap_on_error != ptr2->x_flag_sanitize_undefined_trap_on_error)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_save_optimization_record != ptr2->x_flag_save_optimization_record)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_critical_path_heuristic != ptr2->x_flag_sched_critical_path_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_dep_count_heuristic != ptr2->x_flag_sched_dep_count_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_group_heuristic != ptr2->x_flag_sched_group_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_interblock != ptr2->x_flag_schedule_interblock)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_last_insn_heuristic != ptr2->x_flag_sched_last_insn_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_pressure != ptr2->x_flag_sched_pressure)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_rank_heuristic != ptr2->x_flag_sched_rank_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_speculative != ptr2->x_flag_schedule_speculative)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_spec_insn_heuristic != ptr2->x_flag_sched_spec_insn_heuristic)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_speculative_load != ptr2->x_flag_schedule_speculative_load)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_speculative_load_dangerous != ptr2->x_flag_schedule_speculative_load_dangerous)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_stalled_insns != ptr2->x_flag_sched_stalled_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched_stalled_insns_dep != ptr2->x_flag_sched_stalled_insns_dep)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_sched_verbose_param != ptr2->x_sched_verbose_param)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sched2_use_superblocks != ptr2->x_flag_sched2_use_superblocks)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_fusion != ptr2->x_flag_schedule_fusion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_insns != ptr2->x_flag_schedule_insns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_schedule_insns_after_reload != ptr2->x_flag_schedule_insns_after_reload)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_second_underscore != ptr2->x_flag_second_underscore)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_section_anchors != ptr2->x_flag_section_anchors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sel_sched_pipelining != ptr2->x_flag_sel_sched_pipelining)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sel_sched_pipelining_outer_loops != ptr2->x_flag_sel_sched_pipelining_outer_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sel_sched_reschedule_pipelined != ptr2->x_flag_sel_sched_reschedule_pipelined)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_selective_scheduling != ptr2->x_flag_selective_scheduling)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_selective_scheduling2 != ptr2->x_flag_selective_scheduling2)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_self_test != ptr2->x_flag_self_test)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_semantic_interposition != ptr2->x_flag_semantic_interposition)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_short_enums != ptr2->x_flag_short_enums)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_short_wchar != ptr2->x_flag_short_wchar)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_show_column != ptr2->x_flag_show_column)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_shrink_wrap != ptr2->x_flag_shrink_wrap)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_shrink_wrap_separate != ptr2->x_flag_shrink_wrap_separate)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sign_zero != ptr2->x_flag_sign_zero)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_signaling_nans != ptr2->x_flag_signaling_nans)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_signed_bitfields != ptr2->x_flag_signed_bitfields)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_signed_char != ptr2->x_flag_signed_char)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_signed_zeros != ptr2->x_flag_signed_zeros)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_simd_cost_model != ptr2->x_flag_simd_cost_model)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_single_precision_constant != ptr2->x_flag_single_precision_constant)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sized_deallocation != ptr2->x_flag_sized_deallocation)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_ivs_in_unroller != ptr2->x_flag_split_ivs_in_unroller)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_loops != ptr2->x_flag_split_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_paths != ptr2->x_flag_split_paths)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_stack != ptr2->x_flag_split_stack)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_wide_types != ptr2->x_flag_split_wide_types)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_split_wide_types_early != ptr2->x_flag_split_wide_types_early)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ssa_backprop != ptr2->x_flag_ssa_backprop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_ssa_phiopt != ptr2->x_flag_ssa_phiopt)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_default_sso != ptr2->x_default_sso)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stack_arrays != ptr2->x_flag_stack_arrays)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stack_clash_protection != ptr2->x_flag_stack_clash_protection)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stack_protect != ptr2->x_flag_stack_protect)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stack_reuse != ptr2->x_flag_stack_reuse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stack_usage != ptr2->x_flag_stack_usage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_detailed_statistics != ptr2->x_flag_detailed_statistics)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stdarg_opt != ptr2->x_flag_stdarg_opt)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_store_merging != ptr2->x_flag_store_merging)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_strict_aliasing != ptr2->x_flag_strict_aliasing)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_strict_enums != ptr2->x_flag_strict_enums)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_strict_volatile_bitfields != ptr2->x_flag_strict_volatile_bitfields)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_strong_eval_order != ptr2->x_flag_strong_eval_order)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_switch_errors != ptr2->x_flag_switch_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_sync_libcalls != ptr2->x_flag_sync_libcalls)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_syntax_only != ptr2->x_flag_syntax_only)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tail_call_workaround != ptr2->x_flag_tail_call_workaround)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_template_backtrace_limit != ptr2->x_template_backtrace_limit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_test_coverage != ptr2->x_flag_test_coverage)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_test_forall_temp != ptr2->x_flag_test_forall_temp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_thread_jumps != ptr2->x_flag_thread_jumps)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_threadsafe_statics != ptr2->x_flag_threadsafe_statics)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_time_report != ptr2->x_time_report)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_time_report_details != ptr2->x_time_report_details)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tls_default != ptr2->x_flag_tls_default)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_toplevel_reorder != ptr2->x_flag_toplevel_reorder)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tracer != ptr2->x_flag_tracer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_trampolines != ptr2->x_flag_trampolines)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_trapping_math != ptr2->x_flag_trapping_math)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_trapv != ptr2->x_flag_trapv)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_bit_ccp != ptr2->x_flag_tree_bit_ccp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_builtin_call_dce != ptr2->x_flag_tree_builtin_call_dce)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_ccp != ptr2->x_flag_tree_ccp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_ch != ptr2->x_flag_tree_ch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_coalesce_vars != ptr2->x_flag_tree_coalesce_vars)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_copy_prop != ptr2->x_flag_tree_copy_prop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_cselim != ptr2->x_flag_tree_cselim)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_dce != ptr2->x_flag_tree_dce)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_dom != ptr2->x_flag_tree_dom)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_dse != ptr2->x_flag_tree_dse)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_forwprop != ptr2->x_flag_tree_forwprop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_fre != ptr2->x_flag_tree_fre)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_distribute_patterns != ptr2->x_flag_tree_loop_distribute_patterns)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_distribution != ptr2->x_flag_tree_loop_distribution)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_if_convert != ptr2->x_flag_tree_loop_if_convert)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_im != ptr2->x_flag_tree_loop_im)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_ivcanon != ptr2->x_flag_tree_loop_ivcanon)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_optimize != ptr2->x_flag_tree_loop_optimize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_loop_vectorize != ptr2->x_flag_tree_loop_vectorize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_live_range_split != ptr2->x_flag_tree_live_range_split)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_parallelize_loops != ptr2->x_flag_tree_parallelize_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_partial_pre != ptr2->x_flag_tree_partial_pre)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_phiprop != ptr2->x_flag_tree_phiprop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_pre != ptr2->x_flag_tree_pre)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_pta != ptr2->x_flag_tree_pta)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_reassoc != ptr2->x_flag_tree_reassoc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_scev_cprop != ptr2->x_flag_tree_scev_cprop)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_sink != ptr2->x_flag_tree_sink)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_slp_vectorize != ptr2->x_flag_tree_slp_vectorize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_slsr != ptr2->x_flag_tree_slsr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_sra != ptr2->x_flag_tree_sra)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_switch_conversion != ptr2->x_flag_tree_switch_conversion)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_tail_merge != ptr2->x_flag_tree_tail_merge)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_ter != ptr2->x_flag_tree_ter)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_vectorize != ptr2->x_flag_tree_vectorize)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_tree_vrp != ptr2->x_flag_tree_vrp)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_auto_var_init != ptr2->x_flag_auto_var_init)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unconstrained_commons != ptr2->x_flag_unconstrained_commons)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_underscoring != ptr2->x_flag_underscoring)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unit_at_a_time != ptr2->x_flag_unit_at_a_time)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unroll_all_loops != ptr2->x_flag_unroll_all_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cunroll_grow_size != ptr2->x_flag_cunroll_grow_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unroll_loops != ptr2->x_flag_unroll_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unsafe_math_optimizations != ptr2->x_flag_unsafe_math_optimizations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unswitch_loops != ptr2->x_flag_unswitch_loops)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_unwind_tables != ptr2->x_flag_unwind_tables)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_use_cxa_atexit != ptr2->x_flag_use_cxa_atexit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_use_cxa_get_exception_ptr != ptr2->x_flag_use_cxa_get_exception_ptr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_use_linker_plugin != ptr2->x_flag_use_linker_plugin)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_var_tracking != ptr2->x_flag_var_tracking)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_var_tracking_assignments != ptr2->x_flag_var_tracking_assignments)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_var_tracking_assignments_toggle != ptr2->x_flag_var_tracking_assignments_toggle)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_var_tracking_uninit != ptr2->x_flag_var_tracking_uninit)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_variable_expansion_in_unroller != ptr2->x_flag_variable_expansion_in_unroller)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_vect_cost_model != ptr2->x_flag_vect_cost_model)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_verbose_asm != ptr2->x_flag_verbose_asm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_version_loops_for_strides != ptr2->x_flag_version_loops_for_strides)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_visibility_ms_compat != ptr2->x_flag_visibility_ms_compat)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_default_visibility != ptr2->x_default_visibility)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_value_profile_transformations != ptr2->x_flag_value_profile_transformations)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_vtable_verify != ptr2->x_flag_vtable_verify)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_vtv_counts != ptr2->x_flag_vtv_counts)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_vtv_debug != ptr2->x_flag_vtv_debug)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_weak != ptr2->x_flag_weak)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_weak_templates != ptr2->x_flag_weak_templates)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_web != ptr2->x_flag_web)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_whole_program != ptr2->x_flag_whole_program)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_working_directory != ptr2->x_flag_working_directory)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_wpa != ptr2->x_flag_wpa)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_wrapv != ptr2->x_flag_wrapv)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_wrapv_pointer != ptr2->x_flag_wrapv_pointer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_zero_initialized_in_bss != ptr2->x_flag_zero_initialized_in_bss)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_zero_link != ptr2->x_flag_zero_link)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf2out_as_loc_support != ptr2->x_dwarf2out_as_loc_support)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf2out_as_locview_support != ptr2->x_dwarf2out_as_locview_support)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_column_info != ptr2->x_debug_column_info)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_describe_dies != ptr2->x_flag_describe_dies)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf_version != ptr2->x_dwarf_version)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf_offset_size != ptr2->x_dwarf_offset_size)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gen_declaration != ptr2->x_flag_gen_declaration)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_generate_pub_sections != ptr2->x_debug_generate_pub_sections)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_gimple_stats != ptr2->x_flag_lto_gimple_stats)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_inline_points != ptr2->x_debug_inline_points)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_internal_reset_location_views != ptr2->x_debug_internal_reset_location_views)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf_record_gcc_switches != ptr2->x_dwarf_record_gcc_switches)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf_split_debug_info != ptr2->x_dwarf_split_debug_info)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_nonbind_markers_p != ptr2->x_debug_nonbind_markers_p)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_dwarf_strict != ptr2->x_dwarf_strict)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_gtoggle != ptr2->x_flag_gtoggle)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_debug_variable_location_views != ptr2->x_debug_variable_location_views)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_tool_help != ptr2->x_flag_lto_dump_tool_help)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_imultiarch != ptr2->x_imultiarch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_plugindir_string != ptr2->x_plugindir_string)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_list != ptr2->x_flag_lto_dump_list)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_isa_flags != ptr2->x_ix86_isa_flags)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_abi != ptr2->x_ix86_abi)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_pmode != ptr2->x_ix86_pmode)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_align_data_type != ptr2->x_ix86_align_data_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_isa_flags2 != ptr2->x_ix86_isa_flags2)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_android != ptr2->x_flag_android)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_arch_string != ptr2->x_ix86_arch_string
      && (!ptr1->x_ix86_arch_string || !ptr2->x_ix86_arch_string
          || strcmp (ptr1->x_ix86_arch_string, ptr2->x_ix86_arch_string)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_asm_dialect != ptr2->x_ix86_asm_dialect)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_linux_libc != ptr2->x_linux_libc)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_branch_cost != ptr2->x_ix86_branch_cost)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_cet_switch != ptr2->x_flag_cet_switch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_cmodel != ptr2->x_ix86_cmodel)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_direct_extern_access != ptr2->x_ix86_direct_extern_access)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_dispatch_scheduler != ptr2->x_flag_dispatch_scheduler)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_dump_tunes != ptr2->x_ix86_dump_tunes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_fentry != ptr2->x_flag_fentry)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_fentry_name != ptr2->x_fentry_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_fentry_section != ptr2->x_fentry_section)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_force_drap != ptr2->x_ix86_force_drap)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_force_indirect_call != ptr2->x_flag_force_indirect_call)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_fpmath != ptr2->x_ix86_fpmath)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_function_return != ptr2->x_ix86_function_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_target_flags != ptr2->x_ix86_target_flags)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_harden_sls != ptr2->x_ix86_harden_sls)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_incoming_stack_boundary_arg != ptr2->x_ix86_incoming_stack_boundary_arg)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_indirect_branch_cs_prefix != ptr2->x_ix86_indirect_branch_cs_prefix)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_indirect_branch_register != ptr2->x_ix86_indirect_branch_register)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_indirect_branch != ptr2->x_ix86_indirect_branch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_instrument_return != ptr2->x_ix86_instrument_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_section_threshold != ptr2->x_ix86_section_threshold)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_manual_endbr != ptr2->x_flag_manual_endbr)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tune_memcpy_strategy != ptr2->x_ix86_tune_memcpy_strategy
      && (!ptr1->x_ix86_tune_memcpy_strategy || !ptr2->x_ix86_tune_memcpy_strategy
          || strcmp (ptr1->x_ix86_tune_memcpy_strategy, ptr2->x_ix86_tune_memcpy_strategy)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tune_memset_strategy != ptr2->x_ix86_tune_memset_strategy
      && (!ptr1->x_ix86_tune_memset_strategy || !ptr2->x_ix86_tune_memset_strategy
          || strcmp (ptr1->x_ix86_tune_memset_strategy, ptr2->x_ix86_tune_memset_strategy)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_move_max != ptr2->x_ix86_move_max)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_needed != ptr2->x_ix86_needed)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tune_no_default != ptr2->x_ix86_tune_no_default)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_nop_mcount != ptr2->x_flag_nop_mcount)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_prefer_vector_width_type != ptr2->x_prefer_vector_width_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_preferred_stack_boundary_arg != ptr2->x_ix86_preferred_stack_boundary_arg)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_recip_name != ptr2->x_ix86_recip_name
      && (!ptr1->x_ix86_recip_name || !ptr2->x_ix86_recip_name
          || strcmp (ptr1->x_ix86_recip_name, ptr2->x_ix86_recip_name)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_record_mcount != ptr2->x_flag_record_mcount)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_flag_record_return != ptr2->x_ix86_flag_record_return)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_regparm != ptr2->x_ix86_regparm)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_skip_rax_setup != ptr2->x_flag_skip_rax_setup)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_sse2avx != ptr2->x_ix86_sse2avx)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_stack_protector_guard_offset_str != ptr2->x_ix86_stack_protector_guard_offset_str
      && (!ptr1->x_ix86_stack_protector_guard_offset_str || !ptr2->x_ix86_stack_protector_guard_offset_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_offset_str, ptr2->x_ix86_stack_protector_guard_offset_str)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_stack_protector_guard_reg_str != ptr2->x_ix86_stack_protector_guard_reg_str
      && (!ptr1->x_ix86_stack_protector_guard_reg_str || !ptr2->x_ix86_stack_protector_guard_reg_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_reg_str, ptr2->x_ix86_stack_protector_guard_reg_str)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_stack_protector_guard_symbol_str != ptr2->x_ix86_stack_protector_guard_symbol_str
      && (!ptr1->x_ix86_stack_protector_guard_symbol_str || !ptr2->x_ix86_stack_protector_guard_symbol_str
          || strcmp (ptr1->x_ix86_stack_protector_guard_symbol_str, ptr2->x_ix86_stack_protector_guard_symbol_str)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_stack_protector_guard != ptr2->x_ix86_stack_protector_guard)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_force_align_arg_pointer != ptr2->x_ix86_force_align_arg_pointer)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_store_max != ptr2->x_ix86_store_max)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_stringop_alg != ptr2->x_ix86_stringop_alg)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tls_dialect != ptr2->x_ix86_tls_dialect)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tune_ctrl_string != ptr2->x_ix86_tune_ctrl_string
      && (!ptr1->x_ix86_tune_ctrl_string || !ptr2->x_ix86_tune_ctrl_string
          || strcmp (ptr1->x_ix86_tune_ctrl_string, ptr2->x_ix86_tune_ctrl_string)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_tune_string != ptr2->x_ix86_tune_string
      && (!ptr1->x_ix86_tune_string || !ptr2->x_ix86_tune_string
          || strcmp (ptr1->x_ix86_tune_string, ptr2->x_ix86_tune_string)))
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_ix86_veclibabi_type != ptr2->x_ix86_veclibabi_type)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_name_sort != ptr2->x_flag_lto_name_sort)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_asm_file_name != ptr2->x_asm_file_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_objects != ptr2->x_flag_lto_dump_objects)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_pass_exit_codes != ptr2->x_pass_exit_codes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_pedantic_errors != ptr2->x_flag_pedantic_errors)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_use_pipes != ptr2->x_use_pipes)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_file_name != ptr2->x_print_file_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_multi_directory != ptr2->x_print_multi_directory)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_multi_lib != ptr2->x_print_multi_lib)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_multi_os_directory != ptr2->x_print_multi_os_directory)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_multiarch != ptr2->x_print_multiarch)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_prog_name != ptr2->x_print_prog_name)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_search_dirs != ptr2->x_print_search_dirs)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_sysroot != ptr2->x_print_sysroot)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_print_sysroot_headers_suffix != ptr2->x_print_sysroot_headers_suffix)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_print_value != ptr2->x_flag_lto_print_value)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_quiet_flag != ptr2->x_quiet_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_reverse_sort != ptr2->x_flag_lto_reverse_sort)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_size_sort != ptr2->x_flag_lto_size_sort)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_stdlib_kind != ptr2->x_flag_stdlib_kind)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_symbol != ptr2->x_flag_lto_dump_symbol)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_report_times != ptr2->x_report_times)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_tree_stats != ptr2->x_flag_lto_tree_stats)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_lto_dump_type_stats != ptr2->x_flag_lto_dump_type_stats)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_flag_undef != ptr2->x_flag_undef)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_verbose_flag != ptr2->x_verbose_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_version_flag != ptr2->x_version_flag)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_inhibit_warnings != ptr2->x_inhibit_warnings)
    internal_error ("%<global_options%> are modified in local context");
  if (ptr1->x_wrapper_string != ptr2->x_wrapper_string)
    internal_error ("%<global_options%> are modified in local context");
}
